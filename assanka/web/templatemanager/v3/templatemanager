<?php
/*
########################################################
Assanka Template Manager, version 3
-------------
Produces HTML output based on matching an array of
content items with tags in template files.

Accepted Inputs:
none

08/11/2004
Andrew Betts
Assanka Ltd
########################################################
*/



/**
 * TODO:RB:20120912: This file is still in use by at least the rankings-admin-trunk and the
 * rankings-pubic-trunk projects.  Before deprecation, those projects need to be updated, or
 * we need to support some form of per-project core for older projects before we upgrade them.
 */






function template($tem, $content = "") {
	global $db, $page;

	// Define the location of the template
	$temurl = $_SERVER["DOCUMENT_ROOT"].DIR_TEMPL."/".$tem.".html";

	// Check that the specified template exists
	if (!file_exists($temurl)) {
		
		// There used to be a check against master templates, but the links
		// for each project were broken and so removed; new policy is to set
		// up each project right anyway :)
		trigger_error("Template '".$tem."' not found in ".$_SERVER["DOCUMENT_ROOT"].DIR_TEMPL."/".$tem.".html", E_USER_ERROR);
	}

	// Open and read the template file
	$fp = fopen($temurl, "r") or trigger_error("Failure opening template '".$tem."'", E_USER_ERROR);
	$buffer = "";
	while (!feof($fp)) {
		$buffer .= fread($fp, 4096);
	}

	// Add a leading space to prevent anything being found at index 0
	$buffer = " ".$buffer;

	// Create placeholder arrays
	$placeholders = array();
	$functions = array();
	$phindex = 0;

	// Read VALIDPLACEHOLDER and VALIDFUNCTION tags
	while ($pos = strpos($buffer, "<!--@VALID")) {

		// extract the relevant bit
		$colonpos = strpos($buffer, ":", $pos);
		$end = strpos($buffer, "-->", $pos);
		$placeholder = explode(", ", trim(substr($buffer, $colonpos+1, ($end - $colonpos)-1)));
		if (preg_match("/^[a-z0-9_A-Z]+$/", $placeholder[0])) {
			if (strpos($buffer, "<!--@VALIDPLACEHOLDER", $pos) == $pos) {
				$placeholders[$phindex]["tag"] = trim($placeholder[0]);
				$placeholders[$phindex]["default"] = (isset($placeholder[1]))?trim($placeholder[1]):"";
				$phindex++;
			} else {
				$functions[] = trim($placeholder[0]);
			}
		} else {
			trigger_error("Invalid placeholder or function specified in template header (template: '$tem', placeholder: '$placeholder[0]').  The placeholder was ignored", E_USER_WARNING);
		}
		$buffer = substr($buffer, 0, $pos).substr($buffer, ($end+3));
	}

	// If there is content...
	if ($content) {

		// Loop through the possible placeholder tags
		foreach($placeholders as $placeholder) {
			if (isset($content[$placeholder["tag"]])) {

				// Substitute in the data
				$buffer = str_replace("<!--@".$placeholder["tag"]."-->", $content[$placeholder["tag"]], $buffer);
			} elseif (defined(strtoupper($placeholder["tag"]))) {

				// Substitute in the data from a constant
				$buffer = str_replace("<!--@".$placeholder["tag"]."-->", constant($placeholder["tag"]), $buffer);
			} else {

				// Substitute in the default value
				$buffer = str_replace("<!--@".$placeholder["tag"]."-->", $placeholder["default"], $buffer);
			}
		}
	}

	// Loop through the possible code tags
	foreach ($functions as $tag) {
		if (function_exists("tem_".$tag)) {

			// Search first to avoid endlessly recursing
			if (strpos($buffer, "<!--@$tag-->") !== false) {
				eval("\$ret = tem_".$tag."();");
				$buffer = str_replace("<!--@$tag-->", $ret, $buffer);
			}
		} else {
			trigger_error("Function 'tem_$tag()' not found in template '$tem'", E_USER_WARNING);
		}
	}

	// Remove any remaining placeholders and the headers
	$buffer = preg_replace("/\<\!\-\-\@[a-z0-9A-Z ':,()_\.\-]+\-\-\>/i", "", $buffer);

	// Be evil and remove all newlines
	//$buffer = str_replace("\n", "", $buffer);

	// Run result through tidy
	$config = array('indent' => TRUE,
		'doctype' => 'omit',
		'wrap', 200);
	//$buffer = tidy_parse_string($buffer, $config, 'UTF8');

	// return the final output
	return trim($buffer)."\n";
}

function tem_nav() {
	global $db, $page;
	$op = "";
	$additionalChecks = "";
	$contentscriptname = (defined("CMS_CONTENTSCRIPT")) ? CMS_CONTENTSCRIPT : "content";
	
	// CMS navigation items
	// Check for Outline v3 first:
	if (!empty($page) and !empty($page->outlineenabled)) {
		$newtablescode = "visibility='visible'";
	} else if ($db->query("SELECT 1 FROM out_localcontent LIMIT 0", true)) {
		$newtablescode = "isvisible=1";
	} else {
		$newtablescode = false;
	}
	
	// Get the table homepage id
	$result = $db->query("SELECT i.id FROM out_items i LEFT JOIN out_localcontent l ON i.id=l.itemid WHERE l.tag = 'homepage'");
	if ($row = $db->fetchRow($result)) $homepageid = $row["id"];
	else $homepageid = false;
	
	if ($newtablescode) {
		$result = $db->query("SELECT out_items.id as itemid, out_localcontent.id as id, tag, title, (tag='homepage') as ishomepage FROM out_items LEFT JOIN out_localcontent ON out_items.id=out_localcontent.itemid LEFT JOIN out_versions ON out_localcontent.id=out_versions.localcontentid WHERE (parentid IS NULL OR parentid=0".(($homepageid)?" OR parentid=".$homepageid:"").") AND ".$newtablescode." AND islive=1 AND type='page' ORDER BY ishomepage DESC, sortindex ASC, title ASC");
	} else {
		$result = $db->query("SELECT * FROM content LIMIT 0,1");
		if ($row=$db->fetchrow($result)) { 
			if(array_key_exists("visible",$row)) {
				$additionalChecks = " AND visible=1 ";
			}
			if(array_key_exists("islive",$row)) {
				$additionalChecks .= " AND islive=1 ";
			}
		}
		$result = $db->query("SELECT pageid as id, tag, title FROM content WHERE (parentid IS NULL OR parentid<=0) ".$additionalChecks." ORDER BY sortindex, title");
	}
	while ($row = $db->fetchrow($result)) {
		$sel = (strpos($_SERVER["PHP_SELF"], "/".$contentscriptname."/".$row["tag"]) !== false)?"sel":"unsel";
		if ($_SERVER["PHP_SELF"] == "/index" && $row["tag"] == "homepage") $sel = "sel";

		// Sub navigation - moved to a function to allow for a deep tree view
		if ($sel == "sel" and (!$homepageid or $homepageid != $row["itemid"])) {
			if ($newtablescode) {
				$subnav = tem_nav_children($row["itemid"], true, $db, $additionalChecks);
			} else {
				$subnav = tem_nav_children($row["id"], false, $db, $additionalChecks);
			}
		} else {
			$subnav = "";
		}
		$op .= template("page-navitem", array("location"=>"/".$contentscriptname."/".$row["tag"]."/", "id"=>"cms".$row["id"].$sel, "selstate"=>$sel, "title"=>$row["title"], "text"=>$row["title"], "subnav"=>$subnav));
		
	}
	return $op;
}

function tem_nav_children($itemID, $newTables, $db, $additionalChecks) {
	global $page;

	// CMS navigation items
	// Check for Outline v3 first:
	if (!empty($page) and !empty($page->outlineenabled)) {
		$newtablescode = "visibility='visible'";
	} else if ($db->query("SELECT 1 FROM out_localcontent LIMIT 0", true)) {
		$newtablescode = "isvisible=1";
	} else {
		$newtablescode = false;
	}

	$contentscriptname = (defined("CMS_CONTENTSCRIPT")) ? CMS_CONTENTSCRIPT : "content";
	if ($newtablescode) {
		$result = $db->query("SELECT out_items.id AS itemid, out_localcontent.id as id, tag, title FROM out_items LEFT JOIN out_localcontent ON out_items.id=out_localcontent.itemid LEFT JOIN out_versions ON out_localcontent.id=out_versions.localcontentid WHERE parentid=".$itemID." AND ".$newtablescode." AND islive=1 AND type='page' ORDER BY sortindex, title");
	} else {
		$result = $db->query("SELECT id, tag, title FROM content WHERE parentid=".$itemID." ".$additionalChecks." ORDER BY sortindex, title");
	}
	$thisnav = "";
	if (mysql_num_rows($result)) {
		while ($subrow = $db->fetchrow($result)) {
			$subsel = (strpos($_SERVER["PHP_SELF"], "/".$contentscriptname."/".$subrow["tag"]) !== false )?"sel":"unsel";
			if ($subsel == "sel") {
				if ($newtablescode) {
					$subnav = tem_nav_children($subrow["itemid"], true, $db, $additionalChecks);
				} else {
					$subnav = tem_nav_children($subrow["id"], false, $db, $additionalChecks);
				}
			} else {
				$subnav = "";
			}
			$thisnav .= template("page-navitem", array("location"=>"/".$contentscriptname."/".$subrow["tag"]."/", "id"=>"cms".$subrow["id"].$subsel, "selstate"=>$subsel, "title"=>$subrow["title"], "text"=>$subrow["title"], "subnav"=>$subnav));
		}
		$thisnav = template("page-navitem-subnav", array("items"=>$thisnav));
	}
	return $thisnav;
}

function tem_year() {
	return date("Y");
}
?>
