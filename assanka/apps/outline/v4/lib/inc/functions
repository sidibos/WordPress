<?php



// This file is deprecated, and should no longer be in use.  This error designed to catch cases where it is still being used.
trigger_error('Deprecated code in use', E_USER_DEPRECATED);



/*
########################################################
Common support functions for the Outline v4 application.

Provides outline-specific authentication functions.

14th January 2008
Rowan Beentje
Assanka Ltd
########################################################
*/

// This function checks whether a user (defaulting to the logged-in
// user) is permitted to perform a function at all to a particular folder.
// Tasks: viewpage, createpage, editpage, publishpage, deletepage, sortpage,
// disablepage, viewpagehistory, viewasset, createasset, editasset,
// publishasset, deleteasset, disableasset, viewassethistory
function outlineCheckIfAuth($task, $tag = "", $username = "", $autoerror = false, $siteid = false) {
	global $db, $cmspermissions, $cmssites, $auth;
	$authlevel = false;
	$permissionsArray = array();
	
	// Set up global caches if they don't already exist
	if (!isset($cmsusers)) $cmsusers = array();
	if (!isset($cmssites)) $cmssites = array();

	// If no username is provided, check for the htaccess username
	// to determine if the current user is logged in
	if (!$username) {
		$username = ((isset($auth))?$auth->user["username"]:false);
		if (!$username) {
			if ($autoerror or (strpos($_SERVER["PATH_TRANSLATED"], $_SERVER["CORE_PATH"]."/apps/outline/") !== false)) {
				$auth->checkRights("outline.user");
				exit;
			} else {
				return false;
			}
		}
	}
	
	$auth->checkRights("outline.user");
	if ($tag and (substr($tag, -1) != "/")) $tag .= "/";

	// Populate cache if it's not already set
	if (!count($cmssites)) {
		$siteresult = $db->query("SELECT id, name FROM out_sites ORDER BY id ASC");
		while ($site = $db->getRow($siteresult)) {
			$cmssites[$site["id"]] = $site;
		}
	}

	// First check for multiple sites in the database
	$multiSite = false;
	
	if (!session_id()) session_start();
	if (!$siteid) $siteid = $_SESSION["outline"]["currentsiteid"];	
	if (count($cmssites) > 1) {
		$multiSite = true;
	}
	if (($task == "createasset") || ($task == "viewasset") || ($task == "editasset") || ($task == "publishasset") || ($task == "deleteasset") || ($task == "disableasset") || ($task == "viewassethistory")) $multiSite = false;
	if ($multiSite && !$siteid) trigger_error("This Outline installation appears to have multiple sites, yet a permissions check is being made without supplying a site id.", E_USER_ERROR);

	// Populate the permissions cache for this user if it's not already set
	if (empty($cmspermissions[$username])) {

		$usercheck = $db->query("SELECT p.tag, p.role, p.siteid FROM out_permissions p LEFT JOIN out_sites s ON p.siteid=s.id WHERE htaccessuser=%s ORDER BY p.role=%s DESC, p.role=%s DESC, p.role=%s DESC, siteid ASC", $db->sqlenc($username), 'no access', 'author', 'publisher');

		while ($row = $db->getRow($usercheck)) {
			$cmspermissions[$username][$row["siteid"]][] = $row;
		}
		
		// If zero rows are found, permission is assumed to be publisher - for
		// simplicity and user confusion reasons!
		if (empty($cmspermissions[$username])) $cmspermissions[$username] = array(-1 => array(0 => array("tag"=>"", "role"=>"publisher", "siteid"=>-1)));
	}
	
	// Create a set of permissions for this request
	$userpermissions = $cmspermissions[$username];
	if ($multiSite) {
		foreach ($userpermissions as $key=>$value) {
			if ($key != -1 and $key != $siteid) unset($userpermissions[$key]);
		}
		if ($siteid and empty($userpermissions[$siteid]) and empty($userpermissions[-1])) $userpermissions[$siteid] = array(0 => array("tag"=>"", "role"=>"no access", "siteid"=>$siteid));
	}

	// If rows are found, build an array with the length of the tag where the
	// tag matches, reverse key sort the array, and take the first item.
	// This will be the applicable level of permissions for the page.
	if (count($userpermissions)) {
		foreach ($userpermissions as $permissionssite) {
			foreach ($permissionssite as $permission) {
				if ($permission["tag"] == "") {
					if (!empty($permissionsArray[0])) $permissionsArray[0] = $permission["role"];
					else array_unshift(&$permissionsArray, $permission["role"]);
				} else if (strpos($tag, $permission["tag"]) === 0) {
					$permissionsArray[strlen($permission["tag"])] = $permission["role"];
				}
			}
		}
		krsort($permissionsArray);
		$authlevel = each($permissionsArray);
		$authlevel = $authlevel["value"]; // Each returns data in a specific format.
	
	// If zero rows were found, permission is assumed to be publisher - for
	// simplicity/user confusion reasons!
	} else {
		$authlevel = "publisher";
	}

	// Check for assets being enabled if necessary
	if ((strpos($task, "asset") !== false) && !outlineIsFunctionalityEnabled("assets")) {
		if ($autoerror) trigger_error("This project does not have asset access; please contact your system administrator.", E_USER_ERROR);
		else return false;
	}

	//Switch according to supplied task, returning false or value
	switch ($task) {
	case "viewasset":
		if (!outlineIsFunctionalityEnabled("assets")) return false;
	case "viewpage":
		return true;
	break;
	case "createpage":
	case "editpage":
	case "viewpagehistory":
	case "createasset":
	case "editasset":
	case "viewassethistory":
		if (($authlevel == "author") || ($authlevel == "publisher")) {
			return $authlevel;
		} else {
			if ($autoerror) {
				$msg = "<h2>Access restricted</h2>";
				$msg .= "<p style=\"padding: 10px\">You do not have permission to perform this task.  Please contact your system administrator for more information and to add the necessary permission to your user account.</p>";
				echo $msg;
				exit;
			} else {
				return false;
			}
		}
	break;
	case "publishasset":
	case "publishpage":
	case "deletepage":
	case "sortpage":
	case "disablepage":
	case "deleteasset":
	case "disableasset":
		if ($authlevel == "publisher") {
			return $authlevel;
		} else {
			if ($autoerror) {
				$msg = "<h2>Access restricted</h2>";
				$msg .= "<p style=\"padding: 10px\">You do not have permission to perform this task.  Please contact your system administrator for more information and to add the necessary permission to your user account.</p>";
				echo $msg;
				exit;
			} else {
				return false;
			}
		}
	break;
	}
}

// Function to return whether a particular level of functionality is enabled
function outlineIsFunctionalityEnabled($functionality) {
	global $page;
	
	if (empty($_SESSION["outline"])) return false;
	
	switch ($functionality) {
		case "taskdashboard":
			if (!empty($_SESSION["outline"]["features"]["taskdashboard"])) return true;
		break;
		case "versionhistory":
			if (!empty($_SESSION["outline"]["features"]["versions"])) return true;
		break;
		case "drafts":
			if (!empty($_SESSION["outline"]["features"]["drafts"])) return true;
		break;
		case "versiondiff":
			if (!empty($_SESSION["outline"]["features"]["versions"])) return true;
		break;
		case "assets":
			if (!empty($_SESSION["outline"]["features"]["assets"])) return true;
		break;
		case "multipleusers":
			if (!empty($_SESSION["outline"]["features"]["multipleusers"])) return true;
		break;
		case "multiplesites":
			if (!empty($_SESSION["outline"]["features"]["multiplesites"])) return true;
		break;
	}
	return false;
}

// A function to recursively delete a directory, by stepping through
// the contents of the directory, deleting files, and stepping into
// folders.  Necessary because certain changes to the CMS require
// deleting the entire site cache (eg - changes to the navigation structure),
// and because the standard php functions don't remove folders with items
// in them.
// Note: this function intentionally chokes if soft/hard links are found.
function outlineRecursiveDelete($dirName, $repetition = 0) {
	global $auth;
	
	$auth->checkRights("outline.user");
	if ($repetition > 10) return false;
	if (empty($dirName)) return true;
	if (file_exists($dirName)) {
		$files = outlineGetFolderContentsAsArray($dirName);
		if ($files) {
			foreach ($files as $file) {
				if (is_dir($dirName.'/'.$file)) {
					if (!outlineRecursiveDelete($dirName.'/'.$file, $repetition)) return false;
				} else if (is_file($dirName.'/'.$file)) {
					@unlink($dirName.'/'.$file);
				}
			}
		}
		if (outlineGetFolderContentsAsArray($dirName)) return outlineRecursiveDelete($dirName, ++$repetition);
		else @rmdir($dirName);
	} else {
		return false;
	}
	return true;
}

// Function to delete an on-disk cache and to update the out_sites datemodified
// to trigger a global update across multiple servers
function outlineDeleteCache($siteid = false) {
	global $db;
	
	if (is_numeric($siteid)) {
		outlineRecursiveDelete($_SERVER["DOCUMENT_ROOT"]."/lib/tmp/cmscache/".$siteid."/");
		$db->query("UPDATE out_sites SET datechanged=NOW() WHERE id=%s",$siteid);
	} else {
		outlineRecursiveDelete($_SERVER["DOCUMENT_ROOT"]."/lib/tmp/cmscache/");
		$db->query("UPDATE out_sites SET datechanged=NOW()");
	}
}

// Function to delete the cache for a specific tag
function outlineDeleteCacheForPage($tag, $languageisocode, $siteid) {
	if (!is_numeric($siteid)) return false;
	$languageisocode = str_replace("..", "", $languageisocode);
	$tag = str_replace("..", "", $tag);

	outlineRecursiveDelete($_SERVER["DOCUMENT_ROOT"]."/lib/tmp/cmscache/".$siteid."/".$languageisocode."/".$tag."/");
}

// Get folder contents/listing as an array of filenames
function outlineGetFolderContentsAsArray($dirName) {
	if (empty($dirName)) return false;
	clearstatcache();
	if (!file_exists($dirName) || !is_dir($dirName)) return false;
	$files = array();
	$dir = dir($dirName);
	while (false !== ($file = $dir->read())) {
		if ($file != '.' && $file != '..') $files[] = $file;
	}
	$dir->close();
	if (!count($files)) $files = false;
	return $files;
}

// A function to store the last used tag in a session variable.  A very
// simple function for now, but may become more complex later.  The stored
// value is used when constructing the index page to automatically expand
// folders to display the last page worked on.
function outlineSaveLastSelectedPage($tag) {
	if (!session_id()) session_start();
	$_SESSION["outline"]["lastpage"] = $tag;
}

// This function outputs the outline admin box on public pages, including
// all necessary style information.
function outlineInsertAdminControls($pageTag, $localContentID, $pageHTML) {
	global $db;
	
	// Generate a tag for the parent page
	if ((strpos($pageTag, "/") === false) || $pageTag == "homepage") $parenttag = "";
	else $parenttag = substr($pageTag, 0, strpos($pageTag, "/"));
	
	$siteID = $db->querySingle("SELECT siteid FROM out_localcontent l LEFT JOIN out_items i ON l.itemid=i.id WHERE l.id=%s", $db->sqlenc($localContentID));
	if ($siteID) $usercheck = outlineCheckIfAuth("editpage", $pageTag, $_SESSION["outline"]["adminuser"], false, $siteID);
	else $usercheck = false;
	if ($usercheck) {
		$adminToolbar = "
			<style type=\"text/css\">
				.outlineadmin li { height: 15px; overflow: hidden; margin: 0; padding: 0; background: none; line-height: 15px; }
				.outlineadmin a { height: 15px; font-family: verdana, tahoma, sans-serif;
margin: 0; padding: 0; font-size: 11px; text-decoration: none; color: blue; font-weight: normal; line-height: 16px; background: none; }
				.outlineadmin a:visited { text-decoration: none; color: blue; font-weight: normal; }
				.outlineadmin a:hover { text-decoration: underline;}
				#fixed { position: fixed; bottom: 25px; right: 25px; background: rgb(240, 240, 240) url(/admin/outline/lib/img/outlineadmin.jpg) 0% 0% no-repeat; z-index: 400; width: 160px; height: 165px; }
				* html #fixed { position: absolute; }
			</style>
			<div id=\"fixed\">
			<ul class=\"outlineadmin\" style=\"margin: 0; padding: 35px 0px 0px 20px;list-style-type: none; text-align: left;\">
			<li><a href=\"/admin/outline/\">Switch to Admin Site</a></li>
			<li><a href=\"/admin/outline/pages/edit?id=$localContentID\">Edit this page</a></li>
			".(($usercheck == "publisher")?"<li><a href=\"/admin/outline/pages/disable?id=$localContentID\">Disable this page</a></li>":"")."
			".((outlineIsFunctionalityEnabled("versionhistory"))?"<li><a href=\"/admin/outline/pages/viewhistory/$localContentID\">View page history</a></li>":"")."
			".(($usercheck == "publisher")?"<li><a href=\"javascript:void(0)\" onclick=\"if (confirm('Are you sure you want to delete this page?  This action cannot be undone.')) window.location.href = '/admin/outline/pages/delete?id=$localContentID'\">Delete this page</a></li>":"")."
			<li><a href=\"/admin/outline/pages/new?tag=$pageTag\">Create a new child</a></li>
			".(($parenttag)?"<li><a href=\"/admin/outline/pages/new?tag=$parenttag\">Create a new sibling</a></li>":"")."</ul></div>
			<script type=\"text/javascript\">
			if (document.all && !window.opera && document.body && (typeof document.body.style.maxHeight == 'undefined')) {
				if(document.documentElement && document.documentElement.clientHeight) refer = document.documentElement;
				else refer = document.body;
				window.onscroll = function() { document.getElementById(\"fixed\").style.top = refer.scrollTop + refer.clientHeight - 190; document.getElementById(\"fixed\").style.right = 25; };						
			}
			</script>

			";
		$pageHTML = substr($pageHTML, 0, strpos($pageHTML, "</body>")) . $adminToolbar . substr($pageHTML, strpos($pageHTML, "</body>"));
	}
	return $pageHTML;
}

// This function provides a method to extend the core functionality of the cms
// to allow project-specific fields, functions and other code to be used and
// inserted.  This function works in conjunction with an $cmsExtend array in
// global, containing lists of functions and queries.  Note that the array of
// variables is a reference, and the array contents should also be references.
// This function will return a boolean status, unused (except in the file '/sort') 
// but on principle.
function outlineExtend($actionToExtend, &$varArray) {
	global $outlineExtend;

	// First check the variables array is present and an array
	if (!is_array($varArray)) return false;
	
	// Return false if the action requested does not exist
	if (empty($outlineExtend) or !isset($outlineExtend[$actionToExtend])) return false;

	return call_user_func_array($outlineExtend[$actionToExtend], $varArray);
}

// This function fetches pages and files for display in a tree structure
function outlineGetTreeChildrenHTML($sqlTerm, $treeDepth, $languageisocode, $dateFormat, $timeFormat, $siteid, $includedrafts, $isbrowser = false, $omithomepage = false) {
	global $page, $db, $auth;
	$out = "";

	// Fetch all the direct children, and drafts, in one resultset
	$result = $db->query("SELECT i.id as itemid, l.id as contentid, v.id AS versionid, title, DATE_FORMAT(datecreated, {dateformat|nokey}) as datecreated, authoruser, draftuser, tag, visibility, islive, i.sortindex, i.parentid FROM out_items i LEFT JOIN out_localcontent l ON i.id = l.itemid LEFT JOIN out_versions v ON l.id = v.localcontentid WHERE ".$sqlTerm." ".($omithomepage?"AND tag!={homepage|nokey}":"")." AND type={type|nokey} AND (islive=1".(($includedrafts)?" OR draftuser IS NOT NULL":"").") AND siteid={siteid|nokey} AND languageisocode={languageisocode|nokey} ORDER BY draftuser IS NULL DESC, sortindex, IF(draftuser IS NULL, title, draftuser!={adminuser|nokey}) ASC, datecreated ASC", array("dateformat"=>$dateFormat." ".$timeFormat, "type"=>"page", "siteid"=>$siteid, "languageisocode"=>$languageisocode, "adminuser"=>$_SESSION["outline"]["adminuser"], "homepage"=>"homepage"));

	// Set up a variable to store all rows, for grouping of live and drafts, before outputting at end
	$rowsarray = array();
	
	while ($row = $db->getRow($result)) {
		$islive = (($row["islive"] and !$row["draftuser"])?true:false);
		if ($isbrowser) {
			if (!empty($_GET["type"]) and $_GET["type"] == "permissions") {
				$drafts = false;
				$iseditable = true;
			} else if (!empty($_GET["type"]) and $_GET["type"] != "link") {
				if ($_GET["extra"] and (strpos("/".$row["tag"]."/", $_GET["extra"]."/") !== false)) $iseditable = false;
				else if (($row["draftuser"] == "") || ($row["draftuser"] == $_SESSION["outline"]["adminuser"])) $iseditable = (outlineCheckIfAuth("editpage", $row["tag"], false, false, $siteid))?true:false;
				else $iseditable = false;
			} else {
				if ($row["draftuser"] or ($row["visibility"] == "inaccessible")) $iseditable = false;
				else $iseditable = true;
			}
		} else {
			$iseditable = (($row["draftuser"] == "")?((outlineCheckIfAuth("editpage", $row["tag"], false, false, $siteid))?true:false):false);
		}
		
		// If this row doesn't already exist in the row array, create an entry for it
		if (empty($rowsarray[$row["contentid"]])) {
		
			// Before insertion, check whether this row has any children
			$result2 = $db->query("SELECT out_items.id FROM out_items WHERE parentid=%s LIMIT 0,1", $row["itemid"] );
			$isfolder = (($db->getNumResults($result2))?true:false);
			
			// The presence of rows indicates children; if so, display an expandable folder.
			// Also check the saved page tag to see whether the folder should be loaded expanded.
			if ($isfolder) {
				$isdeleteable = false;
				$issortable = ((outlineCheckIfAuth("sortpage", $row["tag"], false, false, $siteid))?true:false);
				$folderhtml = false;
				if (!empty($_SESSION["outline"]["lastpage"]) or ($isbrowser and !empty($_GET["tag"]))) {
					$savedTag = (($isbrowser)?$_GET["tag"]:$_SESSION["outline"]["lastpage"]);
					$savedTag = substr($savedTag, 0, strlen($savedTag) - 1);
					if (strpos($savedTag, $row["tag"]) !== false) {
	
						// The folder should be loaded expanded - fetch the html.
						$folderhtml = outlineGetTreeChildrenHTML("parentid=".$row["itemid"], $treeDepth+1, $languageisocode, $dateFormat, $timeFormat, $siteid, $includedrafts, $isbrowser);
					}
				}
			} else {
				$folderhtml = false;
				$isdeleteable = (($row["draftuser"] == "")?((outlineCheckIfAuth("deletepage", $row["tag"], false, false, $siteid))?true:false):false);
				$issortable = false;
			}
		
			// Create the row entry
			$rowauthor = $row["authoruser"]?$auth->getDetailsForUser($row["authoruser"]):false;
			$rowsarray[$row["contentid"]] = array("contentid"=>$row["contentid"], "title"=>$row["title"], "tag"=>$row["tag"], "author"=>(($rowauthor)?$rowauthor["displayname"]:$row["authoruser"]), "datecreated"=>$row["datecreated"], "iseditable"=>$iseditable, "isfolder"=>$isfolder, "folderhtml"=>$folderhtml, "issortable"=>$issortable, "isdeleteable"=>$isdeleteable, "islive"=>$islive, "visibility"=>$row["visibility"], "isbrowser"=>$isbrowser, "drafthtml"=>"", "firstversionid"=>$row["versionid"],"sortindex"=>$row["sortindex"],"parentid"=>$row["parentid"]);
		}	
		
		// Append a draft record to the row output if this row is a draft
		if ($row["draftuser"]) {
			$rowauthor = (($row["authoruser"])?$auth->getDetailsForUser($row["authoruser"]):false);
			$rowsarray[$row["contentid"]]["drafthtml"] .= outlineGetDraftHTML($rowsarray[$row["contentid"]]["firstversionid"], $row["versionid"], $row["draftuser"], $row["authoruser"], (($rowauthor)?$rowauthor["displayname"]:$row["authoruser"]), false);
		}
	}

	// Alter the rows array if appropriate
	$extendarray = array(&$_SESSION, &$_GET, &$rowsarray);
	outlineExtend("getChildrenRowsComplete",$extendarray);
	
	// Loop through the rows array and output each row
	foreach ($rowsarray as $row) {
		$rowhtml = outlineGetTreeViewRowHTML($row["contentid"], $row["title"], $row["tag"], $row["author"], $row["datecreated"], $row["iseditable"], $row["isfolder"], $row["folderhtml"], $row["issortable"], $row["isdeleteable"], $row["islive"], $row["visibility"], $row["drafthtml"], $row["isbrowser"]);

		$out .= $rowhtml;
	}
	return $out;
}

// Output HTML for a row in an outline tree view
function outlineGetTreeViewRowHTML($id, $title, $tag, $author, $datecreated, $iseditable, $isfolder, $folderhtml, $issortable, $isdeleteable, $islive, $visibility, $drafthtml, $isbrowser, $isasset = false) {
	$type = (($isasset)?"asset":"page");

	$title = str_replace("\"", "&quot;", $title);
	
	$out = "";

	// Outline extension - extra CSS classes for this row
	$extendarray = array(&$id);
	$extrarowcssclasses = outlineExtend("treeViewRowGetExtraCssClasses", $extendarray);

	$out .= "<div style=\"clear: both;\" onclick=\"oltree.selectrow(event, '".$id."', '".addslashes($title)."', '".$tag."', ".(($iseditable)?"true":"false").", ".(($issortable)?"true":"false").", ".(($isdeleteable)?"true":"false").", '".addslashes($author)."', '".addslashes($datecreated)."', ".(($islive)?"true":"false").")\">";
	$out .= "<div class=\"tdb tdnormal ".($extrarowcssclasses?$extrarowcssclasses:"")."\" id=\"row".$id."\">";
	if (!$isasset and $tag != "homepage") {
		$out .= "<div class=\"treepad\">";
		if ($isfolder) $out .= "<div class=\"disc disc".(($folderhtml)?"on":"off")."\" id=\"disc".$id."\" onmousedown=\"document.getElementById('disc".$id."').className = 'disc discdown';\" onmouseup=\"oltree.toggledisc(".$id.")\">&nbsp;</div>";
		else $out .= "&nbsp;";
		$out .= "</div>";
	}
	if ($isasset) $imagename = "asset".(($islive)?"":"drafthidden");
	else $imagename = (($islive)?(($isfolder)?"folder":"page"):(($isfolder)?"draftfolder":"drafthidden"));
	if ($islive) $imagename .= (($visibility == "inaccessible")?"hidden":(($visibility == "hidden")?"nonav":""));
	$out .= "<div class=\"treepad\"><img src=\"lib/img/icons/icon16_".$imagename.".gif\" width=\"16\" height=\"14\" /></div>";
	$out .=	"<span class=\"ctext".((!$islive or ($visibility == "0" or $visibility == "inaccessible"))?" hidden":"")."\">".$title."</span>";
	if ($drafthtml) $out .= "<div class=\"draftdiv\">".$drafthtml."</div>";
	else $out .= $drafthtml;
	$out .= "</div>";
	if ($isbrowser and !empty($_GET["tag"]) and $tag == $_GET["tag"]) $out .= "<script type=\"text/javascript\">oltree.selectrow(false, ".$id.", '".$title."', '".$tag."', ".($iseditable?"true":"false").");</script>";
	$out .= "</div>";
	if ($isfolder) {
		$out .= "<div id=\"div".$id."\" style=\"display: ".(($folderhtml)?"block":"none").";  width: 100%; float: left;\"><div id=\"innerdiv".$id."\" style=\"padding-left: 20px;\">";
		if ($folderhtml) $out .= $folderhtml;
		$out .= "</div></div>";
	}
	return $out;	
}

// Return HTML for a single draft for use in a tree view
function outlineGetDraftHTML($rowversionid, $versionid, $draftuser, $authoruser, $author, $isasset) {
	$type = (($isasset)?"asset":"page");
	$ownedbyme = ($draftuser == $_SESSION["outline"]["adminuser"])?true:false;
	$writtenbyme = ($authoruser == $_SESSION["outline"]["adminuser"])?true:false;
	$behaviors = "onmouseover=\"oltree.outlineShowDraftDiv('".$versionid."');\"  onmouseout=\"oltree.outlineHideDraftDiv('".$versionid."');\"";

	$out = "";
	$out .= "<div class=\"draftholder\" id=\"draftholder".$versionid."\">";
	if ($ownedbyme) $out .= "<a href=\"".$type."s/edit?id=".$versionid."&amp;type=draft\" ".$behaviors." class=\"draftlink\">";
	$out .= "<img src=\"lib/img/icons/icon16_draft".(($ownedbyme)?(($writtenbyme)?"blue":"red"):"hidden")."small.gif\" ".((!$ownedbyme)?$behaviors:"")." width=\"14\" height=\"14\" />";
	if ($ownedbyme) $out .= "</a>";
	$out .= "<div class=\"draftpopup\" id=\"draftdiv".$versionid."\" ".((!$ownedbyme)?"style=\"color: gray\"":"")."><div>";

	if ($ownedbyme) $out .= ($writtenbyme?"My draft":$author." sent me a draft")." of this".(($rowversionid == $versionid)?" new":"")." ".$type." (available to edit)";
	else if ($writtenbyme) $out .= "My draft of this".(($rowversionid == $versionid)?" new":"")." ".$type." has been sent for review.";
	else $out .= $author." has".(($rowversionid == $versionid)?" created this new ".$type." as a draft":" a draft of this page");

	$out .=	"</div></div></div>";

	return $out;
}

// Ensure folder permissions are all set correctly
function outlineCheckPermissions() {
	global $page;
	$folderchecks = array($_SERVER["DOCUMENT_ROOT"]."/lib/tmp/cmsfiles", $_SERVER["DOCUMENT_ROOT"]."/lib/tmp/cmsfiles/File", $_SERVER["DOCUMENT_ROOT"]."/lib/tmp/cmsfiles/Image", $_SERVER["DOCUMENT_ROOT"]."/lib/tmp/cmsfiles/Flash", $_SERVER["DOCUMENT_ROOT"]."/lib/tmp/cmsfiles/Media");
	$old_umask = umask(0);
	foreach ($folderchecks as $path) {
		if (!file_exists($path)) @mkdir($path, 0777);
		if (!is_writable($path)) @chmod($path, 0777);
	}
	$notwritable = array();
	foreach ($folderchecks as $path) if (!is_writable($path)) $notwritable[] = $path;
	if ($notwritable) {
		$page->goBackAndAlert('Unable to edit, cannot write to cache locations: '.join(', ', $notwritable).".  Please alert an administrator");
	}
	umask($old_umask);
}

?>
