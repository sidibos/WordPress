<?php
/**
 * CMS edit page - collects the data required to complete an edit of
 * the page - title, tag and content. Content is collected via the
 * fckeditor rich text component.
 *
 * @copyright The Financial Times Limited [All Rights Reserved]
 */

require_once("../lib/inc/global");



// This file is deprecated, and should no longer be in use.  This error designed to catch cases where it is still being used.
trigger_error('Deprecated code in use', E_USER_DEPRECATED);



$auth->checkRights("outline.user");

if (empty($_REQUEST["id"]) or !is_numeric($_REQUEST["id"]) or (!empty($_REQUEST["localcontentid"]) and !is_numeric($_REQUEST["localcontentid"]))) {
	$page->redirectAndAlert("You tried to edit a page, but no id was supplied, or the id was not numeric.  The ID should always be filled in automatically if you followed a link from another page; if you believe you are seeing this in error, please contact support.", "error", "pages/");
}

// Load up the record to be edited by using the previous versions.
// If the page is a draft, load the draft version directly; otherwise,
// load the "live" version for the page id.
if (!empty($_REQUEST["type"]) and $_REQUEST["type"] == "draft") {
	$db->disableInjectionChecking();
	$rec = $db->queryRow("SELECT visibility, type, webroot, siteid, itemid, parentid, localcontentid AS id, v.id AS versionid, languageisocode, tag, title, authoruser, html, v.datecreated, s.name AS sitename, hostname, versionnumber".((empty($outlineExtend["editRowFields"]))?"":$outlineExtend["editRowFields"])." FROM out_localcontent l LEFT JOIN out_versions v ON l.id=v.localcontentid LEFT JOIN out_items i ON l.itemid = i.id LEFT JOIN out_sites s ON i.siteid=s.id WHERE v.id=".$_REQUEST["id"]." AND (draftuser='".$auth->user["username"]."' OR (authoruser='".$auth->user["username"]."' AND ISNULL(draftuser))".((empty($outlineExtend["editRowTerms"]))?"":$outlineExtend["editRowTerms"]).")");
	$db->enableInjectionChecking();
} else {
	$db->disableInjectionChecking();
	$rec = $db->queryRow("SELECT visibility, type, webroot, siteid, itemid, parentid, localcontentid AS id, v.id AS versionid, languageisocode, tag, title, authoruser, html, v.datecreated, s.name AS sitename, hostname".((empty($outlineExtend["editRowFields"]))?"":$outlineExtend["editRowFields"])." FROM out_localcontent l LEFT JOIN out_versions v ON l.id=v.localcontentid LEFT JOIN out_items i ON l.itemid = i.id LEFT JOIN out_sites s ON i.siteid=s.id WHERE l.id=".$_REQUEST["id"]." AND islive=1".((empty($outlineExtend["editRowTerms"]))?"":$outlineExtend["editRowTerms"])."");
	$db->enableInjectionChecking();

}
if (empty($rec)) {
	if (!empty($_REQUEST["type"]) and $_REQUEST["type"] == "draft") $idcheck = $db->querySingle("SELECT localcontentid FROM out_versions WHERE id=%s",$_REQUEST["id"]);
	else $idcheck = $db->querySingle("SELECT itemid FROM out_localcontent WHERE id=%s",$_REQUEST["id"]);
	if ($idcheck) $page->redirectAndAlert("You do not have permission to edit the page requested.  This may be because you already sent the draft to another user, requested a draft currently belonging to another user, or because you do not have permission to work in this area of the site.  If you feel this is an error, please contact support.", "error", "pages/");
	else $page->redirectAndAlert("The page you requested to edit has been deleted or could not be found.", "error", "pages/");
}

if (!empty($rec["hostname"]) and strpos($rec["hostname"], "://") === false) $rec["hostname"] = "http://".$rec["hostname"];

// Select the name of the current site
$siteName = $_SESSION["outline"]["sites"][$_SESSION["outline"]["currentsite"]]["name"];

// Check whether this is the only draft of this page, used later in link display
$result = $db->query("SELECT id FROM out_versions WHERE localcontentid=%s AND id != %s", $rec["id"], $rec["id"]);
if ($db->getNumResults($result) or (!empty($_REQUEST["type"]) and $_REQUEST["type"] != "draft")) $displayLink = true;
else $displayLink = false;

// Ensure this user has the right to be editing the page, and store if they are a publisher
outlineCheckIfAuth("edit".$rec["type"], $rec["tag"], $auth->user["username"], true, $rec["siteid"]);
$userIsPublisher = outlineCheckIfAuth("publish".$rec["type"], $rec["tag"], $auth->user["username"], false, $rec["siteid"]);

// Save the location of this page for redisplay of index
outlineSaveLastSelectedPage($rec["tag"]);

// Import the FCKEditor files
$page->add("jsincludes", "/corestatic/fckeditor/v2.5.1/fckeditor.js");

// Pad any assets with a wrapper div to allow inline assets
if ($rec["type"] == "asset") {
	if (!strlen($rec["html"])) $rec["html"] = "&nbsp; &nbsp;";
	$rec["html"] = "<div class=\"temporaryasseteditwrapper\">".$rec["html"]."</div>";
}

// Replace any inline linked assets with the asset placeholder
if (strpos($rec["html"], "linkedasset-id") !== false) {
	while(preg_match("/<\!\-\-([\/]?)linkedasset\-id([\d]+)\-\->/i", $rec["html"], $matches)) {
		$assetid = $matches[2];
					
		$assettitle = $db->querySingle("SELECT title FROM out_localcontent l LEFT JOIN out_versions v ON l.id=v.localcontentid AND v.islive=1 WHERE l.id=%s", $db->sqlenc($assetid));
		if ($assettitle) {
			$assetmarker = '<img src="lib/img/assetmarker.png" class="linkedasset'.$assetid.'" style="';
			$assetmarker .= 'border: 0; margin: 0; padding: 0; float: none; display: inline; width: 78px; height: 12px; vertical-align: middle; ';
			$assetmarker .= '" title="'.$assettitle.'" alt="'.$assettitle.'" />';
		} else {
			$assetmarker = "";
		}
		
		$rec["html"] = outlineUpdateAssets($assetid, $rec["html"], $assetmarker);
		$rec["html"] = preg_replace("/<\!\-\-([\/]?)linkedasset\-id".$assetid."\-\->/i", "", $rec["html"]);
	}
}

// Convert some data for use with the draft tag/vis/section changes
$rec["draftjsconfirmvars"] = "";
$tagbits = explode("/", $rec["tag"]);
$rec["draftjsconfirmvars"] .= "'".array_pop($tagbits)."', ";
if (count($tagbits)) $rec["draftjsconfirmvars"] .= "'".implode("/", $tagbits)."', ";
else $rec["draftjsconfirmvars"] .= "'', ";
$rec["draftjsconfirmvars"] .= "'".$rec["siteid"]."', '".$rec["visibility"]."'";

// Create a new form to be used with loaded or submitted data
$form = new inputform("editpage", "POST", $rec["type"]."s/edit");

$group1 = new simplefieldgroup(&$form);

// Add standard fields to the form
$group1->addText("title", "Title", "t", true, false, 150);
if ($rec["tag"] == "homepage" or $rec["type"] != "page") {
	$group1->addHidden("tag", $rec["tag"]);
} else {
	$group1->addHidden("parenttag");
	if ($userIsPublisher) $group1->addText("parenttagvis", "Section", false, false, false, 250);
	if ($userIsPublisher and count($_SESSION["outline"]["sites"]) > 1) $group1->addText("sitename", "Site", false, false, false, 200);
	
	// TODO:RB:20070724: This should really be done by a) making field groups editable once they're created, and b) passing the field group by reference to a CMS-altering function.  But FELE requires now, so...
	if (empty($outlineExtend["tagMaxLength"])) $outlineExtend["tagMaxLength"] = 30;
	if (empty($outlineExtend["tagValidationRegex"])) $outlineExtend["tagValidationRegex"] = "/^[a-z0-9\-]+$/";
	if ($userIsPublisher) $group1->addText("tag", "Tag", "a", true, $outlineExtend["tagValidationRegex"], $outlineExtend["tagMaxLength"]);
}
$group1->addHidden("siteid", $rec["siteid"]);
$group1->addHidden("id", $_REQUEST["id"]);
$group1->addHidden("localcontentid", $rec["id"]);
$group1->addHidden("type", ((empty($_REQUEST["type"]))?"":$_REQUEST["type"]));
$group1->addHidden("reviewuser");
$group1->addHidden("comment");
$group1->addHidden("email");
$group1->addHidden("submitaction");

if ($rec["type"] == "page" and $userIsPublisher) $group1->addSelect("visibility", "Visibility", "v", true, array("visible"=>"Visible", "hidden"=>"Accessible, but not shown in the navigation", "inaccessible"=>"Fully hidden"), false);

// Outline extension: allow additional fields or data to be added
// to the fieldgroup before the editor is output
$extendarray = array(&$rec, &$_POST, &$group1);
outlineExtend("editScreenAppendFields", $extendarray);

// Set up content to drop into the fck editor instantiation
outlineCheckPermissions();
$rec["html"] = (!empty($_POST["Editor"])?$_POST["Editor"]:$rec["html"]);

// Encode opening and closing tags to prevent HTML comment/script tag issues
$rec["html"] = Common::jsentities($rec["html"]);

if ($rec["type"] == "asset") {
	$page->set("publiclink", $_SESSION["outline"]["sites"][$_SESSION["outline"]["currentsite"]]["hostname"]);
} else {
	$page->set("publiclink", $rec["hostname"]."/".$rec["webroot"]."/".(($rec["visibility"] != "inaccessible" and $displayLink)?$rec["tag"]:""));
}
$page->set("contentvalue", $rec["html"]);
$page->set("assetsenabled", ((outlineIsFunctionalityEnabled("assets"))?"true":"false"));
$page->set("pagebasehref", $page->getRoot()."/".$page->getAppNamespace()."/");

// Select the assets to add to the array
$page->add("assetarray", "oFCKeditor.Config.AssetArray = new Array();");
$allAssets = $db->query("SELECT title, l.id FROM out_items i LEFT JOIN out_localcontent l ON i.id=l.itemid LEFT JOIN out_versions v ON l.id=v.localcontentid WHERE type=%s AND languageisocode=%s AND islive=1", 'asset', $rec["languageisocode"]);
while ($theAssetRow = $db->getRow($allAssets)) {
	$page->add("assetarray", "oFCKeditor.Config.AssetArray[oFCKeditor.Config.AssetArray.length] = \"".$theAssetRow["title"]."\";");
	$page->add("assetarray", "oFCKeditor.Config.AssetArray[oFCKeditor.Config.AssetArray.length] = \"".$theAssetRow["id"]."\";");
}

// Determine which stylesheet to use
if (file_exists($_SERVER["DOCUMENT_ROOT"]."/lib/css/cms.css")) $page->set("cmscss", "/lib/css/cms.css");
elseif (file_exists($_SERVER["DOCUMENT_ROOT"]."/lib/css/cms")) $page->set("cmscss", "/lib/css/cms");
elseif (file_exists($_SERVER["DOCUMENT_ROOT"]."/lib/css/screen.css")) $page->set("cmscss", "/lib/css/screen.css");
elseif (file_exists($_SERVER["DOCUMENT_ROOT"]."/lib/css/screen")) $page->set("cmscss", "/lib/css/screen");

$group1->addContent($page->render("../lib/tem/editor"));

// Define help text
if ($rec["type"] == "asset") $form->addHelptext("title", "Enter a title that describes the asset.");
else $form->addHelptext("title", "Enter a title that describes the page, preferably briefly, so that when presented to the user in a large font size it will not need to wrap.  It is best to stick to fewer than ten words, and even fewer if the title is used in the site navigation.");
$form->addHelptext("tag", "Enter a page tag which is used to create a URL for the page - the address that must be typed into the browser to load the page.  This must be unique to the page, and should reflect its content, but at the same time be as short as possible.  Avoid any punctuation, spaces, numbers or uppercase characters which will make the link harder to type, and keep the tag lowercase.  'contact', 'findingus', 'whoweare' are all good tags.");
$form->addHelptext("parenttagvis", "Enter the part of the site this page should be created in, using the \"Browse...\" button and selecting a page or folder.  This page will then be grouped inside the selected folder for the purposes of linking to the page or displaying it in site navigation.");
$form->addHelptext("visibility", "Alter this to control the page's visibility to a normal visitor. 'Visible' makes the page available to everybody; 'Accessible' doesn't display the page in any navigation systems, but does allow the page to be linked to or visited directly, while 'Hidden' means the page isn't accessible at all.");

// Outline extension: allow additional data (eg help fields) to be added to the form
$extendarray = array(&$rec, &$_POST, &$form);
outlineExtend("editScreenAlterForm", $extendarray);

// Add action buttons
if ($userIsPublisher) $page->addAction(((($rec["visibility"] == "visible" or $rec["visibility"] == "hidden") and ($rec["type"] == "page"))?"Publish":"Save"), array("javascript"=>"document.getElementById('frmeditpage_submitaction').value='publish'; document.frmeditpage.submit()"));
if (outlineIsFunctionalityEnabled("drafts")) $page->addAction(((!empty($_REQUEST["type"]) and $_REQUEST["type"] == "draft")?"Save Draft":"Save As Draft"), array("domid"=>"draftsubmit", "javascript"=>"document.getElementById('frmeditpage_submitaction').value='savedraft'; if (outlineConfirmPageDraft(".$rec["draftjsconfirmvars"].")) document.frmeditpage.submit()"));
if (outlineIsFunctionalityEnabled("multipleusers")) outlineAddReviewPaneAndAction(&$page, $rec, $auth->user["username"]);
if (!empty($_REQUEST["type"]) and $_REQUEST["type"] == "draft") {
		
	// Prevent deletion of the draft if this draft is the only version of this page and has any children
	$db->disableInjectionChecking();
	if ($db->querySingle("SELECT COUNT(*) FROM out_versions WHERE localcontentid=".$rec["id"]) == 1
		and $db->querySingle("SELECT COUNT(id) FROM out_items WHERE parentid=".$rec["itemid"])) {
		$page->addAction("Delete Draft", array("domid"=>"draftdelete", "javascript"=>"alert('You cannot delete this draft as it has other pages contained within it.  Delete or move those pages before deleting this draft.');"));
	} else {
		$page->addAction("Delete Draft", array("domid"=>"draftdelete", "javascript"=>"if (confirm('Are you sure you want to delete this draft?')) { document.getElementById('frmeditpage_submitaction').value='deletedraft'; document.frmeditpage.submit() }"));
	}
	$db->enableInjectionChecking();

}
$page->addAction("Cancel", array("href"=>"pages/", "javascript"=>"return confirm('Exit page editor: are you sure?  All your changes will be discarded.');"));
if (outlineIsFunctionalityEnabled("versiondiff") and (!empty($_REQUEST["type"]) and $_REQUEST["type"] == "draft") and $displayLink) $page->addAction("View Changes", array("domid"=>"viewdiff", "href"=>"pages/viewdiff", "javascript"=>"return confirm('This will discard all changes you have made to the page without saving; are you sure you wish to proceed?')", "data"=>array("fileforcomp1"=>$_REQUEST["id"], "fileforcomp2special"=>"previous")));

if (!empty($_POST)) {

	// Proceed with draft deletions before form validation if required
	if (($_POST["type"] == "draft") and ($_POST["submitaction"] == "deletedraft")) {
			$db->disableInjectionChecking();
		
		if ($db->querySingle("SELECT COUNT(*) FROM out_versions WHERE localcontentid=".$rec["id"]) == 1
			and $db->querySingle("SELECT COUNT(id) FROM out_items WHERE parentid=".$rec["itemid"])) {
			$page->redirectAndAlert("That draft cannot be deleted as it contains other pages.  Please delete or move those pages first.", "error", "pages/");
		}
			$db->enableInjectionChecking();

		// Deletion of the draft depends on whether the page only exists
		// as a draft; if it does, delete the itemid etc.
		$checkID = $db->querySingle("SELECT localcontentid FROM out_versions WHERE out_versions.id=%s",$_POST["id"]);
		$result = $db->query("SELECT id FROM out_versions WHERE localcontentid=%s",$checkID);
		if ($db->getNumResults($result) == 1) {
			$itemID = $db->querySingle("SELECT itemid FROM out_localcontent WHERE id=%s",$checkID);
			$db->query("DELETE FROM out_items WHERE id=%s",$itemID);
			$db->query("DELETE FROM out_localcontent WHERE id=%s",$checkID);
			$db->query("DELETE FROM out_versions WHERE id=%s",$_POST["id"]);
		} else {
			$db->query("DELETE FROM out_versions WHERE out_versions.id=%s",$_POST["id"]);
		}
		$page->redirectAndAlert("Draft deleted.", "done", "pages/");
	}

	// The visible parent tag isn't submitted, so restore it
	if (!empty($_POST["parenttag"]) and ($_POST["parenttag"] != "/")) $_POST["parenttagvis"] = $_POST["parenttag"]."/";
	if ($siteName) $_POST["sitename"] = $siteName;

	// if a parent has been specified, check the tag
	if (!empty($_POST["parenttag"])) {
		$db->disableInjectionChecking();
		$row = $db->queryRow("SELECT tag, itemid FROM out_localcontent l LEFT JOIN out_items i ON l.itemid=i.id WHERE tag='".$db->sqlenc($_POST["parenttag"])."' AND languageisocode='".$db->sqlenc($rec["languageisocode"])."' AND siteid='".$db->sqlenc($_POST["siteid"])."'");
		$db->enableInjectionChecking();

		if (!$row) trigger_error("Error checking tag from parent page", E_USER_ERROR);
	}
	
	// With the tag constructed, check the user has permission to create the item in that location
	if ($_POST["submitaction"] == "publish" and !outlineCheckIfAuth("createpage", (!empty($_POST["parenttag"])?$_POST["parenttag"]."/":"").$_POST["tag"], $auth->user["username"], false, $_POST["siteid"])) $group1->makeInputInvalid("parenttagvis", "You do not have permission to move a page into the folder selected.");
	
	// Check that tag is not already in use on this site
	$db->disableInjectionChecking();
	if ($rec["type"] == "page" and $db->querySingle("SELECT l.id FROM out_items i LEFT JOIN out_localcontent l ON i.id=l.itemid WHERE l.tag='".(!empty($_POST["parenttag"])?$_POST["parenttag"]."/":"").$_POST["tag"]."' AND i.siteid='".$_POST["siteid"]."' AND l.languageisocode='".$rec["languageisocode"]."' AND l.id != '".$_POST["localcontentid"]."'")) {
		$group1->makeInputInvalid("tag", "The tag name you gave is already in use for a page in this section and site - you need to specify a unique tag for each page in any given section so that every page has a different URL.");
	}
	$db->enableInjectionChecking();

	$group1->addData($_POST);

	// Outline extension: validate form data prior to a save
	$extendArray = array(&$rec, &$_POST, &$group1);
	outlineExtend("editSaveValidate", $extendArray);

	if ($group1->inputValid()) {
	
		// Outline extension: process any data at the start of a save
		$extendArray = array(&$rec, &$_POST);
		outlineExtend("editSaveStart", $extendArray);
		
		// If this is an asset and the temporary wrapper to allow "inline" content is still present, restore the content by removing the wrapper
		if (($rec["type"] == "asset") and strpos($_POST["Editor"], "temporaryasseteditwrapper")) {
			$_POST["Editor"] = outlineRestoreAssetHTML($_POST["Editor"]);
		}
		
		// Linked asset tags may have their attribute orders shuffled by FCK at random.  We also no longer need many of the attributes, so reduce to
		// a src tag and a class tag (containing the asset):
		$_POST["Editor"] = preg_replace('/<img([^>]*?)\s*src="([^"]+)assetmarker\.png"([^>]*?)\/>/i', '<img src="$2assetmarker.png" $1 $3 />', $_POST["Editor"]);
		$_POST["Editor"] = preg_replace('/<img\s*src="([^"]+)assetmarker\.png"([^>]*?)\s*class="linkedasset([\d]+)"([^>]*?)\/>/i', "<linkedassetmarker-id$3/>", $_POST["Editor"]);
	
		// Process any linked assets detected, a much easier process than in v2
		while (preg_match('/<linkedassetmarker\-id([\d]+)\/>/i', $_POST["Editor"], $matches)) {
			$assetid = $matches[1];
			
			$theAsset = $db->querySingle("SELECT html FROM out_versions WHERE localcontentid=%s AND islive=1", $db->sqlenc($assetid));
			// TODO: languages of asset insertion...?
			
			// If the asset has been found, swap all instances of the linked asset marker with the asset content
			// surrounded by HTML comment tags (for easy identification when re-loading)
			if ($theAsset) {
				$_POST["Editor"] = str_replace("<linkedassetmarker-id".$assetid."/>", "<!--linkedasset-id".$assetid."-->".$theAsset."<!--/linkedasset-id".$assetid."-->", $_POST["Editor"]);
	
			// If the asset hasn't been found, it may have been deleted and not correctly cleaned up, or may have been inserted manually;
			// in either case remove the invalid marker.
			} else {
				$_POST["Editor"] = str_replace("<linkedassetmarker-id".$assetid."/>", "", $_POST["Editor"]);
			}
		}
	
		// If asset being published, update all html containing items,
		// and flush the cache for those items
		if (($rec["type"] == "asset") && $userIsPublisher && ($_POST["submitaction"] == "publish")) {
			$db->disableInjectionChecking();
			$assetRecords = $db->query("SELECT v.id AS id, languageisocode, tag, html, siteid FROM out_localcontent l LEFT JOIN out_versions v ON l.id=v.localcontentid LEFT JOIN out_items i ON l.itemid=i.id WHERE html LIKE '%<!--linkedasset-id".$rec["id"]."-->%'");
			$db->enableInjectionChecking();

			$sitestouncache = array();
			while($theAssetRow = $db->getRow($assetRecords)) {
				$newString = outlineUpdateAssets($rec["id"], $theAssetRow["html"], $_POST["Editor"]);
				$db->disableInjectionChecking();
				$db->query("UPDATE out_versions SET html='".$db->sqlenc($newString)."' WHERE id='".$theAssetRow["id"]."'");
				$db->enableInjectionChecking();
				$sitestouncache[$theAssetRow["siteid"]] = $theAssetRow["siteid"];
			}
			foreach ($sitestouncache as $uncachesiteid) {
				outlineDeleteCache($uncachesiteid);
			}
		}
	
		// Update visibility of the item and flush cache if necessary.  Chance of
		// page having changed site so flush entire cache
		if ($rec["type"] == "page" and $rec["visibility"] != $_POST["visibility"]) {
			$db->disableInjectionChecking();
			if ($_POST["submitaction"] == "publish") $db->query("UPDATE out_items SET visibility='".(($_POST["visibility"])?$db->sqlenc($_POST["visibility"]):"inaccessible")."' WHERE id=".$rec["itemid"]);
			if ($_POST["siteid"]) outlineDeleteCache($_POST["siteid"]);
			else outlineDeleteCache();
			$db->enableInjectionChecking();

		
		// Also flush the cache if publishing a draft, as this changes the nav.
		} else if ($_POST["type"] == "draft" and $_POST["submitaction"] == "publish") {
			outlineDeleteCache($_POST["siteid"]);
		}
	
		// Modify the tag of the localised content if necessary,
		// and update any children as well as flushing the cache
		if ($_POST["submitaction"] == "publish") {
			if ($rec["tag"] != "homepage" and ($rec["siteid"] != $_POST["siteid"] or $rec["tag"] != (!empty($_POST["parenttag"])?$_POST["parenttag"]."/":"").$_POST["tag"])) {
				
				// Firstly update the parentid of the parent item if necessary
				// Use a special case for parent of homepage
				if (empty($_POST["parenttag"]) or $_POST["parenttag"] == "homepage") {
					$db->disableInjectionChecking();
					$homepageid = $db->querySingle("SELECT i.id FROM out_items i LEFT JOIN out_localcontent l ON i.id=l.itemid WHERE i.siteid='".$db->sqlenc($_POST["siteid"])."' AND tag='homepage'");
					if ($homepageid) $db->query("UPDATE out_items SET parentid=".$homepageid." WHERE id='".$rec["itemid"]."'");
					else $db->query("UPDATE out_items SET parentid=0 WHERE id='".$rec["itemid"]."'");
					$_POST["parenttag"] = "";
					$db->enableInjectionChecking();

				} else {
					$db->disableInjectionChecking();
					$parentid = $db->querySingle("SELECT itemid FROM out_localcontent l LEFT JOIN out_items i ON l.itemid=i.id WHERE tag='".$db->sqlenc($_POST["parenttag"])."' AND siteid='".$db->sqlenc($_POST["siteid"])."'");
					$db->query("UPDATE out_items SET parentid=".$parentid." WHERE id='".$rec["itemid"]."'");
					$_POST["parenttag"] = $_POST["parenttag"]."/";
					$db->enableInjectionChecking();

				}
			
				// Secondly, update the tags where necessary
				$db->disableInjectionChecking();
				$db->query("UPDATE out_localcontent SET tag='".$db->sqlenc($_POST["parenttag"].$_POST["tag"])."' WHERE id=".$_POST["id"]);
				$result = $db->query("SELECT l.id, tag FROM out_localcontent l LEFT JOIN out_items i ON l.itemid=i.id WHERE siteid=".$rec["siteid"]." AND tag LIKE '".$db->sqlenc($rec["tag"])."/%'");
				while ($oldtagrow = $db->getRow($result)) {
					$db->query("UPDATE out_localcontent SET tag='".$db->sqlenc($_POST["parenttag"].$_POST["tag"]).substr($oldtagrow["tag"], strlen($rec["tag"]))."' WHERE id=".$oldtagrow["id"]);
				}
				$db->enableInjectionChecking();
				// Next update any links within the CMS pointing to the old location.  Once for ", once for '.
				if ($_POST["tag"] and $rec["tag"]) {
					$db->disableInjectionChecking();
					$webroot = $db->querySingle("SELECT webroot FROM out_sites WHERE id=".$rec["siteid"]);
					$db->query("UPDATE out_versions SET html = REPLACE(html, 'href=\"/".$rec["webroot"]."/".$db->sqlenc($rec["tag"])."', 'href=\"/".$webroot."/".$db->sqlenc($_POST["parenttag"]).$db->sqlenc($_POST["tag"])."') WHERE html LIKE '%href=\"/".$rec["webroot"]."/".$db->sqlenc($rec["tag"])."%'");
					$db->query("UPDATE out_versions SET html = REPLACE(html, 'href=\'/".$rec["webroot"]."/".$db->sqlenc($rec["tag"])."', 'href=\"/".$webroot."/".$db->sqlenc($_POST["parenttag"]).$db->sqlenc($_POST["tag"])."') WHERE html LIKE '%href=\'/".$rec["webroot"]."/".$db->sqlenc($rec["tag"])."%'");
					
					// ..and also within the current page. Again once for " and once for '.
					$_POST["Editor"] = str_replace("href=\"/".$rec["webroot"]."/".$db->sqlenc($rec["tag"]), "href=\"/".$webroot."/".$db->sqlenc($_POST["parenttag"]).$db->sqlenc($_POST["tag"]), $_POST["Editor"]);
					$_POST["Editor"] = str_replace("href='/".$rec["webroot"]."/".$db->sqlenc($rec["tag"]), "href='/".$webroot."/".$db->sqlenc($_POST["parenttag"]).$db->sqlenc($_POST["tag"]), $_POST["Editor"]);
				}
				$db->enableInjectionChecking();
				outlineDeleteCache(); // All - if link has changed could affect all managed sites.

				// Now change the siteid if required
				if ($rec["siteid"] != $_POST["siteid"]) {
					$db->disableInjectionChecking();
					$db->query("UPDATE out_items SET siteid='".$db->sqlenc($_POST["siteid"])."' WHERE id='".$rec["itemid"]."'");
					$db->enableInjectionChecking();
				}
				
				// Next, modify the "last viewed" session tag if necessary
				$_SESSION["outline"]["lastpage"] = str_replace($rec["tag"], $_POST["parenttag"].$_POST["tag"], $_SESSION["outline"]["lastpage"]);
				
				// Finally, update out_permission tags
				$db->disableInjectionChecking();
				$result = $db->query("SELECT htaccessuser, tag FROM out_permissions WHERE tag LIKE '".$db->sqlenc($rec["tag"])."%' AND siteid='".$rec["siteid"]."'");
				$db->enableInjectionChecking();
				while ($oldtagrow = $db->getRow($result)) {
					$db->disableInjectionChecking();
					$db->query("UPDATE out_permissions SET tag='".$db->sqlenc($_POST["parenttag"].$_POST["tag"]).substr($oldtagrow["tag"], strlen($rec["tag"]))."', siteid='".$db->sqlenc($_POST["siteid"])."' WHERE htaccessuser='".$oldtagrow["htaccessuser"]."' AND tag='".$oldtagrow["tag"]."' AND siteid='".$rec["siteid"]."'"); 
					$db->enableInjectionChecking();
				}
				
		
			// If the tag hasn't changed but the title has, flush the cache to refresh the navigation
			} else if (($_POST["title"] != $rec["title"]) and ($rec["visibility"] == "visible")) {
				outlineDeleteCache($rec["siteid"]);
			
			// If the tag or title hasn't changed, uncache just the one page
			} else {
				outlineDeleteCacheForPage($rec["tag"], $rec["languageisocode"], $rec["siteid"]);
			}
		}
	
		// Set up a basic SQL query to be used as necessary, just to avoid repetition
		$sqlString = "title='".$db->sqlenc($_POST["title"])."', html='".$db->sqlenc($_POST["Editor"])."', datecreated=NOW()";
		
		// Insert or update record according to whether the page being edited is a
		// revision or a draft, and also according to the action.
		if ($_POST["type"] == "draft") {
			$db->disableInjectionChecking();
			if (($_POST["submitaction"] == "savedraft") && outlineIsFunctionalityEnabled("drafts")) {
				$db->query("UPDATE out_versions SET ".$sqlString." WHERE id=".$_POST["id"]);
				$page->alert("Changes to draft saved.", "done");
			} else if (($_POST["submitaction"] == "Send") && outlineIsFunctionalityEnabled("multipleusers")) {
				$db->query("UPDATE out_versions SET ".$sqlString.", draftuser='".$db->sqlenc($_POST["reviewuser"])."' WHERE id=".$_POST["id"]);
				$page->alert("Changes sent for review.", "done");
			} else if (($_POST["submitaction"] == "Return") && outlineIsFunctionalityEnabled("multipleusers")) {
				$returntouser = $db->querySingle("SELECT user FROM out_actionlog WHERE date='".$rec["datecreated"]."' AND versionid=".$_POST["id"]);
				if (!$returntouser) $returntouser = $rec["authoruser"];
				$db->query("UPDATE out_versions SET ".$sqlString.", draftuser='".$returntouser."' WHERE id=".$_POST["id"]);
				$page->alert("Draft returned to sender.", "done");
			} else if ($userIsPublisher) {
				$versionresult = $db->querySingle("SELECT MAX(versionnumber) AS maxversion FROM out_versions WHERE id=".$_POST["id"]);
				$db->query("UPDATE out_versions SET ".$sqlString.", versionnumber=".($versionresult + 1).", islive=1, draftuser=NULL WHERE id=".$_POST["id"]);
				$page->alert("Changes saved and published.", "done");
			}
			$db->enableInjectionChecking();
			$newID = $_POST["id"];
		} else {
			$db->disableInjectionChecking();
			if (($_POST["submitaction"] == "savedraft") && outlineIsFunctionalityEnabled("drafts")) {
				$db->query("INSERT INTO out_versions SET localcontentid=".$_POST["id"].", authoruser='".$auth->user["username"]."', draftuser='".$auth->user["username"]."', versionnumber=0, ".$sqlString.", islive=0");
				$page->alert("Changes saved as a draft.", "done");
			} else if (($_POST["submitaction"] == "Send") && outlineIsFunctionalityEnabled("multipleusers")) {
				$db->query("INSERT INTO out_versions SET localcontentid=".$_POST["id"].", authoruser='".$auth->user["username"]."', draftuser='".$db->sqlenc($_POST["reviewuser"])."', versionnumber=0, ".$sqlString.", islive=0");
				$page->alert("Changes sent for review.", "done");
			} else if ($userIsPublisher) {
				$versionresult = $db->querySingle("SELECT MAX(versionnumber) AS maxversion FROM out_localcontent LEFT JOIN out_versions ON out_localcontent.id=out_versions.localcontentid WHERE out_localcontent.id=".$_POST["id"]);
				$db->query("INSERT INTO out_versions SET localcontentid=".$_POST["id"].", authoruser='".$auth->user["username"]."', draftuser=NULL, versionnumber=".($versionresult + 1).", ".$sqlString.", islive=0");
				$page->alert("Changes saved.", "done");
			}
			$db->enableInjectionChecking();
			$newID = $db->getInsertId();
		}
		
		// Outline extension: process any additional fields following the save
		$extendArray = array(&$rec, &$_POST);
		outlineExtend("editSaveEnd", $extendArray);
		
		// Grab the date to synch action logs (useful for queries)
		$newDate = $db->querySingle("SELECT datecreated FROM out_versions WHERE id=".$newID);
		if (!$newDate) $newDate = "NOW()";
		
		// Write action logs as appropriate
		$db->disableInjectionChecking();
		if ($_POST["submitaction"] == "Send") {
			$db->query("INSERT INTO out_actionlog SET versionid=".$newID.", user='".$auth->user["username"]."', actiontype='send for review', comment='".$db->sqlenc(str_replace("\r", "", str_replace("\n", "<br />", $_POST["comment"])))."', date='".$newDate."'");
		} else if ($_POST["submitaction"] == "Return") {
			$db->query("INSERT INTO out_actionlog SET versionid=".$newID.", user='".$auth->user["username"]."', actiontype='return draft', comment='".$db->sqlenc(str_replace("\r", "", str_replace("\n", "<br />", $_POST["comment"])))."', date='".$newDate."'");
		} else if ($_POST["submitaction"] == "deletedraft") {
			$db->query("INSERT INTO out_actionlog SET versionid=".$newID.", user='".$auth->user["username"]."', actiontype='delete', comment='', date='".$newDate."'");
		} else {
			$db->query("INSERT INTO out_actionlog SET versionid=".$newID.", user='".$auth->user["username"]."', actiontype='".$db->sqlenc(strtolower($_POST["submitaction"]))."', comment='', date='".$newDate."'");
		}
		$db->enableInjectionChecking();
		
		// Send a notification if necessary and wanted
		if (($_POST["submitaction"] == "Send") && $_POST["email"]) {
			$sendto = $auth->getDetailsForUser($_POST["reviewuser"]);
			$sendfrom = $auth->getDetailsForUser($auth->user["username"]);
			
			if ($sendto and !empty($sendto["email"]) and $sendfrom) {
				if (empty($sendto["displayname"])) $sendto["displayname"] = $_POST["reviewuser"];
				if (empty($sendfrom["displayname"])) $sendfrom["displayname"] = $auth->user["username"];
				$subj = "Outline - You have just been sent a draft for review";
				$msg = $sendto["displayname"].",\n\nYou have just been sent a draft of the page \"".$_POST["title"]."\" by ".$sendfrom["displayname"].".\n\n";
				if ($_POST["comment"]) {
					$msg .= $sendfrom["displayname"]." included the following comment: \"".$_POST["comment"]."\"\n\n";
				} else {
					$msg .= $sendfrom["displayname"]." did not include a specific comment.\n\n";
				}
				$msg .= "To view a list of your tasks, please visit <http://".$_SERVER["SERVER_NAME"].$page->getRoot()."/".$page->getAppnamespace()."/tasks>; to view this draft, please go to <http://".$_SERVER["SERVER_NAME"].$page->getRoot()."/".$page->getAppnamespace()."/pages/edit?id=".$newID."&type=draft>.";
				mail("\"".$sendto["displayname"]."\"<".$sendto["email"].">", $subj, $msg, str_replace(array("\n", "\r"), "", "From: \"".$sendfrom["displayname"]."\"<".(!empty($sendfrom["email"])?$sendfrom["email"]:"outline@assanka.net").">"));
			}
		}
		
		if ($_POST["submitaction"] == "publish") {
			$db->query("UPDATE out_versions SET islive=0 WHERE localcontentid=%s",$rec["id"]);
			$db->query("UPDATE out_versions SET islive=1 WHERE id=%s",$newID);
		}
		$page->redirect($rec["type"]."s/");

	// If input is invalid...
	} else {
		$group1->addToForm(true);
		
		// Add an error message
		$page->alert("You did not complete the form correctly.  Please review the fields marked below, and ensure you have read the help text available in the panel on the right.", "error");
	}	
} else {

	// Add some default data
	$tagbits = explode("/", $rec["tag"]);
	$rec["tag"] = array_pop($tagbits);
	if (count($tagbits)) {
		$rec["parenttag"] = implode("/", $tagbits);
		$rec["parenttagvis"] = $rec["parenttag"]."/";
	} else $rec["parenttagvis"] = "/";
	
	if (!empty($_REQUEST["type"]) and $_REQUEST["type"] == "draft") {
		$group1->addData(array_merge($rec, array("id"=>$rec["versionid"], "type"=>"draft")));
	} else {
		$group1->addData($rec);
	}

	// Set up the informational message
	$page->alert("Editing ".((!empty($_REQUEST["type"]) and $_REQUEST["type"] == "draft")?"draft of ":"")."'".$rec["title"]."'.  When you have finished, choose a publish option from the right.", "info");
	$editmessage = "";
	if ($draftAction = $db->queryRow("SELECT user, actiontype, comment FROM out_actionlog WHERE date=%s AND versionid=%s", $rec["datecreated"], $_REQUEST["id"])) {
		$draftuser = $draftAction["user"]?$auth->getDetailsForUser($draftAction["user"]):false;
		$draftusername = $draftuser?$draftuser["displayname"]:$draftAction["user"];
		if ($draftAction["actiontype"] == "send for review") $editmessage .= $draftusername." has sent you this draft with".(($draftAction["comment"])?" the comment:<br /> \"".$draftAction["comment"]."\"":"out a comment.");
		if ($draftAction["actiontype"] == "return draft") $editmessage .= $draftusername." has returned this draft with".(($draftAction["comment"])?" the comment:<br /> \"".$draftAction["comment"]."\"":"out a comment.");
		if ($editmessage) $page->alert($editmessage, "info");
	}
	
	// Add the fieldgroups to the form
	$group1->addToForm(false);
}

$page->add("content", $form->outputForm());

$tagbits = explode("/", $rec["tag"]);
if (count($tagbits)) {
	$currentlocation = implode("/", $tagbits);
} else $currentlocation = "";

if (($rec["tag"] != "homepage") and ($rec["type"] == "page") and $userIsPublisher) $page->add("content", "<script type=\"text/javascript\">$(document).ready(function() { outlineMakeBrowseField($('#frmeditpage_parenttagvis').get(0), 'edit', $('#frmeditpage_parenttag').get(0), $('#frmeditpage_siteid').get(0), '".$currentlocation."'); if ($('#frmeditpage_sitename').length) $('#frmeditpage_sitename').attr('disabled', 'disabled'); olhandler = new OutlineHandler('edit'); outlineActivateEditPage();});</script>");
$page->add("rightnav", $form->outputContextHelp());
$page->set("title", "Edit ".$rec["type"]." - '".$rec["title"]."'");
$page->outputHTML();

exit;


function outlineAddReviewPaneAndAction(&$page, $rec, $authuser) {
	global $db, $auth;
	
	// Obtain a list of Outline users with publish permissions for this section
	$publishusers = array();
	$users = $auth->getUsersWithRight("outline.user");
	foreach ($users as $user) {
		// TEST:WV:20090817:Commented out
		//if ($user == "assanka" or $user == $authuser) continue;
		if (outlineCheckIfAuth("publish".$rec["type"], $rec["tag"], $user, false, $rec["siteid"])) {
			$publishusers[$user] = $auth->getDetailsForUser($user);
		}
	}

	// If there's no users, return without adding actions or list.	
	if (!count($publishusers)) return;

	// Add a return button if appropriate
	if ($draftaction = $db->queryRow("SELECT user, actiontype, comment FROM out_actionlog WHERE date=%s AND versionid=%s", $rec["datecreated"], $_REQUEST["id"])) {
		$returnuser = $draftaction["user"]?$auth->getDetailsForUser($draftaction["user"]):false;
		if (!$returnuser) $returnuser = $draftaction["user"];
		else $returnuser = $returnuser["displayname"];
		$page->set("outlinereviewreturnname", $returnuser);
		if ($returnuser and $draftaction["actiontype"] == "send for review") {
			$page->addAction("Return Draft", array("domid"=>"returnreview", "javascript"=>"if (outlineConfirmPageDraft(".$rec["draftjsconfirmvars"].")) outlineToggleReviewPane(true, false)"));
		}
	}
	
	// Construct the HTML and add the send for review code and action
	$page->set("outlinenumreviewusers", min(10, max(2, count($publishusers))));
	$outlinereviewusers = array();
	foreach ($publishusers as $username=>$user) {
		$email = (!empty($user["email"]))?"email":"noemail";
		$outlinereviewusers[] = "<option value=\"".$username."\" class=\"".$email."\">".(!empty($user["displayname"])?$user["displayname"]:$username)."</option>";
	}
	$page->set("outlinereviewusers", implode("", $outlinereviewusers));
	$page->add("rightnav", $page->render("../lib/tem/editreviewpane"));
	$page->addAction("Send for Review", array("domid"=>"sendforreview", "javascript"=>"if (outlineConfirmPageDraft(".$rec["draftjsconfirmvars"].")) outlineToggleReviewPane(true, true)"));
}

// Update any linked assets within a string, replacing them with the
// new asset content and then returning the string.
function outlineUpdateAssets($assetId, $string, $newContent) {
	$assets = array();
	$processingString = $string;

	while (preg_match("/\<\!\-\-linkedasset\-id".$assetId."\-\-\>/i", $processingString, $matches)) {
		$asset = array();
		
		// Note the start of the asset string, not including the span tag
		$asset["start"] = strpos($processingString, $matches[0]) + strlen($matches[0]);
		
		// If there's previous assets, we need to add on a figure to mark a start position in the original string
		if (count($assets)) {
			$previousasset = end($assets);
			$asset["start"] += $previousasset["start"] + $previousasset["length"] + 1;
		}
		
		// Proceed to walk along the string for the end of the asset tag
		$stringtoscan = substr($string, $asset["start"]);

		// Match all opening or closing span tags
		if (preg_match("/<\!\-\-([\/]?)linkedasset\-id".$assetId."\-\->/i", $stringtoscan, $matches)) {
			$innerposition = strpos($stringtoscan, $matches[0]);
			
			// If it's a closing tag, record the location.
			if (!empty($matches[1]) and $matches[1] == "/") {
				$asset["length"] = $innerposition;
			
			// If it's an opening tag, this asset is invalid - ignore it.  We later increment the current location to step past the invalid tag.
			}
			
		// If there's no tags left, but there's still an unclosed asset, it's invalid so we ignore it.
		} else {
			break(1);
		}

		$processingString = substr($string, ($asset["start"] + $innerposition + 1));
		$assets[] = $asset;
	}

	// Now proceed to loop through the assets backwards (in order not to affect previously matched strings),
	// updating all contents as appropriate	
	if (count($assets)) {
		$assets = array_reverse($assets);
	
		foreach ($assets as $asset) {
			$string = substr($string, 0, $asset["start"]) . $newContent . substr($string, $asset["start"]+$asset["length"]);
		}
	}

	return $string;
}

// Process a string to remove the temporary div placed around it to allow inline assets, if appropriate
function outlineRestoreAssetHTML($string) {
	$string = str_replace(array("\r\n", "\r"), "\n", $string);
	$string = str_replace("&nbsp; &nbsp;</div>", "</div>", $string);
	$string = str_replace("<p>&nbsp; &nbsp;</p>\n</div>", "</div>", $string);

	$wrapperhtml = '<div class="temporaryasseteditwrapper">';
	$wrapperlength = strlen($wrapperhtml);
	
	// Attempt to step through the asset string, capturing locations of the wrapper div starts and ends.
	while (strpos($string, $wrapperhtml) !== false) {
		$wrapperstart = strpos($string, $wrapperhtml);

		// Proceed to walk along the string for the end of the asset wrapper, keeping track of possible nested tags
		$divstoclose = 1;
		$currentlocation = $wrapperstart + $wrapperlength;
		while ($divstoclose) {
			$stringtoscan = substr($string, $currentlocation);

			// Match all opening or closing div tags
			if (preg_match("/<([\/]?)div( |>)/i", $stringtoscan, $matches)) {
				$innerposition = strpos($stringtoscan, $matches[0]);

				// If it's a closing tag, decrement the tag count.
				if ($matches[1] == "/") {
					$divstoclose--;
					
					// If all tags have been closed we can delete the closing div, and then delete the opening div:
					if (!$divstoclose) {
						$string = substr($string, 0, $currentlocation + $innerposition).substr($string, $currentlocation + $innerposition + 6);
						$string = substr($string, 0, $wrapperstart).substr($string, $wrapperstart + $wrapperlength);
					}

				// If it's an opening tag, increment the nested tag count.
				} else {
					$divstoclose++;
				}
				$currentlocation += $innerposition + 1;

			// If there's no tags left, but there's still an unclosed asset wrapper, it's invalid so we ignore it.
			} else {
				break(2);
			}
		}
	}

	return $string;
}
?>
