<?php



// This file is deprecated, and should no longer be in use.  This error designed to catch cases where it is still being used.
trigger_error('Deprecated code in use', E_USER_DEPRECATED);



/**
 * CMS delivery script functions, to be included by a content script
 * within each project. Intended to output content, formatted by
 * means of templates, using tags passed on querystring as
 * parameters.
 *
 * Accepted Inputs: none
 *
 * @copyright The Financial Times Limited [All Rights Reserved]
 */

// Previous argument order for returnPageHTML was:
// $tag, $lastModDateString = false, $lastModDateFormat = false, $extraTemplateTerms = false, $templateToUse = "page-cms", $includeSiteTitle = true, $siteID = 1, $pageTemplateToUse = "page", $enablecache = true

class Outline {
	private $_contenttemplate = "page-cms";
	private $_pagetemplate = "page";
	private $_additionaltemplateterms = array();
	private $_siteid = 1;
	private $_enablecache = true;
	private $_isocode = "en";
	
	public $lastmodifieddatestring = false;
	public $lastmodifieddateformat = false;
	
	// TODO:RB:20080128: Addn'l verification?  Another file_exists check may be too expensive...
	public function setContentTemplate($template) {
		$this->_contenttemplate = $template;
	}

	// TODO:RB:20080128: Addn'l verification?  Another file_exists check may be too expensive...
	public function setPageTemplate($template) {
		$this->_pagetemplate = $template;
	}
	
	// TODO:RB:20080128: This needs review as to what it's actually used for.
	public function addTemplateTerm($key, $value) {
		$this->_additionaltemplateterms[$key] = $value;
	}

	public function setSiteId($id) {
		if (is_numeric($id)) {
			$this->_siteid = $id;
			return true;
		}
		return false;
	}
	
	public function setUseCache($enable) {
		$this->_enablecache = (($enable)?true:false);
	}
		
	public function getPageTag() {
		$tag = substr($_SERVER["REQUEST_URI"], (strlen($_SERVER["SCRIPT_FILENAME"]) - strlen($_SERVER["DOCUMENT_ROOT"])));
		
		// Check the tag for a query string and remove if present...
		if (strpos($tag, "?") !== false) $tag = substr($tag, 0, strpos($tag, "?")-1);
		
		// Finally remove leading and trailing slashes, and set homepage tags if necessary.
		$tag = trim($tag, "/");
		if ($tag == "") $tag = "homepage";

		return $tag;
	}
	
	public function outputHTML($tag = false) {
		echo $this->returnHTML($tag);
	}
	
	public function returnHTML($tag = false) {
		global $db, $auth, $page;
		
		if (!session_id()) session_start();
		
		// Work out the tag if none has been provided
		if ($tag === false) {
			$tag = $this->getPageTag();
		}
		
		$pageHTML = "";
	
		$cacheRoot = $_SERVER["DOCUMENT_ROOT"]."/lib/tmp/cmscache";
		$cacheSiteRoot = $cacheRoot."/".$this->_siteid;
		$cacheLocRoot = $cacheSiteRoot."/".$this->_isocode;
	
		// Determine whether or not to use a file cache
		$cacheexists = false;
		$cachefilelocation = $cacheLocRoot."/".$tag."/index.html";
		if ($this->_enablecache and file_exists($cachefilelocation)) {
					
			// Check whether the file has been modified within the last hour
			if (@filemtime($cachefilelocation) > (time() - 3600)) {
				$cacheexists = true;
			
			// If it hasn't been, delete the cache.
			} else {
				@unlink($cachefilelocation);
			}
		}
	
		// Four possible code paths; user-no-cache, user-cache, admin-no-cache, admin-cache
		if ($this->_enablecache and file_exists($cacheLocRoot."/".$tag."/index.html")) {
			if (!empty($_SESSION["outline"]["adminuser"])) {
				$pageHTML = file_get_contents($cacheLocRoot."/".$tag."/index.html");
				
				// Also grab the content id for use in strings
				require_once($_SERVER["DOCUMENT_ROOT"]."/lib/inc/global");
				$content = $db->queryRow("SELECT l.id FROM out_localcontent l LEFT JOIN out_items i ON l.itemid=i.id LEFT JOIN out_versions v ON l.id=v.localcontentid WHERE tag=%s AND visibility != %s AND islive = 1 AND siteid=%s", $db->sqlenc($tag), 'inaccessible', $this->_siteid);
			} else {
				return file_get_contents($cacheLocRoot."/".$tag."/index.html");
			}
		
		// If no cache exists, we need to grab the page from the database,
		// and also generate a static page.
		} else {
			require_once($_SERVER["DOCUMENT_ROOT"]."/lib/inc/global");
			require_once($_SERVER["CORE_PATH"]."/apps/outline/v4/lib/inc/functions");

			$content = $db->queryRow("SELECT l.id, tag, title, html AS content, DATE_FORMAT(datecreated, {lastmodifieddateformat|nokey}) as lastmod, DATE_FORMAT(datecreated, {metamoddateformat|nokey}) as metamoddate FROM out_items i LEFT JOIN out_localcontent l ON i.id=l.itemid LEFT JOIN out_versions v ON l.id=v.localcontentid WHERE {tag} AND visibility != {visibility|nokey} AND islive = 1 AND siteid=".$this->_siteid, array("lastmodifieddateformat"=>(($this->lastmodifieddateformat)?$this->lastmodifieddateformat:"%W, %d-%b-%y %H:%i:%T"), "metamoddateformat"=>"%W, %d-%b-%y %H:%i:%T", "tag"=>$tag, "visibility"=>"inaccessible"));

			if ($content) {
				$extendArray = array(&$content);
				outlineExtend("modifyContentRow", $extendArray);
				if ($content["lastmod"] and $this->lastmodifieddatestring) {
					$content["lastmod"] = str_replace("-dateGetsInsertedHere-", $content["lastmod"], $this->lastmodifieddatestring);
				}
				$page->set($content);
				$content["maincontent"] = $page->render($this->_contenttemplate);
				$content["pagetitle"] = $content["title"];
				
				foreach ($this->_additionaltemplateterms as $key=>$template) {
					if (is_array($template)) {
						if ($template["content"]) $content[$key] = $template["content"];
						else $content[$key] = $template["template"];
					} else {
						$page->set($content);
						$content[$key] = $page->set($template);
					}
				}
			
				// Output page template to a string
				$page->set($content);
				$pageHTML = $page->render($this->_pagetemplate);
			} else {
				include($_SERVER["DOCUMENT_ROOT"]."/lib/err/404");
				exit;
			}
		
			if ($this->_enablecache) {
				
				// Create the folder path for the cache, if it doesn't exist
				$old_umask = umask(0);
				if (!file_exists($cacheRoot)) mkdir($cacheRoot, 0777);
				if (!file_exists($cacheSiteRoot)) mkdir($cacheSiteRoot, 0777);
				if (!file_exists($cacheLocRoot)) mkdir($cacheLocRoot, 0777);
				$tagparts = explode("/", $tag);
				$tagpath = "";
				foreach ($tagparts as $tagpart) {
					$tagpath .= "/".$tagpart;
					if (!file_exists($cacheLocRoot.$tagpath)) {
						mkdir($cacheLocRoot.$tagpath, 0777);
					}
				}
				
				// Create the cached page
				if ($cache = @fopen($cacheLocRoot."/".$tag."/index.html", "w")) {
					fwrite($cache, $pageHTML);
					fclose($cache);
				}
				chmod($cacheLocRoot."/".$tag."/index.html", 0777);
				umask($old_umask);
			}
			
			// What to do next depends on whether the visitor is a user or
			// a logged-in admin.  Admins need the page modifying, but if the
			// visitor is a user now, output the page at once so caching happens
			// after the fact.  Caching has to happen before an admin view.
			if (empty($_SESSION["outline"]["adminuser"])) {
				return $pageHTML;
			}
		}
		
		// If the user logged into the admin section, modify the page
		// content to display a site toolbar and echo it.
		if (!empty($_SESSION["outline"]["adminuser"])) {
			require_once($_SERVER["DOCUMENT_ROOT"]."/lib/inc/global");

			$rights = $auth->getUsersWithRight("outline");
			if (in_array($_SESSION["outline"]["adminuser"], $rights)) {			
				require_once($_SERVER["CORE_PATH"]."/apps/outline/v4/lib/inc/functions");
				$pageHTML = outlineInsertAdminControls($tag, $content["id"], $pageHTML);
			}
			return $pageHTML;
		}
	}
}
?>
