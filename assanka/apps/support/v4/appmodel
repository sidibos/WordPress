<?php



// This file is deprecated, and should no longer be in use.  This error designed to catch cases where it is still being used.
trigger_error('Deprecated code in use', E_USER_DEPRECATED);




// Set up some definitions to make support packages more readable
DEFINE("THREE_DAYS", 3*24*60);
DEFINE("ONE_DAY", 24*60);
DEFINE("EIGHT_HOURS", 8*60);
DEFINE("FOUR_HOURS", 4*60);

class Model {

	public static $supportpackageopts = array(
		"standard" => array(
			"workinghours" => array(
				"weekday" => array(
					 0 => false,  1 => false,  2 => false,  3 => false,  4 => false,  5 => false,
					 6 => false,  7 => false,  8 => false,  9 =>  true, 10 =>  true, 11 =>  true,
					12 =>  true, 13 =>  true, 14 =>  true, 15 =>  true, 16 =>  true, 17 => false,
					18 => false, 19 => false, 20 => false, 21 => false, 22 => false, 23 => false
				),
				"weekend" => array(
					 0 => false,  1 => false,  2 => false,  3 => false,  4 => false,  5 => false,
					 6 => false,  7 => false,  8 => false,  9 => false, 10 => false, 11 => false,
					12 => false, 13 => false, 14 => false, 15 => false, 16 => false, 17 => false,
					18 => false, 19 => false, 20 => false, 21 => false, 22 => false, 23 => false
				)
			),
			"responsetime" => array(
				"trivial" => array( "inworkinghours"=>EIGHT_HOURS, "outofworkinghours"=>-1 ),
				"minor" => array( "inworkinghours"=>EIGHT_HOURS, "outofworkinghours"=>-1 ),
				"normal" => array( "inworkinghours"=>EIGHT_HOURS, "outofworkinghours"=>-1 ),
				"major" => array( "inworkinghours"=>EIGHT_HOURS, "outofworkinghours"=>-1 ),
				"critical" => array( "inworkinghours"=>EIGHT_HOURS, "outofworkinghours"=>-1 )
			)
		),		


		"rapid" => array(
			"workinghours" => array(
				"weekday" => array(
					 0 => false,  1 => false,  2 => false,  3 => false,  4 => false,  5 => false,
					 6 => false,  7 => false,  8 => false,  9 =>  true, 10 =>  true, 11 =>  true,
					12 =>  true, 13 =>  true, 14 =>  true, 15 =>  true, 16 =>  true, 17 => false,
					18 => false, 19 => false, 20 => false, 21 => false, 22 => false, 23 => false
				),
				"weekend" => array(
					 0 => false,  1 => false,  2 => false,  3 => false,  4 => false,  5 => false,
					 6 => false,  7 => false,  8 => false,  9 => false, 10 => false, 11 => false,
					12 => false, 13 => false, 14 => false, 15 => false, 16 => false, 17 => false,
					18 => false, 19 => false, 20 => false, 21 => false, 22 => false, 23 => false
				)
			),
			"responsetime" => array(
				"trivial" => array( "inworkinghours"=>FOUR_HOURS, "outofworkinghours"=>-1 ),
				"minor" => array( "inworkinghours"=>FOUR_HOURS, "outofworkinghours"=>-1 ),
				"normal" => array( "inworkinghours"=>FOUR_HOURS, "outofworkinghours"=>-1 ),
				"major" => array( "inworkinghours"=>FOUR_HOURS, "outofworkinghours"=>-1 ),
				"critical" => array( "inworkinghours"=>FOUR_HOURS, "outofworkinghours"=>-1 )
			)
		),		
	

		"24hour" => array(
			"workinghours" => array(
				"weekday" => array(
					 0 =>  true,  1 =>  true,  2 =>  true,  3 =>  true,  4 =>  true,  5 =>  true,
					 6 =>  true,  7 =>  true,  8 =>  true,  9 =>  true, 10 =>  true, 11 =>  true,
					12 =>  true, 13 =>  true, 14 =>  true, 15 =>  true, 16 =>  true, 17 =>  true,
					18 =>  true, 19 =>  true, 20 =>  true, 21 =>  true, 22 =>  true, 23 =>  true
				),
				"weekend" => array(
					 0 =>  true,  1 =>  true,  2 =>  true,  3 =>  true,  4 =>  true,  5 =>  true,
					 6 =>  true,  7 =>  true,  8 =>  true,  9 =>  true, 10 =>  true, 11 =>  true,
					12 =>  true, 13 =>  true, 14 =>  true, 15 =>  true, 16 =>  true, 17 =>  true,
					18 =>  true, 19 =>  true, 20 =>  true, 21 =>  true, 22 =>  true, 23 =>  true
				)
			),
			"responsetime" => array(
				"trivial" => array( "inworkinghours"=>FOUR_HOURS, "outofworkinghours"=>FOUR_HOURS ),
				"minor" => array( "inworkinghours"=>FOUR_HOURS, "outofworkinghours"=>FOUR_HOURS ),
				"normal" => array( "inworkinghours"=>FOUR_HOURS, "outofworkinghours"=>FOUR_HOURS ),
				"major" => array( "inworkinghours"=>FOUR_HOURS, "outofworkinghours"=>FOUR_HOURS ),
				"critical" => array( "inworkinghours"=>FOUR_HOURS, "outofworkinghours"=>FOUR_HOURS )
			)
		),		


		"critical" => array(
			"workinghours" => array(
				"weekday" => array(
					 0 =>  true,  1 =>  true,  2 =>  true,  3 =>  true,  4 =>  true,  5 =>  true,
					 6 =>  true,  7 =>  true,  8 =>  true,  9 =>  true, 10 =>  true, 11 =>  true,
					12 =>  true, 13 =>  true, 14 =>  true, 15 =>  true, 16 =>  true, 17 =>  true,
					18 =>  true, 19 =>  true, 20 =>  true, 21 =>  true, 22 =>  true, 23 =>  true
				),
				"weekend" => array(
					 0 =>  true,  1 =>  true,  2 =>  true,  3 =>  true,  4 =>  true,  5 =>  true,
					 6 =>  true,  7 =>  true,  8 =>  true,  9 =>  true, 10 =>  true, 11 =>  true,
					12 =>  true, 13 =>  true, 14 =>  true, 15 =>  true, 16 =>  true, 17 =>  true,
					18 =>  true, 19 =>  true, 20 =>  true, 21 =>  true, 22 =>  true, 23 =>  true
				)
			),
			"responsetime" => array(
				"trivial" => array( "inworkinghours"=>15, "outofworkinghours"=>15 ),
				"minor" => array( "inworkinghours"=>15, "outofworkinghours"=>15 ),
				"normal" => array( "inworkinghours"=>15, "outofworkinghours"=>15 ),
				"major" => array( "inworkinghours"=>15, "outofworkinghours"=>15 ),
				"critical" => array( "inworkinghours"=>15, "outofworkinghours"=>15 )
			)
		),		


		"daytimecritical" => array(
			"workinghours" => array(
				"weekday" => array(
					 0 => false,  1 => false,  2 => false,  3 => false,  4 => false,  5 => false,
					 6 => false,  7 =>  true,  8 =>  true,  9 =>  true, 10 =>  true, 11 =>  true,
					12 =>  true, 13 =>  true, 14 =>  true, 15 =>  true, 16 =>  true, 17 =>  true,
					18 =>  true, 19 =>  true, 20 => false, 21 => false, 22 => false, 23 => false
				),
				"weekend" => array(
					 0 => false,  1 => false,  2 => false,  3 => false,  4 => false,  5 => false,
					 6 => false,  7 => false,  8 => false,  9 => false, 10 => false, 11 => false,
					12 => false, 13 => false, 14 => false, 15 => false, 16 => false, 17 => false,
					18 => false, 19 => false, 20 => false, 21 => false, 22 => false, 23 => false
				)
			),
			"responsetime" => array(
				"trivial" => array( "inworkinghours"=>THREE_DAYS, "outofworkinghours"=>THREE_DAYS ),
				"minor" => array( "inworkinghours"=>ONE_DAY, "outofworkinghours"=>ONE_DAY ),
				"normal" => array( "inworkinghours"=>FOUR_HOURS, "outofworkinghours"=>FOUR_HOURS ),
				"major" => array( "inworkinghours"=>60, "outofworkinghours"=>FOUR_HOURS ),
				"critical" => array( "inworkinghours"=>15, "outofworkinghours"=>FOUR_HOURS )
			)
		),		
	);

	public static $opts = array(
		"supportpkgs" => array("standard"=>"standard", "rapid"=>"rapid", "24hour"=>"24hour", "critical"=>"critical", "daytimecritical"=>"daytime critical"),
		"statii" => array("new"=>"new", "assigned"=>"assigned", "scheduled for release"=>"scheduled for release", "completed"=>"completed", "deferred"=>"deferred", "awaiting client"=>"awaiting client", "closed"=>"closed"),
		"classes" => array("A"=>"A: Usage advice", "B"=>"B: Upgrade advice", "C"=>"C: Reported fault", "D"=>"D: Unreported fault", "E"=>"E: Upgrade", "CR"=>"CR: Change request", "OBS"=>"OBS: Test/dev observation", "CFGC"=>"CFGC: Configuration change"),
		"resolutions" => array("resolved"=>"resolved", "implemented"=>"implemented", "duplicate"=>"duplicate", "advice given"=>"advice given", "no action taken"=>"no action taken"),
		"importances" => array('trivial'=>'trivial','minor'=>'minor','normal'=>'normal','major'=>'major','critical'=>'critical')
	);

	public static $fields = array(
		"id" => 
			array("datatype"=>"integer", "issigned"=>false, "length"=>3, "label"=>"ID", "sort"=>"DESC", "align"=>"left", "required"=>true, "inputtype"=>"hidden"),
		"email" => 
			array("datatype"=>"text", "label"=>"Email", "validation"=>"email", "required"=>true),
		"user_name" => 
			array("datatype"=>"text", "length"=>255, "label"=>"Name", "required"=>true),
		"mobile" => 
			array("datatype"=>"text", "label"=>"Mobile", "validation"=>"phone"),
		"emailnotifylevel" => 
			array("datatype"=>"enum"),
		"smsnotifylevel" => 
			array("datatype"=>"enum"),
		"client" => 
			array("datatype"=>"text", "length"=>4, "prompt"=>"Client", "label"=>"Client", "required"=>true),
		"project" => 
			array("datatype"=>"text", "length"=>8, "prompt"=>"Project", "label"=>"Project", "required"=>true),
		"author" => 
			array("datatype"=>"text", "length"=>50, "prompt"=>"Author", "label"=>"Author", "required"=>true),
		"title" => 
			array("datatype"=>"text", "length"=>255, "prompt"=>"Title", "highlightfilter"=>"keyword", "label"=>"Title", "displaymodifiers"=>"breakonsymb", "required"=>true, "helptext"=>"Provide a title for the request, or cite the error tracking code if you have one.  If you do have an error tracking code, please use it rather than providing a title.  Otherwise, enter a few brief words that summarises the problem, such as \"File upload failure for files > 10MB\". If you're not sure exactly what the problem is, describe the symptoms. If the request is not a problem, use the title to summarise what it is you need. Try to keep the title as concise as possible."),
		"description" => 
			array("datatype"=>"text", "inputtype"=>"textarea", "prompt"=>"Description", "label"=>"Description", "displaymodifiers"=>"breakonsymb", "required"=>true, "helptext"=>"Describe the request in detail. This field is optional, but for complex issues it helps us enormously if you describe exactly what you did to uncover the problem. If you are requesting a change, use this field to explain your requirements. There is no limit to the length of text you can type into this box."),
		"notifycontacts" => 
			array("datatype"=>"enum", "label"=>"Notify support contacts", "required"=>true, "options"=>array(1=>"Yes", 0=>"No")),
		"requestauthor" => 
			array("datatype"=>"enum", "label"=>"Request author", "required"=>true),
		"status" => 
			array("datatype"=>"enum", "label"=>"Status", "required"=>true, "displaycallback"=>array("Model", "displaycallback_status"), "displaymodifiers"=>"nowrap", "helptext"=>"Choose the current status of this support request"),
		"class" => 
			array("datatype"=>"enum", "label"=>"Classification", "displaycallback"=>array("Model", "displaycallback_classification"), "helptext"=>"Enter the classification of this support request"),
		"class_abbrev" => 
			array("datatype"=>"enum", "label"=>"Class.", "displaycallback"=>array("Model", "displaycallback_abbrevclassification"), "helptext"=>"Enter the classification of this support request"),
		"importance" => 
			array("datatype"=>"enum", "label"=>"Importance", "required"=>true, "displaymodifiers"=>"capitalise", "helptext"=>"The importance of the request determines the order in which we respond to your support requests if you create more than one. Otherwise it has no effect, other than as a record of how important the request was."),
		"importanceicons" => 
			array("datatype"=>"enum", "label"=>"", "displaycallback"=>array("Model", "displaycallback_importanceicons")),
		"resolution" => 
			array("datatype"=>"enum", "label"=>"Resolution", "helptext"=>"Once the support request has been completed or closed, enter the resolution"),
		"assignedto" => 
			array("datatype"=>"text", "length"=>50, "prompt"=>"Assign to", "label"=>"Assigned to", "displaycallback"=>array("Model", "displaycallback_assignedto"), "inputtype"=>"select", "helptext"=>"Select a developer to assign to deal with this support request.  The only developers listed are those who are qualified on this project"),
		"datecreated" => 
			array("datatype"=>"datetime", "label"=>"Created", "sort"=>"DESC", 'displaymodifiers'=>'timepast,nowrap', "required"=>true),
		"datecreated_normal" => 
			array("datatype"=>"datetime", "label"=>"Created", "sort"=>"DESC", 'displaymodifiers'=>'dateformat:"j M Y",nowrap', "required"=>true),
		"datecreated_full" => 
			array("datatype"=>"datetime", "label"=>"Created", "sort"=>"DESC", 'displaymodifiers'=>'dateformat:"j M Y H:i:s",nowrap', "required"=>true),
		"lastactivity" => 
			array("datatype"=>"datetime", "label"=>"Last active", "sort"=>"DESC", "primarysort"=>true, 'displaymodifiers'=>'timepast,nowrap', "required"=>true),
		"lastactivity_normal" => 
			array("datatype"=>"datetime", "label"=>"Last active", "sort"=>"DESC", "primarysort"=>true, 'displaymodifiers'=>'dateformat:"j M Y",nowrap', "required"=>true),
		"lastactivity_full" => 
			array("datatype"=>"datetime", "label"=>"Last active", "sort"=>"DESC", "primarysort"=>true, 'displaymodifiers'=>'dateformat:"j M Y H:i:s",nowrap', "required"=>true),
		"datemodified" => 
			array("datatype"=>"datetime", "label"=>"Modified", "sort"=>"DESC", 'displaymodifiers'=>'dateformat:"j M Y H:i"', "required"=>true),
		"dateclosed" => 
			array("datatype"=>"datetime", "label"=>"Closed", "sort"=>"DESC", 'displaymodifiers'=>'dateformat:"j M Y H:i"', "required"=>true),
		"rdateclassified" => 
			array("datatype"=>"datetime", "label"=>"Classified", "sort"=>"DESC", 'displaymodifiers'=>'dateformat:"j M Y H:i"', "required"=>true),
		"dateresolved" => 
			array("datatype"=>"datetime", "label"=>"Resolved", "sort"=>"DESC", 'displaymodifiers'=>'dateformat:"j M Y H:i"', "required"=>true),
		"supportpkg" => 
			array("datatype"=>"enum", "prompt"=>"Support package", "label"=>"Support package", "required"=>true, "displaycallback"=>array("Model", "displaycallback_importance")),
		"charge" => 
			array("datatype"=>"float", "length"=>4, "label"=>"Charge", "prompt"=>"Charge (&pound;)", 'displaymodifiers'=>'financial', "helptext"=>"Enter a charge for this support request, if applicable.  No charges are applicable for 'Usage advice' for the first 60 days after launch; or for 'Reported faults' within a valid support contract"),
		"invoicenum" => 
			array("datatype"=>"text", "length"=>20, "prompt"=>"Invoice number", "label"=>"Invoice", "helptext"=>"Once the client has been invoiced, enter the invoice number here; it will be displayed on the support request so the client can match up the charges"),
		"numoccurences" => 
			array("datatype"=>"integer", "length"=>2, "label"=>"Occurences"),
		"datelastoccurence" => 
			array("datatype"=>"datetime", "label"=>"Last occured", 'displaymodifiers'=>'timepast:timepast:"j M Y H:i"', "required"=>true),
		"filename" => 
			array("datatype"=>"text", "length"=>250, "prompt"=>"Attachment", "label"=>"File", "displaycallback"=>array("Model", "displaycallback_filelink"), "inputtype"=>"upload", "imagecapture"=>true, "uploaddest"=>"/lib/tmp/supportfiles"),
		"comment" => 
			array("datatype"=>"text", "inputtype"=>"textarea", "prompt"=>"Comment", "helptext"=>"Type a comment to add to the support request."),
		"isdevonly" => 
			array("datatype"=>"boolean", "prompt"=>"Display comment to developers only"),
		"groupselector" =>
			array("label"=>"", "displaycallback"=>array("Model", "displaycallback_groupselector")),
		"projectcode" =>
			array("label"=>"Project", "inputtype"=>"select", "helptext"=>"You have control or access to multiple projects. To help us identify the project your support request applies to, please select the Assanka project code.", "required"=>true),
		"notificationopts" =>
			array("label"=>"Notifications", "options"=>array("assigned"=>"Notify assigned engineer", "author"=>"Notify author", "contacts"=>"Notify subscribed support contacts"), "default"=>array("assigned", "author", "contacts"), "inputtype"=>"check"),
		"kbtitle" =>
			array("label"=>"Title", "helptext"=>"Enter the title of the knowledge base article or file.", "required"=>true, "highlightfilter"=>"title"),
		"kbtext" =>
			array("label"=>"Content", "datatype"=>"richtext", "helptext"=>"Enter the text of this knowledge base article.", "required"=>true, "inputtype"=>"richtext"),
		"kbtype" =>
			array("label"=>"Type", "datatype"=>"enum", "options"=>array("file"=>"File", "article"=>"Article")),
		"kbreqid" =>
			array("label"=>"Support request ID", "datatype"=>"integer"),
		"kbclientproject" =>
			array("label"=>"Client/Project", "inputtype"=>"text", "helptext"=>"Enter the client or projct code, if applicable (use dashes)", "validation"=>"/^\w{4}(\-\d{4}-\d{3})?$/"),
	);

	public static $filters = array(
		"kbtitle" =>
			array("label"=>"Title", "type"=>"text", "sqlcallback"=>array("Model", "filtercallback_kbtitle")),
		"kbclientproject" =>
			array("label"=>"Project", "type"=>"text", "sqlcallback"=>array("Model", "filtercallback_kbcientproject")),
		"keyword" =>
			array("label"=>"Keyword", "type"=>"text", "sqlcallback"=>array("Model", "filtercallback_keyword")),
		"client" =>
			array("label"=>"Client", "type"=>"text", "sqlcallback"=>array("Model", "filtercallback_client")),
		"status" =>
			array("label"=>"Status", "type"=>"check", "default"=>array("new","assigned","scheduled for release","deferred","awaiting client","completed"), "sqlcallback"=>array("Model", "filtercallback_status")),
		"class" =>
			array("label"=>"Classification", "type"=>"check", "default"=>array("A","B","C","D","E","CR","OBS","CFGC"), "sqlcallback"=>array("Model", "filtercallback_classification")),
		"additional" =>
			array("label"=>"Additional options", "type"=>"check", "options"=>array("mine"=>"Assigned to me only"), "sqlcallback"=>array("Model", "filtercallback_additional"))
	);

	public static function displaycallback_classification($fieldref, $data) {
		return (isset(Model::$opts["classes"][$data[$fieldref]])) ? Model::$opts["classes"][$data[$fieldref]] : "";
	}
	public static function displaycallback_abbrevclassification($fieldref, $data) {
		return (isset(Model::$opts["classes"][$data[$fieldref]])) ? '<acronym title="'.Model::$opts["classes"][$data[$fieldref]].'">'.$data[$fieldref].'</acronym>' : "";
	}
	public static function displaycallback_importance($fieldref, $data) {
		return (isset(Model::$opts["importances"][$data[$fieldref]])) ? ucfirst(Model::$opts["importances"][$data[$fieldref]]) : $data[$fieldref];
	}
	public static function displaycallback_assignedto($fieldref, $data) {
		return $data[$fieldref];
	}
	public static function displaycallback_status($fieldref, $data) {
		if (($data[$fieldref]=="assigned" || $data[$fieldref]=="scheduled for release") and isset($data["assignedto"])) {
			$initials = strtoupper(preg_replace("/\b(\w)[\w]+\s*/", "$1", $data["assignedto"]));
			$data[$fieldref] = ($data["assignedto"]==$_SESSION["support"]["username"]) ? '<strong style="color:red">'.ucfirst($data[$fieldref]).' (me)</strong>' : ucfirst($data[$fieldref]).(($initials)?' ('.$initials.')':'');
		} elseif ($data[$fieldref] == 'new') {
			$data[$fieldref] = "<b>New</b>";
		} elseif ($data[$fieldref] == 'awaiting client' and empty($_SESSION["support"]["isdeveloperonanyproject"])) {
			$data[$fieldref] = '<strong style="color: red">Awaiting client</strong>';
		}
		return ucfirst($data[$fieldref]);
	}
	public static function displaycallback_importanceicons($fieldref, $data) {
		if (in_array($data[$fieldref], array("major", "critical"))) return "<img src=\"lib/img/".$data[$fieldref].".gif\" style=\"width: 11px; height: 11px; position: relative; top: 1px;\" />";
		else return "";
	}
	public static function displaycallback_reqlink($fieldref, $data) {
		$data[$fieldref] = htmlentities($data[$fieldref], ENT_COMPAT, "UTF-8", false);
		$data[$fieldref] = (isset($data["status"]) and $data["status"]=="new")?'<b>'.$data[$fieldref].'</b>':$data[$fieldref];
		return '<a href="requests/view?id='.$data["id"].'">'.$data[$fieldref].'</a>';
	}
	public static function displaycallback_kblink($fieldref, $data) {
		return '<a href="knowledge/view?id='.$data["id"].'">'.htmlentities($data[$fieldref], ENT_COMPAT, "UTF-8", false).'</a>';
	}
	public static function displaycallback_groupselector($fieldref, $data) {
		return '<input type="checkbox" name="requests[]" value="'.$data["id"].'" />';
	}
	public static function displaycallback_filelink($fieldref, $data) {
		return ($data["filename"]?("<a href=\"getfile?type=request&id=".$data["id"]."\">".$data["filename"]."</a>"):"No attachments");
	}
}
Model::$fields["emailnotifylevel"]["options"] = &Model::$opts["importances"];
Model::$fields["smsnotifylevel"]["options"] = &Model::$opts["importances"];
Model::$fields["status"]["options"] = &Model::$opts["statii"];
Model::$fields["class"]["options"] = &Model::$opts["classes"];
Model::$fields["importance"]["options"] = &Model::$opts["importances"];
Model::$fields["resolution"]["options"] = &Model::$opts["resolutions"];
Model::$fields["supportpkg"]["options"] = &Model::$opts["supportpkgs"];
Model::$fields["supportpkg"]["options"] = &Model::$opts["supportpkgs"];
if (isset($page) and is_object($page) and method_exists($page, 'getroot')) {
	Model::$fields["kbtext"]["richtextcss"] = $page->getroot()."/".$page->getAppNamespace()."/lib/css/kb_fck.css";
	Model::$fields["kbtext"]["richtextstyles"] = $page->getroot()."/".$page->getAppNamespace()."/lib/xml/kbfckstyles.xml";
}
Model::$filters["status"]["options"] = &Model::$opts["statii"];
Model::$filters["class"]["options"] = &Model::$opts["classes"];
?>