<?php
/*
########################################################
Support area of admin console - view a specific support
request.

Upgraded to admin v3 4th April 2006 by RB.

20/11/2004
Andrew Betts
Assanka Ltd
########################################################
*/

require_once("../appglobal");




// This file is deprecated, and should no longer be in use.  This error designed to catch cases where it is still being used.
trigger_error('Deprecated code in use', E_USER_DEPRECATED);



// If a hash has been provided rather than an id, look up the ID
if (preg_match("/^[0-9A-F]{8}$/i", $_GET["id"])) {
	$id = $sdb->querysingle("SELECT requestid FROM grouphashes WHERE code='".$_GET["id"]."'");
	$_GET["id"] = ($id) ? $id : false;
}

// Check that a proper ID has been supplied
if (!is_numeric($_GET["id"])) $page->redirectAndAlert("Could not find that support request");

// Run the query to pull out data required
$qry = "SELECT requests.*, u1.displayname AS author, u2.displayname AS assignedto
	FROM requests LEFT JOIN users u1 ON (u1.id = requests.authoruserid) LEFT JOIN users u2 ON (u2.id = requests.assignedtouserid)
	WHERE requests.id=".$_GET["id"];
if ($_SESSION["support"]["permissions"]) $qry .= " AND (".$_SESSION["support"]["permissions"].")";

$request = $sdb->queryRow($qry);
if (!$request) {

	// Check for redirects
	$newid = $sdb->querySingle("SELECT newrequestid FROM redirects WHERE oldrequestid=".$_GET["id"]);
	if ($newid) {
		$page->redirectAndAlert("Request #".$_GET["id"]." has been merged with request #".$newid.". Please update your bookmarks.", "warning", "requests/view?id=".$newid);
	}

	$page->redirectAndAlert("Could not find that support request");
}
$request["datecreated"] = Common::convertHumanTime($request["datecreated"]);
$request["dateclassified"] = Common::convertHumanTime($request["dateclassified"]);
$request["dateresolved"] = Common::convertHumanTime($request["dateresolved"]);
$request["projectcode"] = $request["client"]."-".$request["project"];
if (empty($request["assignedto"])) $request["assignedto"] = "<span style=\"color: #777;\">n/a</span>";

// Retrieve list of hash codes and count debug logs
$sdb->query("SELECT code FROM grouphashes WHERE requestid=".$_GET["id"]);
$hashcodes = array();
if ($sdb->getNumResults()) while ($row = $sdb->getRow()) $hashcodes[] = $row["code"];
$request["debugcount"] = $sdb->querySingle("SELECT COUNT(*) FROM debuglogs WHERE requestid=".$_GET["id"]);
$request["Debug logs"] = ($request["debugcount"]==0)?"No logs available" : "<a href=\"javascript:viewdebug(".$request["id"].")\">".$request["debugcount"]." log".(($request["debugcount"]!=1)?"s":"").((sizeof($hashcodes))?" for ".((sizeof($hashcodes)==1)?$hashcodes[0]:sizeof($hashcodes)." variants")."</a>":"");

// Retrieve the list of hostnames and occurrences for each
$occresults = $sdb->query("SELECT count(id) AS num, hostname FROM occurences WHERE requestid=".$_GET["id"]." GROUP BY hostname ORDER BY num DESC, hostname DESC");
$occhtml = '<option value="total">'.$request["numoccurences"].' (Total)</option>';
if ($sdb->getNumResults($occresults)) $occhtml .= '<optgroup label="Breakdown">';
while ($occrow = $sdb->getRow($occresults)) {
	$hostnamelabel = $occrow["hostname"]?$occrow["hostname"]:"Unknown";
	$occhtml .= '<option value="'.$hostnamelabel.'">'.$occrow["num"]." - ".$hostnamelabel.'</option>';
}
if ($sdb->getNumResults($occresults)) $occhtml .= '</optgroup>';
$request["numoccurencesdropdown"] = '<select id="occurrenceslist">'.$occhtml.'</select>';

// Check whether the user has the authority to edit this request
$isdeveloper = $sdb->querySingle("SELECT isdeveloper FROM permissions WHERE userid=".$_SESSION["support"]["userid"]." AND ((client='".$request["client"]."' AND project='".$request["project"]."') OR (client='".$request["client"]."' AND project IS NULL) OR (client IS NULL AND project IS NULL)) ORDER BY (project IS NOT NULL AND client IS NOT NULL) DESC, (client IS NOT NULL) DESC LIMIT 1");

// Add response and resolution times
if (!$request["classification"]) {
	$request["Response time"] = "<span style=\"color: #777;\">".getWorkingTimeDifference($request["datecreated"], time(), $request["supportpkg"], $request["importance"])."<img src=\"lib/img/".(isTimeInSupportHours(time(), $request["supportpkg"], $request["importance"])?"timedot.gif":"timepause.gif")."\" alt=\"This request is awaiting attention\" /></span>";
} else {
	$request["Response time"] = getWorkingTimeDifference($request["datecreated"], $request["dateclassified"], $request["supportpkg"], $request["importance"]);
}

// Display the resolution or a message as appropriate
if ($request["classification"] && !$request["resolution"]) {
	$request["Resolution time"] = "<span style=\"color: #777;\">".getWorkingTimeDifference($request["datecreated"], time(), $request["supportpkg"], $request["importance"])."<img src=\"lib/img/" . (isTimeInSupportHours(time(), $request["supportpkg"], $request["importance"])?"timedot.gif":"timepause.gif") . "\" alt=\"This request has not yet been resolved\" /></span>";
} else if ($request["classification"]) {
	$request["Resolution time"] = getWorkingTimeDifference($request["datecreated"], $request["dateresolved"], $request["supportpkg"], $request["importance"]);
}

// Set up the basic column list for request information
$colList = new columnlistv2();
$colList->setNumCols(1);
$colList->addColTitle('Request details');
$colList->addField("id", array("label"=>"Support request ID"));
$colList->addField("importance", Model::$fields["importance"]);
$colList->addField("author", Model::$fields["author"]);
$colList->addField("projectcode", Model::$fields["projectcode"]);
$colList->addField("datecreated", Model::$fields["datecreated_full"]);
if (($request["debugcount"] or $request["numoccurences"]) and $isdeveloper) {
	$colList->addColBreak();
	$colList->addColTitle('Debug information');
	if ($request["debugcount"]) {
		$colList->addField("Debug logs");
	}
	if ($request["numoccurences"]) {
		$colList->addField("numoccurencesdropdown", Model::$fields["numoccurences"]);
		$colList->addField("datelastoccurence", Model::$fields["datelastoccurence"]);
	}
}
$colList->addColBreak();
$colList->addColTitle('Response details');
$colList->addField("classification", Model::$fields["class"]);
$colList->addField("status", Model::$fields["status"]);
if (($request["status"] == "completed") || ($request["status"] == "closed")) {
	$colList->addField("resolution", Model::$fields["resolution"]);
} else {
	$colList->addField("assignedto", Model::$fields["assignedto"]);
}
$colList->addField("supportpkg", Model::$fields["supportpkg"]);
if ($request["filename"]) $colList->addField("filename", Model::$fields["filename"]);
$colList->addField("Response time");
if ($request["classification"]) $colList->addField("Resolution time");
$colList->addData($request);


// Pull out any comments
$datelastoccunix = Common::convertHumanTime($request['datelastoccurence']);
$sdb->query("SELECT * FROM comments WHERE requestid=".$request["id"]." ORDER BY datecreated DESC");
if ($sdb->getNumResults()) {
	$ml = new messagelist();
	$ml->setTitle("Comment History");
	while($row = $sdb->getRow()) {
		if ($isdeveloper and $datelastoccunix and $datelastoccunix > Common::convertHumanTime($row['datecreated'])) {
			$msg = $ml->addMsg("System", $datelastoccunix, "Last occurence of error");
			$msg->useElapsedTime($request["datecreated"]);
			$msg->setClass('lastocc');
			$datelastoccunix = 0;
		}
		$row["datecreated"] = Common::convertHumanTime($row["datecreated"]);
		if ($row["isdeveloperonly"] and !$isdeveloper) {
			$row["comment"] = "[em]An update containing developer-only content was made.[/em]";
			$row["filename"] = false;
		}
		$msg = $ml->addMsg($row["author"], $row["datecreated"], $row["comment"]);
		$msg->useElapsedTime($request["datecreated"]);
		if ($row["filename"]) $msg->attachFile($row["filename"], "getfile?type=comment&id=".$row["id"]);
		if ($row["isdeveloperonly"] and $isdeveloper) $msg->setClass("devonly");
	}
	if ($isdeveloper and $datelastoccunix) {
		$msg = $ml->addMsg("System", $datelastoccunix, "Last occurence of error: ".date('j M Y H:i', $datelastoccunix));
		$msg->useElapsedTime($request["datecreated"]);
		$msg->setClass('lastocc');
	}
}

// Add info message containing any linked knowledge items
$sdb->query("SELECT id,title FROM knowledge WHERE supportrequestid=".$_GET["id"]);
if ($numknowledgeitems = $sdb->getNumResults()) {
	$kitems = "";
	for ($j=0;$krow = $sdb->getRow();$j++) {
		$kitems .= "<a href=\"knowledge/view?id=".$krow["id"]."\">".$krow["title"]."</a>, ";
	}
	$kitems = substr($kitems,0,strlen($kitems)-2);
	$page->alert("This request has ".$j." linked knowledge item".($numknowledgeitems > 1?"s:<br />":":&nbsp;&nbsp;&nbsp;").$kitems);
}

// Add page actions
$page->addAction("Add an update", "requests/edit?id=".$_GET["id"]);
if ($isdeveloper and sizeof($hashcodes)) $page->addAction("Detach error codes", array("href"=>"requests/detach", "data"=>array("id"=>$_GET["id"]), "return confirm('Future occurences with the same backtrace will generate a new request.  Are you sure you want to remove the log codes from this support request?')"));

// Construct the page elements and output the page
$page->set($request);
if (in_array($request["status"], array("new", "assigned"))) $page->set("ongoing", 1);
$page->set("details", $colList->output());
if (!empty($request["numoccurences"])) $page->set("occgraphlink", $request["id"]);
if (isset($ml)) $page->set("comments", $ml->output());
$page->set("itemfeedpath", urlencode(base64_encode("2:".$_SESSION["support"]["userid"].":".$request["id"])));
$page->add("rightnav", $page->render("../html/view-help"));
$page->set("contenttitle", $request["title"]);
$page->set("title", "View a Support Request");
$page->add("content", $page->render("../html/view-request"));
$page->outputHTML();
?>
