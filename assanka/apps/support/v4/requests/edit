<?php
require_once("../appglobal");




// This file is deprecated, and should no longer be in use.  This error designed to catch cases where it is still being used.
trigger_error('Deprecated code in use', E_USER_DEPRECATED);




if (empty($_REQUEST["id"])) $page->redirectAndAlert("Could not find that support request");

// Load the request
$request = $sdb->queryRow("SELECT r.*, u1.displayname AS assignedto, u2.displayname AS author from requests r
	LEFT JOIN users u1 ON (r.assignedtouserid = u1.id)
	LEFT JOIN users u2 ON (r.authoruserid = u2.id) WHERE r.id = {id|nokey}", $_REQUEST);
if (!$request) $page->redirectAndAlert("Request not found");
$request["datecreated"] = Common::convertHumanTime($request["datecreated"]);
$request["dateclassified"] = Common::convertHumanTime($request["dateclassified"]);
$request["dateresolved"] = Common::convertHumanTime($request["dateresolved"]);
$request["projectcode"] = $request["client"]."-".$request["project"];

// Get permission levels before proceeding, to check whether the user has the authority to edit
$isdeveloper = $sdb->querySingle("SELECT isdeveloper FROM permissions WHERE userid=".$_SESSION["support"]["userid"]." AND ((client='".$request["client"]."' AND project='".$request["project"]."') OR (client='".$request["client"]."' AND project IS NULL) OR (client IS NULL AND project IS NULL)) ORDER BY (project IS NOT NULL AND client IS NOT NULL) DESC, (client IS NOT NULL) DESC LIMIT 1");

// Load existing details from the database
$author = $sdb->queryRow("SELECT * FROM users WHERE id=".$request["authoruserid"]);

// Create a list of projects
$projectopts = $sdb->queryLookupTable("SELECT CONCAT(client,'-',project) as k, CONCAT(client,'-',project) as v FROM projects ". (($_SESSION["support"]["permissions"]) ? "WHERE ".$_SESSION["support"]["permissions"]:"") . " ORDER BY client ASC, project ASC");
Model::$fields["projectcode"]["options"] = $projectopts;

// Create a list of developers
$developers = $sdb->queryLookupTable("SELECT u.displayname as k, u.displayname as v FROM permissions p INNER JOIN users u ON p.userid=u.id WHERE (ISNULL(p.client) OR (p.client = '".$request["client"]."' AND (p.project = '".$request["project"]."' OR ISNULL(p.project)))) AND isdeveloper=1 GROUP BY u.id");
Model::$fields["assignedto"]["options"] = $developers;

// Contruct the form
$form = new inputform("supportedit");

$group1 = new simplefieldgroup(&$form);
$group1->addField("id", Model::$fields["id"]);
if ($isdeveloper) {
	$group1->addField("previousclassification", array("inputtype"=>"hidden", "value"=>$request["classification"]));
	$group1->addField("previousstatus", array("inputtype"=>"hidden", "value"=>$request["status"]));
	$group1->addField("previousresolution", array("inputtype"=>"hidden", "value"=>$request["resolution"]));
	$group1->addField("previousassignedto", array("inputtype"=>"hidden", "value"=>$request["assignedtouserid"]));
	$group1->addField("previouscharge", array("inputtype"=>"hidden", "value"=>$request["charge"]));
	$group1->addField("previousinvoicenum", array("inputtype"=>"hidden", "value"=>$request["invoicenum"]));
	$group1->addField("title", Model::$fields["title"]);
	$group1->addField("projectcode", Model::$fields["projectcode"]);
	$group1->addField("importance", Model::$fields["importance"]);
	$group1->addField("classification", Model::$fields["class"]);
	$group1->addField("status", Model::$fields["status"]);
	$group1->addField("resolution", Model::$fields["resolution"]);
	$group1->addField("assignedto", Model::$fields["assignedto"]);
	$group1->addField("charge", Model::$fields["charge"]);
	$group1->addField("invoicenum", Model::$fields["invoicenum"]);
}
$group1->addField("comment", Model::$fields["comment"]);
if ($isdeveloper) $group1->addField("isdevonly", Model::$fields["isdevonly"]);
if (function_exists("curl_init")) $group1->addField("commentfile", Model::$fields["filename"]);

// Don't tick 'notify subscribed support contacts' by default if the request
// was raised by the system (see support request #6264)

// If the request was raised by the system, don't tick "notify subscribed support contacts"
// and don't include a "Notify author" option
if ($author["displayname"] == "System") {

	// Remove default "notify subscribed support contacts"
	$newdefaults = array();
	foreach (Model::$fields["notificationopts"]["default"] as $optkey => $optval) {
		if ($optval != "contacts" ) $newdefaults[$optkey] = $optval;
	}
	Model::$fields["notificationopts"]["default"] = $newdefaults;

	// Remove option to notify request author
	unset(Model::$fields["notificationopts"]["options"]["author"]);
}

if ($isdeveloper) {
	$group1->addField("isknowledge", array("inputtype"=>"check", "prompt"=>"Create new linked knowledge item"));
	$group1->addField("notificationopts", Model::$fields["notificationopts"]);
}

// Add action buttons
$page->addAction("Save", array("javascript"=>"document.frmsupportedit.submit()"));
$page->addAction("Cancel", "requests/view?id=".$request["id"]);

// Check for submitted information, and check any using the core validation
if ($_POST) {

	$group1->addData($_POST);
	$data = $group1->getSubmittedData();

	if ($isdeveloper) {
		if (($data["status"] == "assigned") && !$data["assignedto"]) {
			$errmsg = "You set the status to assigned, but did not actually assign the support request to anyone";
			$group1->setInputInvalid("assignedto",$errmsg);
			$group1->setInputInvalid("status",$errmsg);
		} elseif (!$data["charge"] && $data["invoicenum"]) {
			$errmsg = "You have entered an invoice number but there are no charges to invoice";
			$group1->setInputInvalid("invoicenum",$errmsg);
		} elseif ($data["isknowledge"] and !$data["comment"]) {
			$errmsg = "If you are creating a new knowledge item, you must enter a comment";
			$group1->setInputInvalid("knowledge",$errmsg);
			$group1->setInputInvalid("comment",$errmsg);
		} elseif (($data["status"] == "completed" || $data["status"] == "closed") && !$data["resolution"]) {
			$page->alert("You set the status to ".$data["status"].", but didn't enter a resolution - the request will still accrue time", "warning");
		}
	}

	if ($group1->checkValidity()) {

		$assignedUserId = empty($data['assignedto']) ? null : $sdb->querySingle('SELECT id FROM users WHERE displayname = {assignedto|nokey}', $data);

		// The input is valid...
		// Construct an "automatically generated" comment
		$autocomment = array();
		if ($isdeveloper) {
			if (!in_array($data["status"], array("completed","closed"))) $data["resolution"] = "";
			if ($data["title"] != $request["title"]) $autocomment[] = "Renamed from '".$request["title"]."' to '".$data["title"]."'";
			if ($data["importance"] != $request["importance"]) $autocomment[] = "Changed importance from '".$request["importance"]."' to '".$data["importance"]."'";
			if ($data["classification"] != $request["classification"]) $autocomment[] = "Classified this request as ".(($data["classification"] == "")?"Unclassified":Model::displaycallback_classification("classification", $data));
			if ($data["status"] != $request["status"]) $autocomment[] = "Status changed to ".$data["status"];
			if ($assignedUserId != $request["assignedtouserid"]) $autocomment[] = (($data["assignedto"])?"Assigned to ".$data["assignedto"]:"Unassigned");
			if ($data["resolution"] != $request["resolution"]) $autocomment[] = (($data["resolution"] == "")?"The resolution for this request was removed":"Request marked as ".$data["resolution"]);
			if (is_numeric($data["charge"]) and $data["charge"] != $request["charge"]) $autocomment[] = ($request["charge"])?"Adjusted the charge to £".number_format(floatval($data["charge"])):"Applied a charge of £".number_format(floatval($data["charge"]));
			if ($data["isknowledge"]) $autocomment[] = "A new knowledge item was created";
			if (!$data["invoicenum"] && $request["invoicenum"]) $autocomment[] = "The invoice number was removed";
			else if ($data["invoicenum"] != $request["invoicenum"]) $autocomment[] = ($request["invoicenum"])?"Invoice number changed to ".$data["invoicenum"]:"Invoiced charges accrued on this request with reference ".$data["invoicenum"];
		}
		if (!empty($data["commentfile"])) {
			$autocomment[] = "Added file attachment";
		}
		$comment = $emailcomment = $data["comment"];
		if (sizeof($autocomment)) {
			$comment .= (($comment)?"\n\n":"")."[em]".implode(".  ", $autocomment).".[/em]";
			$emailcomment .= (($comment)?"\n\n":"").implode(".  ", $autocomment).".";
		}

		// Move any uploaded files to supportutils.assanka.com
		$uploadedfilenewname = "";
		if (!empty($data["commentfile"])) {
			$errmsg = "";
			if(!($uploadedfilenewname = moveFileToNewServer($data["commentfile"]))) {
				$page->alert("Could not attach file to support request - error moving the uploaded file to permanent storage","warning");
				unset($data["commentfile"]);
			}
		}

		// Commit data to tables
		if ($isdeveloper) {
			list($data["client"], $data["project"]) = explode("-", $data["projectcode"], 2);
			$project = $sdb->queryRow("SELECT * FROM projects WHERE {client} AND {project}", $data);
			$data = array_merge($request, $data);
			$sdb->query("UPDATE requests SET {title}, {importance}, classification=".(($data["classification"])?"'".$sdb->sqlenc($data["classification"])."'":"NULL").", {status}, assignedtouserid=".($assignedUserId ? $assignedUserId:"NULL").", {resolution}, {charge}, {invoicenum}, {client}, {project}, datemodified=NOW() WHERE {id}", $data);

			if (!in_array($request["status"], array("completed", "closed")) && in_array($data["status"], array("completed", "closed"))) {
				$sdb->query("UPDATE requests SET dateresolved=NOW() WHERE {id}", $data);
			}
			if (($request["status"] != "closed") && ($data["status"] == "closed")) {
				$sdb->query("UPDATE requests SET dateclosed=NOW() WHERE {id}", $data);
			}
			if (($data["classification"] != "") && !$request["dateclassified"]) {
				$sdb->query("UPDATE requests set dateclassified=NOW() WHERE {id}", $data);
			}
			$request = $sdb->queryRow("SELECT * FROM requests WHERE {id}", $request);
		} else {
			$project = $sdb->queryRow("SELECT * FROM projects WHERE {client} AND {project}", $request);
			$data["notificationopts"] = Model::$fields["notificationopts"]["default"];
			$data["importance"] = $request["importance"];
			$data["title"] = $request["title"];
			
			// If the request is in a deferred, completed or closed state, reopen the request and
			// reassign it to the last developer who commented on the request.
			if ($request["status"] == "completed" || $request["status"] == "closed" || $request["status"] == "deferred" || $request["status"] == "awaiting client") {
				
				// Select the last developer who commented on this item
				$developer = $sdb->queryRow("SELECT u.id, u.displayname AS name FROM comments c INNER JOIN requests r ON c.requestid=r.id INNER JOIN permissions p ON (r.client=p.client OR p.client IS NULL) AND (p.project IS NULL OR r.project=p.project) AND p.isdeveloper=1 INNER JOIN users u ON p.userid=u.id AND c.authoruserid=u.id WHERE c.requestid=".$request["id"]." ORDER BY c.datecreated DESC LIMIT 1");
				if ($developer and $comment) {
					$comment .= "\n\n[em]This support request has automatically been reassigned to ".$developer["name"].".[/em]";
					$emailcomment .= "\n\nThis support request has automatically been reassigned to ".$developer["name"].".";
					$sdb->query("UPDATE requests SET status='assigned', assignedtouserid=".$developer["id"].", datemodified=NOW(), dateclosed=NULL, resolution=NULL WHERE id=".$request["id"]);
				}
			}
			$sdb->query("UPDATE requests SET datemodified=NOW() WHERE id=".$request["id"]);
		}
		if ($comment) {
			if (empty($data["isdevonly"])) $data["isdevonly"] = 0;
			$sdb->query("INSERT INTO comments SET requestid=".$request["id"].", authoruserid='".$sdb->sqlenc($_SESSION["support"]["userid"])."', author='".$sdb->sqlenc($_SESSION["support"]["username"])."', comment='".$sdb->sqlenc($comment)."', datecreated=NOW(), filename='".$sdb->sqlenc($uploadedfilenewname)."', isdeveloperonly=".$data["isdevonly"]);
		}
		if (!empty($data["isknowledge"])) {
			$kcomment = "<p>".preg_replace("/<br \/>[\r\n\s]*<br \/>/si","</p><p>",nl2br($data["comment"]))."</p>";
			$sdb->query("INSERT INTO knowledge SET userid=".$_SESSION["support"]["userid"].",author='".$db->sqlenc($_SESSION["support"]["username"])."', supportrequestid=".$_REQUEST["id"].", title='".$sdb->sqlenc($_POST["title"]). "', textcontent='".$sdb->sqlenc($kcomment). "', modified=NOW(), client='" .$sdb->sqlenc(substr($_POST["projectcode"], 0, 4)). "', project='".$sdb->sqlenc(substr($_POST["projectcode"], 5))."'");
		}

		/* Generate lists of SMS and Email alert recipients */

		$mailrecips = array();
		$smsrecips = array();
		$levels = array('trivial'=>0,'minor'=>1,'normal'=>2,'major'=>3,'critical'=>4);

		// Contacts
		if (in_array("contacts", $data["notificationopts"])) {
			$qry = "SELECT u.email, u.mobile, u.smsnotifylevel, u.emailnotifylevel, IF(p.isdeveloper=1,1,0) as isdeveloper FROM users u INNER JOIN permissions p ON u.id=p.userid WHERE ((client IS NULL and project IS NULL) OR (client='".$project["client"]."' AND project is NULL) OR (client='".$project["client"]."' AND project='".$project["project"]."'))";
			if ($data["isdevonly"]) $qry .= " AND isdeveloper=1";
			$sdb->query($qry);
			while ($user = $sdb->getRow()) {
				if ($levels[$user["emailnotifylevel"]] <= $levels[$data["importance"]] and $user["email"]) {
					if ($user["isdeveloper"]) $mailrecips["developers"][$user["email"]] = true;
					else $mailrecips["general"][$user["email"]] = true;
				}
				if ($levels[$user["smsnotifylevel"]] <= $levels[$data["importance"]] and $user["mobile"]) $smsrecips[$user["mobile"]] = "UPDATE ";
			}
		}

		// Author
		if (in_array("author", $data["notificationopts"]) and !$data["isdevonly"]) {
			if ($levels[$author["emailnotifylevel"]] <= $levels[$data["importance"]] and $author["email"]) {
				$authorisdeveloper = $sdb->querySingle("SELECT isdeveloper FROM permissions WHERE userid=".$author["id"]." AND ((client='".$request["client"]."' AND project='".$request["project"]."') OR (client='".$request["client"]."' AND project IS NULL) OR (client IS NULL AND project IS NULL)) ORDER BY (project IS NOT NULL AND client IS NOT NULL) DESC, (client IS NOT NULL) DESC LIMIT 1");
				if ($authorisdeveloper) $mailrecips["developers"][$author["email"]] = true;
				else $mailrecips["general"][$author["email"]] = true;
			}
			if (!empty($author["smsnotifylevel"]) and $levels[$author["smsnotifylevel"]] <= $levels[$data["importance"]] and !empty($author["mobile"])) $smsrecips[$author["mobile"]] = "UPDATE ";
		}

		// Assigned engineer
		if ($request["assignedtouserid"] and in_array("assigned", $data["notificationopts"])) {
			$engineer = $sdb->queryRow("SELECT * FROM users WHERE id=".$request["assignedtouserid"]);
			if ($levels[$engineer["emailnotifylevel"]] <= $levels[$data["importance"]] and $engineer["email"]) $mailrecips["assigned"][$engineer["email"]] = true;
			if (isset($mailrecips["developers"][$engineer["email"]])) {
				unset($mailrecips["developers"][$engineer["email"]]);
			}
			if ($levels[$engineer["smsnotifylevel"]] <= $levels[$data["importance"]] and $engineer["mobile"]) $smsrecips[$engineer["mobile"]] = "ASSIGNED ";
		}
		


		/* Actually send email and SMS alerts */
		
		// Clean up variables for template use
		if ($request["assignedtouserid"] == "0") $request["assignedtouserid"] = false;

		// Set up email and SMS alerts ready to send to people
		$page->set($request);
		$page->set("action", "updated");
		$page->set("comment", $emailcomment);
		$page->set("requestid", $request["id"]);
		$page->set("trackingfeed", urlencode(base64_encode("2:".$_SESSION["support"]["userid"].":".$request["id"])));
		$smstext = $page->render("../html/sms-comment");


		// Send email notifications
		// (three different types: assigned engineer, other engineers and general support users)
		if (!empty($mailrecips)) foreach($mailrecips as $reciptype => $addresses) {
			$recips = false;
			$email = new Email();
			if ($reciptype == "assigned") {
				$email->setSubject("Assigned: ".str_replace("\n", "", str_replace("\r", "", substr($data["title"], 0, 80).((strlen($data["title"]) > 80)?"...":""))));
			} else {
				$email->setSubject("Update: ".str_replace("\n", "", str_replace("\r", "", substr($data["title"], 0, 80).((strlen($data["title"]) > 80)?"...":""))));
			}
			$email->setFrom("Assanka Support <noreply@assanka.net>");
			$email->addRecipient("Support contact <noreply@assanka.net>");
			foreach ($addresses as $addr => $booleantrue) {
				if ($addr != $_SESSION["support"]["useremail"]) {
					$email->addBCC($addr);
					$recips = true;
				}			
			}
			if ($reciptype == "general") {
				$page->set("supporturl", $project["site"]);
			} else {
				$page->set("supporturl", "http://helpdesk.assanka.com");
			}
			$emailtext = $page->render("../html/email-comment");
			$email->setText($emailtext);
			if ($recips) $email->send();
		}

		// Send SMS notifications
		if (!empty($smsrecips)) {
			foreach ($smsrecips as $dest => $prefix) {
				if ($dest != $_SESSION["support"]["usermobile"]) {
					//$page->alert("Sent SMS to ".$dest);
					$sms = new SMS();
					$sms->addRecipient($dest);
					$sms->setFlashMode();
					$sms->send($smstext);
				}
			}
		}
	
		// Set an appropriate status message
		$page->redirectAndAlert("This support request has been updated successfully.", "done", "requests/view?id=".$request["id"]);

	// If the input is invalid, redisplay the form with core highlighting
	} else {

		// Add an error message
		$page->alert("You did not complete the form correctly.  Please review the fields marked below, and ensure you have read the help text available in the panel on the right.", "error");
	}
} else {

	$group1->addData($request);
	
	// Add a default informational alert
	$page->alert("Updating '".$request["title"]."'.  When you have finished updating the support request, click the Save button on the right.");
}

// Add response and resolution times
if (!$request["classification"]) {
	$request["Response time"] = "<span style=\"color: #777;\">".getWorkingTimeDifference($request["datecreated"], time(), $request["supportpkg"], $request["importance"])."<img src=\"lib/img/".(isTimeInSupportHours(time(), $request["supportpkg"], $request["importance"])?"timedot.gif":"timepause.gif")."\" alt=\"This request is awaiting attention\" /></span>";
} else {
	$request["Response time"] = getWorkingTimeDifference($request["datecreated"], $request["dateclassified"], $request["supportpkg"], $request["importance"]);
}

// Display the resolution or a message as appropriate
if ($request["classification"] && !$request["resolution"]) {
	$request["Resolution time"] = "<span style=\"color: #777;\">".getWorkingTimeDifference($request["datecreated"], time(), $request["supportpkg"], $request["importance"])."<img src=\"lib/img/" . (isTimeInSupportHours(time(), $request["supportpkg"], $request["importance"])?"timedot.gif":"timepause.gif") . "\" alt=\"This request has not yet been resolved\" /></span>";
} else if ($request["classification"]) {
	$request["Resolution time"] = getWorkingTimeDifference($request["datecreated"], $request["dateresolved"], $request["supportpkg"], $request["importance"]);
}

// Set up the basic column list for request information
$colList = new columnlist();
$colList->setNumCols(2);
$colList->setTitle("Support request information");
$colList->addField("importance", Model::$fields["importance"]);
$colList->addField("author", Model::$fields["author"]);
$colList->addField("projectcode", Model::$fields["projectcode"]);
$colList->addField("datecreated", Model::$fields["datecreated_full"]);
$colList->addField("id", array("label"=>"Support request ID"));
$colList->addField("classification", Model::$fields["class"]);
$colList->addField("status", Model::$fields["status"]);
if (($request["status"] == "completed") || ($request["status"] == "closed")) {
	$colList->addField("resolution", Model::$fields["resolution"]);
} else {
	$colList->addField("assignedto", Model::$fields["assignedto"]);
}
$colList->addField("supportpkg", Model::$fields["supportpkg"]);
if ($request["filename"]) $colList->addField("filename", Model::$fields["filename"]);
$colList->addField("Response time");
if ($request["classification"]) $colList->addField("Resolution time");
$colList->addData($request);

// Pull out any comments
$sdb->query("SELECT * FROM comments WHERE requestid=".$request["id"].((!$isdeveloper)?" AND isdeveloperonly=0":"")." ORDER BY datecreated DESC");
if ($sdb->getNumResults()) {
	$ml = new messagelist();
	$ml->setTitle("Comment History");
	while($row = $sdb->getRow()) {
		$row["datecreated"] = Common::convertHumanTime($row["datecreated"]);
		$msg = $ml->addMsg($row["author"], $row["datecreated"], $row["comment"]);
		$msg->useElapsedTime($request["datecreated"]);
		if ($row["filename"]) $msg->attachFile($row["filename"], "getfile?type=comment&id=".$row["id"]);
		if ($row["isdeveloperonly"]) $msg->setClass("devonly");
	}
}

// Output the form and help panel to the page
$page->set($request);
$page->set("username", $_SESSION["support"]["username"]);
$page->add($form->getOutput());
if ($isdeveloper) $page->add("content", $page->render("../html/edit-autocomment"));
$page->add("content", $colList->output());
$page->add("content", $page->renderFromString("<div class=\"supportmsg\"><!--@description|encode_html,autolink,breakonsymb,nl2br--></div>"));
if (isset($ml)) $page->add("content", $ml->output());

$page->set("title", "Update a Support Request");
$page->outputHTML();
?>
