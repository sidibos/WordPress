<?php
/**
 * An abstract class for oAuth clients
 *
 * @codingstandard ftlabs-phpcs
 * @copyright The Financial Times Limited [All Rights Reserved]
 */

// Dependencies
require_once $_SERVER['CORE_PATH'].'/helpers/errorhandler/v5/exception';
require_once $_SERVER['CORE_PATH'].'/helpers/http/HTTPRequest';

abstract class OAuthClientV1 {


	/**
	 * Authorises the user using OAuth
	 *
	 * @return mixed
	 */
	abstract public function authorise();

	/**
	 * The authorise function for Americans
	 *
	 * @return mixed
	 */
	public function authorize() { return $this->authorise(); }

	/**
	 * Sets the user's OAuth Credentials
	 *
	 * @param String $access_token The OAuth access token
	 * @param String $token_secret The OAuth access token secret (optional in some forms of OAuth)
	 * @return void
	 */
	abstract function setCredentials($access_token, $token_secret);

	/**
	 * Modifies the Request Parameters, for example adding an access token
	 *
	 * @param Array &$reqparams The Request Parameters
	 * @protected
	 * @return void
	 */
	protected function _modifyreqparams(&$reqparams) {
	}
	/**
	 * Returns an Authorization Header to use for a request
	 *
	 * @param String $method    The HTTP method the request uses
	 * @param String $url       The URL of the request (not including any query parameters)
	 * @param Array  $reqparams The request parameters
	 * @return String|null The Authorization Header
	 *
	 */
	protected function _getAuthorizationHeader($method, $url, $reqparams=array()) {
		return null;
	}

	/**
	 * Makes a request to the url given, authenticating using OAuth
	 *
	 * @param String $method      The HTTP method to use
	 * @param String $url         The URL to request (not including any query parameters)
	 * @param Array  $reqparams   The request parameters
	 * @param String $content     The post content to send (defaults to using request parameters as form data)
	 * @param String $contenttype The type of post content being sent
	 *
	 * @return HTTPResponse
	 */
	public function makereq($method, $url, $reqparams=array(), $content=null, $contenttype=null) {
		$this->_modifyreqparams($reqparams);
		if ($method == 'GET' or $method == 'DELETE') {
			$http = new HTTPRequest($url.'?'.http_build_query($reqparams));
		} else {
			$http = new HTTPRequest($url);

			// If content is set, then use it (along with contenttype)
			if ($content) {
				if ($contenttype) $http->setHeader('Content-Type', $contenttype);
				$http->setRequestBody($content);

			// Otherwise assume reqparams is form data
			} else {
				$http->setPostEncoding('form');
				$http->set($reqparams);
			}
		}
		$http->setHeader("Authorization", $this->_getAuthorizationHeader($method, $url, $reqparams));
		$http->setHeader("User-Agent", 'Assanka OAuth Client 1.0');
		$http->setMethod($method);
		return $http->send();
	}
}

if (!class_exists('OAuthClient') and function_exists('class_alias')) class_alias('OAuthClientV1', 'OAuthClient');
