<?php

// This error trigger added 25 Nov 2011
trigger_error('Datatable v1 is deprecated', E_USER_DEPRECATED);

class DatatableV1 {
	
	var $tablename;
	var $columns;
	var $filters;
	var $data;
	var $footer;
	var $sortby;
	var $sortdir;
	var $rowsperpage;
	var $objname;
	var $sortable;
	var $title;
	var $haschildrows = false;
	var $CHILD = 1;
	var $PARENT = 2;
	var $LEFTALIGN = false;
	var $RIGHTALIGN = true;
	var $AUTOWIDTH = false;
	var $NOHREF = false;
	var $NOFILTER = false;

	function __construct($name, $objname="record", $rpp=50, $title=false, $sortable=true) {
		$this->tablename = $name;
		$this->title = $title;
		$this->rowsperpage = (is_numeric($rpp))?$rpp:50;
		$this->objname = $objname;
		$this->columns = array();
		$this->filters = array();
		$this->data = array();
		$this->footer = array();
		$this->sortable = $sortable;
	}

	function addColumn($name, $label, $defaultsortorder="ASC", $ralign=false, $width=false, $hrefprefix=false, $highlightfilter=false) {
		if (array_key_exists($name, $this->columns)) {
			trigger_error("Column '".$name."' already exists, ignoring this column.", E_USER_NOTICE);
			return false;
		} else {
			$this->columns[$name] = array();
			$this->columns[$name]["label"] = $label;
			$this->columns[$name]["defaultsortorder"] = ($defaultsortorder=="DESC")?"DESC":"ASC";
			$this->columns[$name]["ralign"] = ($ralign)?true:false;
			$this->columns[$name]["width"] = (is_numeric($width))?$width:false;
			$this->columns[$name]["hrefprefix"] = ($hrefprefix)?$hrefprefix:false;
			$this->columns[$name]["highlightfilter"] = ($highlightfilter)?$highlightfilter:false;
			return true;
		}
	}

	function getNumcolumns() {
		return (sizeof($this->columns)+1);
	}

	function addFilter($name, $label, $type, $accesskey=false, $optionlist=false, $defaultvalue=false, $allowblank=true) {
		if (array_key_exists($name, $this->filters)) {
			trigger_error("Filter '".$name."' already exists, ignoring this filter.", E_USER_NOTICE);
			return false;
		} else {
			$this->filters[$name] = array();
			$this->filters[$name]["label"] = $label;
			$this->filters[$name]["type"] = (in_array($type, array("exacttext", "partialtext", "lowdate", "highdate", "check", "radio", "select")))?$type:"partialtext";
			$this->filters[$name]["accesskey"] = ($accesskey)?$accesskey:false;
			$this->filters[$name]["options"] = (in_array($type, array("check", "radio", "select")) and is_array($optionlist))?$optionlist:false;
			$this->filters[$name]["allowblank"] = $allowblank;
			if (isset($_REQUEST["fil_set"]) and ($_REQUEST["fil_".$name] or $_REQUEST["fil_".$name] === "0")) {

				// TODO:AB:20060104: Validation based on filter type
				$this->filters[$name]["value"] = $_REQUEST["fil_".$name];
				$_SESSION["tablefilters"][$this->tablename][$name] = $_REQUEST["fil_".$name];
			} elseif (isset($_REQUEST["fil_set"])) {
				$this->filters[$name]["value"] = false;
				$_SESSION["tablefilters"][$this->tablename][$name] = false;
			} elseif (isset($_SESSION["tablefilters"][$this->tablename][$name])) {
				$this->filters[$name]["value"] = $_SESSION["tablefilters"][$this->tablename][$name];
			} elseif ($defaultvalue) {
				$this->filters[$name]["value"] = $defaultvalue;
				$_SESSION["tablefilters"][$this->tablename][$name] = $defaultvalue;
			} elseif (!$allowblank and is_array($this->filters[$name]["options"]) and sizeof($this->filters[$name]["options"])) {
				$this->filters[$name]["value"] = key($this->filters[$name]["options"]);
			} else {
				$this->filters[$name]["value"] = false;
			}
			return true;
		}
	}

	function setSort($defaultcol) {
		if (!empty($_GET["s"])) {
			$colname = $_GET["s"];
			if ($colname == $_SESSION["tablesorts"][$this->tablename]["column"]) {
				if ($_SESSION["tablesorts"][$this->tablename]["dir"] == "ASC") {
					$this->sortdir = "DESC";
				} else {
					$this->sortdir = "ASC";
				}
				$this->sortby = $colname;
			} else if ($this->columns[$colname]) {
				$this->sortby = $colname;
				$this->sortdir = $this->columns[$colname]["defaultsortorder"];
			} else {
				$this->sortby = $defaultcol;
				$this->sortdir = $this->columns[$defaultcol]["defaultsortorder"];
			}
		} elseif (isset($_SESSION["tablesorts"][$this->tablename])) {
			$this->sortby = $_SESSION["tablesorts"][$this->tablename]["column"];
			$this->sortdir = $_SESSION["tablesorts"][$this->tablename]["dir"];
		} else {
			$this->sortby = $defaultcol;
			$this->sortdir = $this->columns[$defaultcol]["defaultsortorder"];
		}
		$_SESSION["tablesorts"][$this->tablename]["column"] = $this->sortby;
		$_SESSION["tablesorts"][$this->tablename]["dir"] = $this->sortdir;
	}

	function getFiltervalue($filter) {
		if (array_key_exists($filter, $this->filters)) {
			return $_SESSION["tablefilters"][$this->tablename][$filter];
		} else {
			trigger_error("Cannot return value of filter '".$filter."': filter not defined", E_USER_NOTICE);
			return false;
		}
	}

	function setFilter($filter, $value) {
		if (array_key_exists($filter, $this->filters)) {
			$_SESSION["tablefilters"][$this->tablename][$filter] = $value;
			$this->filters[$filter]["value"] = $value;
		}
	}

	function addFooter($values) {
		$this->footer=array();
		foreach ($values as $col=>$value) {
			if (array_key_exists($col, $this->columns) or $col=="_level") {
				$this->footer[$col] = $value;
			}
		}
	}

	function addRow($values, $hrefs=false, $childrows=false) {
		$nextrow = sizeof($this->data);
		foreach ($values as $col=>$value) {
			if (array_key_exists($col, $this->columns) or $col=="_level") {
				$this->data[$nextrow][$col]["value"] = $value;
				if (!empty($hrefs[$col])) $this->data[$nextrow][$col]["href"] = $hrefs[$col];
			}
		}
		if ($childrows && is_array($childrows) && sizeof($childrows) > 0) {
			if (!$this->haschildrows) $this->haschildrows = true;
			$this->data[$nextrow]["_level"]["value"] = $this->PARENT;
			foreach ($childrows as $rowdata) {
				$rowdata["_level"] = $this->CHILD;
				$this->addRow($rowdata);
			}
		}
	}

	function setCellClass($colname, $classname) {
		$this->data[sizeof($this->data)-1][$colname]["class"] = $classname;
	}

	function clear() {
		$this->data = array();
		$this->footer = array();
		$this->haschildrows = false;
	}

	function outputTable() {
		if ($this->title) echo "<h4>".$this->title."</h4>";
		?>
		<table class="data" id="<?=$this->tablename?>">
		<thead>
		<tr>
		<?php
		if ($this->haschildrows) {
			echo "<th style=\"width: 20px; padding: 2px 0 2px 0;\"></th>";
		}
		foreach($this->columns as $colname=>$params) {
			echo "<th";
			if ($this->sortby == $colname) echo " class=\"sort".strtolower($this->sortdir)."\"";
			if ($params["width"]) echo " style=\"width: ".$params["width"]."px\"";
			echo ">";
			if ($this->sortable) echo "<a href=\"".end(explode("/", $_SERVER["PHP_SELF"]))."?s=".$colname."\">";
			echo $params["label"];
			if ($this->sortable) echo "</a>";
			echo "</th>\n";
		}
		?>
		</tr>
		</thead>
		<tbody>
		<?php
		if (!sizeof($this->data)) {
			?>
			<tr>
			<td colspan="<?=sizeof($this->columns)?>"><em>There are no <?=(substr($this->objname, strlen($this->objname)-1, 1)=="y")?substr($this->objname, 0, strlen($this->objname)-1)."ies":$this->objname.((substr($this->objname, strlen($this->objname)-1, 1)=="s")?"":"s")?> that match your criteria</em></td>
			</tr>
			<?php
		} else {
			$cols = array_keys($this->columns);
			foreach($this->data as $row) {
				echo "<tr".((!empty($row["_level"]) and $row["_level"]["value"] == $this->CHILD)?" class=\"childrow\"":"").">";
				if ($this->haschildrows) {
					echo "<td class=\"childtd\">".((!empty($row["_level"]) and $row["_level"]["value"] == $this->PARENT)?"<img src=\"/corestatic/imgs/treeview/nolines_plus.gif\" style=\"width: 18px; height: 18px;\" onclick=\"datatableToggleChildRows(this)\" />":"")."</td>";
				}
				foreach ($cols as $col) {
					if ($this->columns[$col]["highlightfilter"]) {
						if (array_key_exists($this->columns[$col]["highlightfilter"], $this->filters)) {
							$srhstr = $this->filters[$this->columns[$col]["highlightfilter"]]["value"];
							if (is_string($srhstr)) {
								$row[$col]["value"] = preg_replace("/(".preg_quote($srhstr, "/").")(?=[^>]*(<|$))/i", "<span class=\"srhhl\">$1</span>", $row[$col]["value"]);
							}
						}
					}
					echo "<td";
					if ($this->columns[$col]["ralign"]) echo " style=\"text-align: right\"";
					if (isset($row[$col]["class"])) echo " class=\"".$row[$col]["class"]."\"";
					echo ">";
					if (isset($row[$col]["href"])) echo "<a href=\"".$this->columns[$col]["hrefprefix"].$row[$col]["href"]."\">";
					echo $row[$col]["value"];
					if (isset($row[$col]["href"])) echo "</a>";
					echo "</td>";
				}
				echo "</tr>\n";
			}
		}
		?>
		</tbody>
		<?php
		if (sizeof($this->footer)) {
			echo "<tfoot><tr>";
			foreach ($cols as $col) {
				echo "<td";
				if ($this->columns[$col]["ralign"]) echo " style=\"text-align: right\"";
				echo ">";
				if (isset($this->footer[$col])) echo $this->footer[$col];
				echo "</td>";
			}
			echo "</tr></tfoot>";
		}
		?>
		</table>
		<?php
		$ret = ob_get_contents();
		ob_clean();
		return $ret;
	}

	function outputFilterform() {
		if (sizeof($this->filters)) {
			?>
			<h3>Apply Filters</h3>
			<form method="get" action="<?=end(explode("/", $_SERVER["PHP_SELF"]))?>" class="filters" name="filters">
			<input type="hidden" name="fil_set" value="1" />
			<?php
			foreach($this->filters as $name=>$params) {
				switch($params["type"]) {
					case "partialtext":
					case "exacttext":
					case "lowdate":
					case "highdate":
						?><label for="fil_<?=$name?>" accesskey="<?=$params["accesskey"]?>"><?=preg_replace("/(".$params["accesskey"].")/i", "<u>$1</u>", $params["label"], 1)?>:</label><br /><input type="text" name="fil_<?=$name?>" id="fil_<?=$name?>" value="<?=$params["value"]?>" /><br /><br /><?php
						break;
					case "radio":
						// TODO:AB:20060104
						break;
					case "check":
						?><?=$params["label"]?>:<br /><?php
						$selectedopts = $this->getFiltervalue($name);
						if (!$selectedopts) $selectedopts = array();
						$i=1;
						foreach($params["options"] as $key=>$option) {
							?><input type="checkbox" name="fil_<?=$name?>[]" id="fil_<?=$name?>_<?=++$i?>" value="<?=$key?>"<?=(in_array($key, $selectedopts))?" checked=\"checked\"":""?> /> <label for="fil_<?=$name?>_<?=$i?>"><?=$option?></label><br /><?php
						}
						echo "<br />";
						break;
					case "select":
						?><label for="fil_<?=$name?>" accesskey="<?=$params["accesskey"]?>"><?=preg_replace("/(".$params["accesskey"].")/i", "<u>$1</u>", $params["label"], 1)?>:</label><br />
						<select name="fil_<?=$name?>" id="fil_<?=$name?>">
						<?=(($params["allowblank"])?"<option value=\"\"></option>":"")?>
						<?php
						$selectedopt = $this->getFiltervalue($name);
						foreach($params["options"] as $key=>$option) {
							?><option value="<?=$key?>"<?=($key==$selectedopt)?" selected=\"selected\"":""?>><?=$option?></option><?php
						}
						echo "</select><br /><br />";
						break;
				}
			}
			?>
			<input type="submit" value="Update" class="button" />
			</form>
			<?php
			$ret = ob_get_contents();
			ob_clean();
			return $ret;
		} else {
			return "";
		}
	}

	function outputCsv($delim=",", $escape="\\", $lineend="\n", $enclose="\"") {
		$opdata = array();
		foreach($this->columns as $colname=>$params) {
			$opdata[0][] = $params["label"];
		}
		if (sizeof($this->data)) {
			$cols = array_keys($this->columns);
			foreach($this->data as $row) {
				$thisrow = array();
				foreach ($cols as $col) $thisrow[] = $row[$col]["value"];
				$opdata[] = $thisrow;
			}
		}
		$op = "";
		foreach($opdata as $row) {
			foreach($row as $colkey=>$col) $row[$colkey] = $enclose.addslashes($col).$enclose;
			$op .= join($delim, $row).$lineend;
		}
		return $op;
	}

	// Attempts to parse "human"-format dates; converts british date order to
	// american, and then strtotimes it.
	function convertHumanTime($date) {
		$days = '0?[1-9]|[12][0-9]|3[01]';
		$months = '0?[1-9]|1[0-2]';
		$year = '\d{2}|\d{4}';
		$non_alpha = '[^0-9a-zA-Z]+';
		$date = preg_replace( "/^\s*($days)($non_alpha)($months)($non_alpha)($year)/", "$3/$1/$5", $date);
		$date = strtotime($date);
		if ($date === -1) return false;
		else return $date;
	}
}

if (!class_exists('Datatable')) class_alias('DatatableV1', 'Datatable');
