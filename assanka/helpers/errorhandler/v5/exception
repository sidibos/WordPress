<?php
/**
 * An exception with context support
 *
 * This Exception class adds support for providing arbitrary data as the fourth argument when throwing the exception.  This arbitrary data is then public within the exception object and also available to read using getContext.
 *
 * @copyright The Financial Times Limited [All Rights Reserved]
 */

class AssankaException extends Exception {

	public $context;

	/**
	 * Throw an exception
	 *
	 * @param   string    $message   Description of exception (avoid including dynamic data in your description)
	 * @param   integer   $code      Numeric code for the exception (Assanka standard practice is to set this to zero or to not specify it)
	 * @param   Exception $previous  Previous exception.  Reference to an exception that has already been thrown, and caught, and which has in turn triggered this exception.
	 * @param   mixed     $context   Any data (normally an array) which should be attached to this exception as debug.  get_defined_vars() works well here.
	 * @return  AssankaException
	 */
    public function __construct($message = null, $code = 0, Exception $previous = null, $context=null) {
		parent::__construct($message, $code, $previous);
		$this->context = $context;
	}

	/**
	 * Get the exception context
	 *
	 * @return  mixed   The context that was supplied when the exception was thrown
	 */
    public function getContext() {
		return $this->context;
	}
}

class InvalidCallException extends AssankaException {}
class UserInputException extends AssankaException {}
class InternalException extends AssankaException {}
class AuthException extends AssankaException {}
