<?php
/**
 * Authentication helper: HTTP Digest Authentication
 *
 * Authenticates users via HTTP Digest Auth, stores
 * credentials and rights in a MySQL table, and
 * maintains session information about logged-in
 * users
 *
 * This differs from htmldigest in that it transmits the 
 * password without using any Javascript, and so relies
 * upon SSL.
 *
 * Note: if in future we need to package multiple rights
 * into roles to make admin simpler, replace user
 * interface for rights management with two interfaces,
 * one to define roles in terms of a collection of rights,
 * and one to allocate roles to users.  At the application
 * level the code checks only rights, not roles - roles
 * are used only as a way of conveniently allocating large
 * numbers of rights.
 *
 * Rights are like heirarchical namespaces, eg.
 * events.view.event
 *
 * @copyright The Financial Times Limited [All Rights Reserved]
 */
require_once("auth");

class AuthHTML extends Auth {

	protected $templatedir, $templateparent, $logouttemplateparent, $dbtable;
	
	public function __construct (&$db, $realm, $dbtable, $templatedir = false, $uidtype="email") {
		parent::Auth();
		$this->db = $db;
		$this->realm = $realm;
		$this->dbtable = $dbtable;
		$this->templatedir = ($templatedir)?$templatedir:(__FILE__."/../html");
		$this->templateparent = "parent";
		$this->logouttemplateparent = "parent";
		$this->uidtype = $uidtype;
	}

	public function authenticate() {
		if (empty($this->authenticateduser)) {
			if (empty($_SESSION["auth"]["cache"])) {
				$this->processLogin();
			} else {
				$this->authenticateduser = $_SESSION["auth"]["cache"][$this->uidtype];
				$this->rights = $_SESSION["auth"]["cache"]["rights"];
				$this->user = $_SESSION["auth"]["cache"]["details"];
			}
		}
	}

	public function checkRights($requiredrights=false, $redirectonbad=true) {
		if (empty($this->authenticateduser)) {
			$this->showLogin();
		}
		if (!$requiredrights) return true;
		$isvalid = $this->hasRights($requiredrights, $this->rights);
		if (!$isvalid and $redirectonbad) {
			$this->showInsufficientRights($requiredrights);
		} else {
			return $isvalid;
		}
	}

	public function getDetailsForUser($identifier) {
		$dets = $this->db->querySingle("SELECT details FROM `".$this->dbtable."` WHERE ".$this->uidtype."=%s ", $identifier);

		return ($dets) ? unserialize($dets) : false;
	}

	public function setTemplateDirectory($templatedir) {
		if (!is_string($templatedir)) return false;
		$this->templatedir = $templatedir;
	}

	public function setTemplateParent($templateparent) {
		if (!is_string($templateparent)) return false;
		$this->templateparent = $templateparent;
	}

	public function setLogoutTemplateParent($logouttemplateparent) {
		if (!is_string($logouttemplateparent)) return false;
		$this->logouttemplateparent = $logouttemplateparent;
	}

	protected function template($filename, $pagetitle = "Authentication", $wrappertemplate = false) {
		$op = file_get_contents($this->templatedir."/".$filename.".html");
		if (empty($wrappertemplate)) $wrappertemplate = $this->templateparent;
		if (!empty($wrappertemplate)) {
			$op = str_replace(array("<!--@authentication-->", "<!--@pagetitle-->"), array($op, $pagetitle), file_get_contents($this->templatedir."/".$wrappertemplate.".html"));
		}
		return $op;
	}

	protected function showLogin() {
		header("HTTP/1.1 200 OK");
		header("Content-type: text/html");
		echo $this->template("login", "Login required");
		exit;
	}

	protected function showLoginStageTwo($identifier) {
		if (empty($identifier)) trigger_error("No email address / username supplied", E_USER_ERROR);

		// Get password and split it into letters
		$password = $this->db->querySingle("SELECT password FROM `".$this->dbtable."` WHERE ".$this->uidtype."=%s", $identifier);
		
		if (empty($password)) {
			header("HTTP/1.1 200 OK");
			header("Content-type: text/html");
			echo $this->template("emailnotfound", "Email address / username not found");
			exit;
		}
		if (strlen($password) < 5) {
			header("HTTP/1.1 200 OK");
			header("Content-type: text/html");
			echo $this->template("passwordtooshort", "Password too short");
			exit;
		}
		$_SESSION["auth"]["login"][$this->uidtype] = $identifier;

		
		// Show form asking for the three random letters from the password
		header("HTTP/1.1 200 OK");
		header("Content-type: text/html");
		$op = $this->template("loginstagetwo", "Login required (stage 2)");
		echo $op;
		exit;
	}

	protected function showLogout() {
		header("HTTP/1.1 200 OK");
		header("Content-type: text/html");
		echo $this->template("logout", "Logout complete", $this->logouttemplateparent);
		exit;
	}

	protected function processLogin() {
		if (empty($_POST["password"])) return false;
		
		if (empty($_POST[$this->uidtype])) return false;

		// Hash the password:
		$_POST["password"] = md5($_POST[$this->uidtype].":".$this->realm.":".$_POST["password"]);

		
		// Log the user in if submitted data correct
		if ($user = $this->db->queryRow("SELECT details, rights FROM `".$this->dbtable."` WHERE ".$this->uidtype."=%s AND password=%s", $_POST[$this->uidtype], $_POST['password'])) {
	
			
			$this->authenticateduser = $_POST[$this->uidtype];

			$_SESSION["auth"]["cache"][$this->uidtype] = $_POST[$this->uidtype];

			$_SESSION["auth"]["cache"]["details"] = $this->user = unserialize($user["details"]);
			$_SESSION["auth"]["cache"]["rights"] = $this->rights = explode(",", $user["rights"]);
			unset($_SESSION["auth"]["login"]);

			return true;
		} else {

			// Display login failed
			header("HTTP/1.1 200 OK");
			header("Content-type: text/html");
			echo $this->template("loginfailed", "Login failed");
			exit;
		}
	}

	public function setPassword($identifier, $password) {
		$pword = md5($identifier.":".$this->realm.":".$password);
		$this->db->query("REPLACE INTO `".$this->dbtable."` SET ".$this->uidtype."=%s, password=%s", $identifier, $pword);
	}

	public function setDetails($data, $email=false) {
		if (empty($email)) {
			if (!$this->authenticateduser) {
				trigger_error("Cannot set details of current user - no user is logged in", E_USER_ERROR);
			}
			$email = $this->authenticateduser;
		}
		$params[$this->uidtype]=$email;
		$params["details"] = serialize($data);
		$this->db->query("UPDATE `".$this->dbtable."` SET details=%s WHERE ".$this->uidtype."=%s", $params["details"], $params[$this->uidtype]);

		if ($email==$this->authenticateduser) $_SESSION["auth"]["cache"]["details"] = $data;
	}

	public function grantRight($right, $email=false) {
		$params = array();
		if (!$email) {
			if (!$this->authenticateduser) trigger_error("Cannot grant rights to current user - no user is logged in", E_USER_ERROR);
			$email = $this->authenticateduser;
			if (!in_array($right, $this->rights)) {
				$this->rights[] = $right;
				$params["email"] = $email;
				$params["rights"] = join(",", $this->rights);
			}
		} else {
			$existingrights = explode(",", $this->db->querySingle("SELECT rights FROM `".$this->dbtable."` WHERE '".$this->uidtype."'='".$this->db->sqlenc($username)."'"));

			if (!in_array($right, $existingrights)) {
				$existingrights[] = $right;
				$params["email"] = $email;
				$params["rights"] = join(",", $existingrights);
			}
		}
		if (!empty($params)) $this->db->query("UPDATE `".$this->dbtable."` SET rights=%s WHERE ".$this->uidtype."=%s", $params['rights'],$params['email'] );
	}

	public function revokeRight($right, $email=false) {
		if (!$email) {
			if (!$this->authenticateduser) {
				trigger_error("Cannot revoke rights of current user - no user is logged in", E_USER_ERROR);
			}
			$email = $this->authenticateduser;
			if (in_array($right, $this->rights)) {
				array_splice($this->rights, array_search($right, $this->rights), 1);
				$params["email"] = $email;
				$params["rights"] = join(",", $this->rights);
			}
		} else {
			$existingrights = explode(",", $this->db->querySingle("SELECT rights FROM `".$this->dbtable."` WHERE ".$this->uidtype."='".$this->db->sqlenc($email)."'"));
			if (in_array($right, $existingrights)) {
				array_splice($existingrights, array_search($right, $existingrights), 1);
				$params["email"] = $email;
				$params["rights"] = join(",", $existingrights);
			}
		}
		if ($params) $this->db->query("UPDATE `".$this->dbtable."` SET rights=%s WHERE ".$this->uidtype."=%s", $params['rights'],$params['email']);
	}

	public function setRights($rights, $email=false) {
		if (!$email) {
			if (!$this->authenticateduser) {
				trigger_error("Cannot set rights of current user - no user is logged in", E_USER_ERROR);
			}
			$email = $this->authenticateduser;
			$params = array("email"=>$email, "rights"=>$rights);
			$this->rights = explode(",", $rights);
		} else {
			$params = array("email"=>$email, "rights"=>$rights);
		}
		$this->db->query("UPDATE `".$this->dbtable."` SET rights=% WHERE email=%s", $params['rights'],$params['email']);
	}
}



?>
