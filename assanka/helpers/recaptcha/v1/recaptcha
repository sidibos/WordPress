<?php
/**
 * This is a PHP library that handles calling reCAPTCHA.
 *
 * @codingstandard ftlabs-phpcs
 * @copyright The Financial Times Limited [All Rights Reserved]
 */

class RecaptchaAPIV1 {

	// The reCAPTCHA server URL
	const API_HOST = 'www.google.com';
	const API_PATH = '/recaptcha/api';

	// The reCAPTCHA Themes
	const RED = 'red';
	const WHITE = 'white';
	const BLACKGLASS = 'blackglass';
	const CLEAN = 'clean';
	const CUSTOM = 'custom';

	// Public and private key attributes - defaults are an Assanka global key
	private $pubkey = '6LeCnQgAAAAAAMciIcTeIQ1wo3UMcGfQbSUICFSw';
	private $privkey = '6LeCnQgAAAAAAPZ0MXMfhmQLiGpCZlmXnRvcDbxW';

	// RecaptchaOptions
	private $options;

	// Error message
	private $error;

	/**
	 * Class constructor
	 *
	 * @param string $pubkey  A public key for reCAPTCHA
	 * @param string $privkey A private key for reCAPTCHA
	 */
	function __construct($pubkey=false, $privkey=false) {
		if ($pubkey) $this->pubkey = $pubkey;
		if ($privkey) $this->privkey = $privkey;
		$this->options = array();
		$this->error = NULL;
	}

	/**
	 * Function to set the RecaptchaOptions array used in the API
	 * Options will not be unset once set
	 *
	 * @param array $options PHP array of options to pass through to reCAPTCHA
	 * @return void
	 */
	private function setOptions(array $options) {
		foreach ($options as $k=>$v) {
			$this->options[$k] = $v;
		}
	}

	/**
	 * Gets the challenge HTML (javascript and non-javascript version).
	 *
	 * @param string  $error   The error given by reCAPTCHA (optional, default is null)
	 * @param boolean $use_ssl Should the request be made over ssl? (optional, default is false)
	 * @param string  $theme   One of the themes supported by reCAPTCHA. Use one of the constants defined
	 * @param string  $lang    Any supported language code
	 * @return string The HTML to be embedded in the user's form.
	 */
	public function getHtml($error = NULL, $use_ssl = false, $theme = NULL, $lang=NULL) {

		if (empty($this->pubkey)) throw new RecaptchaException('Missing API key');

		if (isset($theme)) $this->setOptions(array('theme'=>$theme));
		if (isset($lang)) $this->setOptions(array('lang'=>$lang));

		$out = '';

		if (count($this->options)) {
			$out .= '<script type="text/javascript">var RecaptchaOptions = ' . json_encode($this->options). ';</script>';
		}
		$out .= '<script type="text/javascript" src="https://'. self::API_HOST . self::API_PATH .'/challenge?k='.$this->pubkey. (($error) ? '&amp;error='. $error : "") . '"></script><noscript><iframe src="https://'. self::API_HOST . self::API_PATH .'/noscript?k='.$this->pubkey . '" height="300" width="500" frameborder="0"></iframe><br /><textarea name="recaptcha_challenge_field" rows="3" cols="40"></textarea><input type="hidden" name="recaptcha_response_field" value="manual_challenge" /></noscript>';

		return $out;
	}

	/**
	 * Calls an HTTP POST function to verify if the user's guess was correct
	 *
	 * @param string $remoteip  The end user's IP address (usually $_SERVER['REMOTE_ADDR'])
	 * @param string $challenge The reCAPTCHA challenge string
	 * @param string $response  The response submitted by the user
	 * @return True if valid, false if not.
	 */
	public function isValid($remoteip, $challenge, $response) {
		if (empty($this->privkey)) throw new RecaptchaException('Missing API key');
		if (empty($remoteip)) throw new RecaptchaException('Missing remote IP');
		if (empty($challenge) or empty($response)) return false;

		// Verify the challenge with the ReCAPTCHA web service.  If the service is down, always return true to ensure our service does not go down as a result of technical problems with ReCAPTCHA.
		try {
			$response = $this->httpPost(self::API_HOST, self::API_PATH.'/verify', array('privatekey' => $this->privkey, 'remoteip' => $remoteip, 'challenge' => $challenge, 'response' => $response));
		} catch (RecaptchaException $e) {
			return true;
		}

		$answers = explode("\n", $response);
		return (trim($answers[0]) == 'true');
	}

	/**
	 * Submits an HTTP POST and returns the response from the remote server
	 *
	 * @param string $host Hostname of the server
	 * @param string $path URL path
	 * @param array  $data Data to send to the server as an associative array
	 * @param int    $port TCP port to which to send the request (default 80)
	 * @return string Body of the response
	 */
	private	function httpPost($host, $path, $data, $port = 80) {

		$req = http_build_query($data);

		$http_request  = "POST $path HTTP/1.0\r\n";
		$http_request .= "Host: $host\r\n";
		$http_request .= "Content-Type: application/x-www-form-urlencoded;\r\n";
		$http_request .= "Content-Length: " . strlen($req) . "\r\n";
		$http_request .= "User-Agent: reCAPTCHA/PHP\r\n";
		$http_request .= "\r\n";
		$http_request .= $req;

		$response = '';
		if (false == ($fs = @fsockopen($host, $port, $errno, $errstr, 2))) {
			throw new RecaptchaException('Could not open socket');
		}
		fwrite($fs, $http_request);

		while (!feof($fs)) $response .= fgets($fs, 1160); // One TCP-IP packet
		fclose($fs);
		$response = explode("\r\n\r\n", $response, 2);
		return $response[1];
	}
}

class RecaptchaException extends Exception{}

if (!class_exists('RecaptchaAPI')) class_alias('RecaptchaAPIV1', 'RecaptchaAPI');
