<?php
/**
 * Inferno API wrapper
 *
 * Allows PHP applications to interact with the Inferno API
 *
 * @codingstandard ftlabs-phpcs
 * @copyright The Financial Times Limited [All Rights Reserved]
 */

/**
 * This file is deprecated, and should no longer be in use.
 * The E_USER_NOTICE error designed to catch cases where it is still being used in production.
 *
 * An E_USER_NOTICE trigger was added here and kept in place for 2 weeks, after which it was determined that only Inferno Admin was using this helper.
 * This helper will be removed once Inferno has been retired.
 */

require_once $_SERVER['CORE_PATH']."/helpers/http/HTTPRequest";

class InfernoApiV2 {

	private $secret, $siteid, $user, $apiurl = "http://api.fueltheinferno.com/api2";
	private $operations;

	/**
	 * Construct an Inferno API connection object
	 *
	 * @param integer $siteid Inferno site ID
	 * @param string  $secret Secret for the site ID specified
	 * @return InfernoApiV2
	 */
	public function __construct($siteid=false, $secret=false) {
		if ($siteid) $this->setSite($siteid, $secret);
		$this->operations = array();
	}

	/**
	 * Set the URL of the Inferno API
	 *
	 * @param string $url URL to which to send API requests
	 * @return void
	 */
	public function setApiUrl($url) {
		$this->apiurl = $url;
	}

	/**
	 * Set the user as whom API requests will be made
	 *
	 * @param string $uuid   Your site's own reference for this user.
	 * @param string $name   Display name for the user
	 * @param string $email  User's email address
	 * @param string $avatar A URL where Inferno can find an image to represent the user.
	 * @return void
	 */
	public function setUser($uuid, $name=false, $email=false, $avatar=false) {
		if (!$uuid) throw new AssankaException('UUID must be supplied', 0, null, get_defined_vars());
		$this->user = array('uuid'=>$uuid);
		if ($name) $this->user['name'] = $name;
		if ($email) $this->user['email'] = $email;
		if ($avatar) $this->user['avatar'] = $avatar;
		$this->user = $this->sign($this->user);
	}

	/**
	 * Change site
	 *
	 * @param integer $siteid Inferno site ID
	 * @param string  $secret Secret for the site ID specified
	 * @return void
	 */
	public function setSite($siteid, $secret) {
		if (!is_numeric($siteid)) throw new AssankaException('Site ID must be numeric', 0, null, get_defined_vars());
		if (!$secret) throw new AssankaException('Secret must be supplied', 0, null, get_defined_vars());
		$this->secret = $secret;
		$this->siteid = $siteid;
	}

	/**
	 * Queue an API operation
	 *
	 * Allows queuing of user-defined API operations
	 *
	 * @param string $method Name of the API method to execute
	 * @param array  $args   Arguments to the operation
	 * @param bool   $signed Whether to sign the operation (default true)
	 * @return integer Reference for the operation
	 */
	public function addOperation($method, $args, $signed=true) {
		if ($signed) $args = $this->sign($args);
		$nextop = count($this->operations);
		$this->operations[$nextop] = array('method'=>$method, 'args'=>$args);
		return $nextop;
	}


	/**
	 * Execute all queued operations
	 *
	 * @return array Array of responses from Inferno, in the order the operations were queued
	 */
	public function execute() {
		if (!$this->operations) return array();
		$post = array("site"=>$this->siteid, "output"=>array("format"=>"json"), "operations"=>$this->operations);
		if ($this->user) $post['user'] = $this->sign($this->user);
		$this->operations = array();
		$http = new HTTPRequest;
		$http->setURL($this->apiurl);
		$http->setMethod('POST');
		$http->setRequestBody(json_encode($post));
		$http->setHeader('Content-Type', 'application/json');
		$resp = $http->send();
		if (is_object($resp)) return json_decode($resp->getBody(), true);
		throw new AssankaException('Unexpected response from Inferno web service', 0, null, get_defined_vars());
	}

	/**
	 * Sign a set of operation arguments
	 *
	 * Uses the secret to sign a set of arguments for an operation.  Returns the modified argument list, with added 'gentime' and 'sig' elements.
	 *
	 * @param array $args Arguments to the operation
	 * @return array Modified arguments to the operation
	 */
	private function sign($args) {
		$args['gentime'] = time();
		unset($args['sig']);
		ksort($args);
		$stringtosign = join($args);
		$args['sig'] = md5($stringtosign.$this->secret);
		return $args;
	}
}

if (!class_exists('InfernoApi')) class_alias('InfernoApiV2', 'InfernoApi');
