<?php
function yLabelFormat($aLabel) {
    return Common::dispBytes($aLabel);
}

require_once($_SERVER["DOCUMENT_ROOT"]."/lib/inc/global");
include ($_SERVER["CORE_PATH"]."/web/jpgraph/1.17beta2/jpgraph.php");
include ($_SERVER["CORE_PATH"]."/web/jpgraph/1.17beta2/jpgraph_bar.php");
if (substr($_SERVER["PATH_INFO"], 0, 5) == "/web/") include($_SERVER["CORE_PATH"]."/".substr($_SERVER["PATH_INFO"], 1, strrpos($_SERVER["PATH_INFO"], "/")-1)."/../statslib");
else include ("../statslib");

// Set up a date formats array for later use
$dateformats = array("months"=>"M Y", "weeks"=>"\w\e\e\k W, Y", "days"=>"d M Y");

$counts = processDayStats($_GET["end"], $_GET["res"]);
$ydata = array();
$ydata_proj = array();
$xdata = array();
foreach($counts as $label=>$numbers) {
	if (!$firstdate) $firstdate = date($dateformats[$_GET["res"]], $label);
	$lastdate = date($dateformats[$_GET["res"]], $label);
	$ydata[] = $numbers[$_GET["show"]];
	$xdata[] = date($dateformats[$_GET["res"]], $label);
	
	// If this time period is incomplete, project result based on data to date
	if ($_GET["res"] == "months" and ($label >= mktime(0,0,0,date("n"),1,date("Y")) and $label < mktime(0,0,0,date("n")+1,1,date("Y")))) {
			$ydata_proj[] = (($numbers[$_GET["show"]]/date("j"))*date("t")) - ($numbers[$_GET["show"]]);
	} else {
			$ydata_proj[] = 0;
	}
}

// Create the graph.
$graph = new Graph(650,350,"auto");	
$graph->SetScale("textlin");

$groupby = substr($_GET["res"], 0, -1);
if ($_GET["show"] == "hits") {
	$graph->title->Set("Hits between $firstdate and $lastdate grouped by ".$groupby);
} elseif ($_GET["show"] == "visits") {
	$graph->title->Set("Unique visits between $firstdate and $lastdate grouped by ".$groupby);
} elseif ($_GET["show"] == "pages") {
	$graph->title->Set("Unique pageviews between $firstdate and $lastdate grouped by ".$groupby);
} else {
	$graph->title->Set("Data transferred between $firstdate and $lastdate grouped by ".$groupby);
}

if ($_GET["res"] == "months") {
	$graph->xaxis->SetTextLabelInterval(3);
} else {
	$graph->xaxis->SetTextLabelInterval(5);
}

// Create the linear plot
$plot=new BarPlot($ydata);
$plot->SetFillGradient("#B00003","#F8A6A6",GRAD_WIDE_MIDVER);

// Create the projection plot
$plot2=new BarPlot($ydata_proj);
$plot2->SetFillGradient("#585858","#CFCFCF",GRAD_WIDE_MIDVER);
$plot2->SetWidth(0.65);

// Stack the plots
$plot3 = new AccBarPlot(array($plot,$plot2));
$plot3->SetWidth(0.65);

// Add the plot to the graph
$graph->Add($plot3);

$graph->xaxis->SetTickLabels($xdata);
$graph->img->SetMargin(60,3,35,40);
$graph->title->SetFont(FF_ARIAL, FS_NORMAL, 12);
$graph->SetFrame(true, "#F0F0F0");
$graph->SetMarginColor("#F0F0F0");
$graph->yaxis->scale->SetGrace(10,0);
$graph->yaxis->HideFirstTickLabel(true);
$graph->yaxis->SetFont(FF_ARIAL, FS_NORMAL, 8);
$graph->xaxis->SetFont(FF_ARIAL, FS_NORMAL, 8);
if ($_GET["show"] == "bandwidth") $graph->yaxis->SetLabelFormatCallback('yLabelFormat');

// Display the graph
$graph->Stroke();
?>
