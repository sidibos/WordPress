<?php
/*
######################################################################
$RCSfile$
$Revision$
$Date$
$Author$

PHPUnit test for the TemplateManager

(c) Copyright Assanka Limited [All rights reserved]
######################################################################
*/


// Include the template manager
require_once($_SERVER['CORE_PATH']."/helpers/templatemanager/v4/templatemanager");

class templateManagerv4Test extends PHPUnit_Framework_TestCase {

	/**
	 * Test very basic loading of the templatemanager and basic instantiation
	 */
	public function testLoad() {

		// Ensure template manager class is defined
		$this->assertTrue(class_exists("TemplateManager"));

		// Instantiate a template manager instance
		$test = new TemplateManager();
		$this->assertTrue(is_object($test));
	}

	/**
	 * Test template paths and returning of same
	 * @depends testLoad
	 */
	public function testTemplateDirectories() {
		$testdir = dirname(__FILE__);
		$this->assertTrue(file_exists($testdir.'/testtemplates/ultrabasic.html'));

		// Check setting a single invalid directory
		$e = false;
		try {
			$test = new TemplateManager('/invaliddirectorypathtest');
		} catch(Exception $e) {}
		$this->assertTrue(is_object($e));
		$this->assertStringStartsWith('Template directory not found', $e->getMessage());

		// Check setting a single valid directory
		$test = new TemplateManager($testdir.'/testtemplates');
		$this->assertTrue(is_object($test));
		$templatedirs = $test->getTemplateDirs();
		$this->assertTrue(is_array($templatedirs));
		$this->assertTrue(count($templatedirs) == 1);
		$this->assertEquals($testdir.'/testtemplates', $templatedirs[0]);
		unset($test);

		// Check setting a single valid directory strips trailing slashes correctly
		$test = new TemplateManager($testdir.'/testtemplates/');
		$this->assertTrue(is_object($test));
		$templatedirs = $test->getTemplateDirs();
		$this->assertTrue(is_array($templatedirs));
		$this->assertTrue(count($templatedirs) == 1);
		$this->assertEquals($testdir.'/testtemplates', $templatedirs[0]);
		unset($test);

		// Check that setting directories via array works
		$test = new TemplateManager(array('keyed'=>$testdir.'/testtemplates'));
		$this->assertTrue(is_object($test));
		$templatedirs = $test->getTemplateDirs();
		$this->assertTrue(is_array($templatedirs));
		$this->assertTrue(count($templatedirs) == 1);
		$this->assertEquals($testdir.'/testtemplates', $templatedirs[0]);
		unset($test);

		// Check that if multiple directories are set, invalid directories are caught
		$e = false;
		try {
			$test = new TemplateManager(array('/', $testdir, $testdir.'testtemplates', '/invaliddirectorypathtest'));
		} catch(Exception $e) {}
		$this->assertTrue(is_object($e));
		$this->assertStringStartsWith('Template directory not found', $e->getMessage());

		// Check that setting multiple directories works correctly, including stripping slashes
		$test = new TemplateManager(array($_SERVER['CORE_PATH'], $testdir, $testdir.'/testtemplates/'));
		$this->assertTrue(is_object($test));
		$templatedirs = $test->getTemplateDirs();
		$this->assertTrue(is_array($templatedirs));
		$this->assertTrue(count($templatedirs) == 3);
		$this->assertEquals(array($_SERVER['CORE_PATH'], $testdir, $testdir.'/testtemplates'), $templatedirs);
		unset($test);

		return $testdir;
	}

	/**
	 * Test that calling render with a template name will correctly search the supplied
	 * template directories and find the correct templates.
	 * @depends testTemplateDirectories
	 */
	public function testTemplateLocation($testdir) {

		// Instantiate a templatemanager to a known single path
		$tm = new TemplateManager($testdir.'/testtemplates');

		// Ensure that a known template can be found in that folder
		$renderedstring = $tm->render("ultrabasic");
		$this->assertEquals('ultra-basic template for basic tests', $renderedstring);

		// Check that an unknown template will correctly throw an error
		$e = false;
		try {
			$renderedstring = $tm->render("doesnotexist");
		} catch (Exception $e) {}
		$this->assertTrue(is_object($e));
		$this->assertEquals("Template 'doesnotexist' not found in any valid location", $e->getMessage());

		unset($tm);

		// Check that non-readable templates will cause errors
		umask(0);
		$tmplocation = sys_get_temp_dir().'/templatemanagertests/nonreadabletest.html';
		if (!file_exists(dirname($tmplocation))) mkdir(dirname($tmplocation), 0777, true);
		if (file_exists($tmplocation)) unlink($tmplocation);
		copy($testdir.'/testtemplates/ultrabasic.html', $tmplocation);
		chmod($tmplocation, 0000);
		$tm = new TemplateManager(dirname($tmplocation));
		$e = false;
		try {
			$renderedstring = $tm->render("nonreadabletest");
		} catch (Exception $e) {}
		$this->assertTrue(is_object($e));
		$this->assertEquals("Failure opening template file '".$tmplocation."'", $e->getMessage());
		unset($tm);
		unlink($tmplocation);

		// Instantiate a templatemanager to two known paths
		$tm = new TemplateManager(array($testdir.'/testtemplates/traversing/subdir1', $testdir.'/testtemplates/traversing/subdir2'));

		// Check that a template is found in the first known path, preferentially
		$renderedstring = $tm->render("grandchildtemplate");
		$this->assertEquals('grandchild template found successfully', $renderedstring);

		// Check that a template is found in the second known path
		$renderedstring = $tm->render("grandchild2template");
		$this->assertEquals('grandchild II template found successfully', $renderedstring);

		unset($tm);

		// Check that ascending of the tree is off by default
		$tm = new TemplateManager($testdir.'/testtemplates/traversing/subdir1/subsubdir1');
		$renderedstring = $tm->render("greatgrandchildtemplate");
		$this->assertEquals('great-grandchild template found successfully', $renderedstring);
		$e = false;
		try {
			$renderedstring = $tm->render("childfoldertemplate");
		} catch (Exception $e) {}
		$this->assertTrue(is_object($e));
		$this->assertEquals("Template 'childfoldertemplate' not found in any valid location", $e->getMessage());
		unset($tm);

		// Check that ascending of the tree can be switched on
		$tm = new TemplateManager($testdir.'/testtemplates/traversing/subdir1/subsubdir1', true);
		$renderedstring = $tm->render("greatgrandchildtemplate");
		$this->assertEquals('great-grandchild template found successfully', $renderedstring);
		$renderedstring = $tm->render("childfoldertemplate");
		$this->assertEquals('child folder template found successfully', $renderedstring);
		unset($tm);

		// Check that by default deeper folders are checked first
		$tm = new TemplateManager($testdir.'/testtemplates/traversing/subdir1/subsubdir1', true);
		$renderedstring = $tm->render("ultrabasic");
		$this->assertEquals('ultra-basic template for basic tests - in subdir', $renderedstring);
		unset($tm);

		// Check that if multiple folders are set, dir trees are ascended before second folder checks
		$tm = new TemplateManager(array($testdir.'/testtemplates/traversing/subdir1', $testdir.'/testtemplates/traversing/subdir1/subsubdir1'), true);
		$renderedstring = $tm->render("ultrabasic");
		$this->assertEquals('ultra-basic template for basic tests', $renderedstring);
		unset($tm);

		// Check that ascendFirst can be switched off for multiple folders and ascending
		$tm = new TemplateManager(array($testdir.'/testtemplates/traversing/subdir1', $testdir.'/testtemplates/traversing/subdir1/subsubdir1'), true, false);
		$renderedstring = $tm->render("ultrabasic");
		$this->assertEquals('ultra-basic template for basic tests - in subdir', $renderedstring);
		unset($tm);

		return $testdir;
	}

	/**
	 * Test that rendering from strings works
	 * @depends testTemplateLocation
	 */
	public function testTemplateRenderFromString($testdir) {

		// Instantiate a new templatemanager with no arguments at all, and test rendering from
		// a basic supplied string
		$tm = new TemplateManager();
		$renderedstring = $tm->renderFromString('This is a test string');
		$this->assertEquals('This is a test string', $renderedstring);
		unset($tm);

		// Ensure that strings are preferred over files with the same name when using renderString
		$tm = new TemplateManager($testdir.'/testtemplates');
		$renderedstring = $tm->renderFromString('ultrabasic');
		$this->assertEquals('ultrabasic', $renderedstring);
		unset($tm);

		// Test that UTF8 output works correctly
		$tm = new TemplateManager();
		$renderedstring = $tm->renderFromString("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);
		unset($tm);

		return $testdir;
	}

	/**
	 * Test basic adding and rendering of variables.
	 * @depends testTemplateRenderFromString
	 */
	public function testBasicVariableAdding($testdir) {
		$testnovarstring = 'Should-be-safe string: <!--html-->, <!--@>, <!--@noend';
		$basicteststring = 'String with one variable: <!--@testname-->, in the middle';
		$basicteststringtwo = 'String with one variable at the end: <!--@testname-->';
		$doublevarstring = 'String with one repeated variable: <!--@testname--> and <!--@testname-->';
		$multivarstring = 'String with variables: <!--@one-->, <!--@two-->, <!--@three-->';

		// Test rendering a variable string without any variables - should strip key placeholder
		$tm = new TemplateManager();
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable: , in the middle', $renderedstring);
		unset($tm);

		// Test that variable-like syntax is untouched
		$tm = new TemplateManager();
		$renderedstring = $tm->renderFromString($testnovarstring);
		$this->assertEquals($testnovarstring, $renderedstring);
		unset($tm);

		// Test rendering a variable string with a single string variable
		$tm = new TemplateManager();
		$tm->add('testname', ' test spaced string ');
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable:  test spaced string , in the middle', $renderedstring);
		unset($tm);

		// Test rendering a variable string with a single unicode string variable
		$tm = new TemplateManager();
		$tm->add('testname', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals("String with one variable: TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\", in the middle", $renderedstring);
		unset($tm);

		// Test rendering a variable string with a single numeric variable
		$tm = new TemplateManager();
		$tm->add('testname', 12345);
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable: 12345, in the middle', $renderedstring);
		unset($tm);

		// Test rendering a variable string after adding twice to same variable name - should be concat'd
		$tm = new TemplateManager();
		$tm->add('testname', 'test one');
		$tm->add('testname', '&test two');
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable: test one&test two, in the middle', $renderedstring);
		unset($tm);

		// Test rendering a variable string by adding array to same variable name - should be concat'd
		$tm = new TemplateManager();
		$tm->add('testname', array('test one', '&test two'));
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable: test one&test two, in the middle', $renderedstring);
		unset($tm);

		// Test that setting an unknown variable has no effect
		$tm = new TemplateManager();
		$tm->add('test2name', 'test string');
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable: , in the middle', $renderedstring);
		unset($tm);

		// Test that variables are preserved for multiple renders, including for different strings
		$tm = new TemplateManager();
		$tm->add('testname', 'uno');
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable: uno, in the middle', $renderedstring);
		$renderedstringtwo = $tm->renderFromString($basicteststringtwo);
		$this->assertEquals('String with one variable at the end: uno', $renderedstringtwo);
		unset($tm);

		// Test adding multiple variables in order
		$tm = new TemplateManager();
		$tm->add('one', 'uno');
		$tm->add('two', 'dos');
		$tm->add('three', 'tres');
		$renderedstring = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: uno, dos, tres', $renderedstring);
		unset($tm);

		// Test adding a variables which should be output multiple times
		$tm = new TemplateManager();
		$tm->add('testname', 'uno');
		$renderedstring = $tm->renderFromString($doublevarstring);
		$this->assertEquals('String with one repeated variable: uno and uno', $renderedstring);
		unset($tm);

		// Test adding multiple variables out of order
		$tm = new TemplateManager();
		$tm->add('three', 'tres');
		$tm->add('two', 'dos');
		$tm->add('one', 'uno');
		$renderedstring = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: uno, dos, tres', $renderedstring);
		unset($tm);

		// Test adding multiple variables via a keyed array
		$tm = new TemplateManager();
		$tm->add(array('three'=>'tres', 'two'=>'dos', 'one'=>'uno'));
		$renderedstring = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: uno, dos, tres', $renderedstring);
		unset($tm);

		// Test combination of multiple variables via two keyed array
		$tm = new TemplateManager();
		$tm->add(array('three'=>'tres', 'two'=>'dos', 'one'=>'uno'));
		$tm->add(array('two'=>'&zwei', 'one'=>'&ein'));
		$renderedstring = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: uno&ein, dos&zwei, tres', $renderedstring);
		unset($tm);

		return $testdir;
	}

	/**
	 * Test basic setting and rendering of variables.
	 * @depends testTemplateRenderFromString
	 */
	public function testBasicVariableSetting($testdir) {
		$basicteststring = 'String with one variable: <!--@testname-->, in the middle';
		$basicteststringtwo = 'String with one variable at the end: <!--@testname-->';
		$multivarstring = 'String with variables: <!--@one-->, <!--@two-->, <!--@three-->';

		// Test rendering a variable string with a single string variable
		$tm = new TemplateManager();
		$tm->set('testname', ' test spaced string ');
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable:  test spaced string , in the middle', $renderedstring);
		unset($tm);

		// Test rendering a variable string with a single unicode string variable
		$tm = new TemplateManager();
		$tm->set('testname', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals("String with one variable: TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\", in the middle", $renderedstring);
		unset($tm);

		// Test rendering a variable string with a single numeric variable
		$tm = new TemplateManager();
		$tm->set('testname', 12345);
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable: 12345, in the middle', $renderedstring);
		unset($tm);

		// Test rendering a variable string after setting twice to same variable name - should be overwritten
		$tm = new TemplateManager();
		$tm->set('testname', 'test one');
		$tm->set('testname', 'test two');
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable: test two, in the middle', $renderedstring);
		unset($tm);

		// Test rendering a variable string by setting array to same variable name - should be concat'd
		$tm = new TemplateManager();
		$tm->set('testname', array('test one', '&test two'));
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable: test one&test two, in the middle', $renderedstring);
		unset($tm);

		// Test that setting an unknown variable has no effect
		$tm = new TemplateManager();
		$tm->set('test2name', 'test string');
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable: , in the middle', $renderedstring);
		unset($tm);

		// Test that variables are preserved for multiple renders, including for different strings
		$tm = new TemplateManager();
		$tm->set('testname', 'uno');
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable: uno, in the middle', $renderedstring);
		$renderedstringtwo = $tm->renderFromString($basicteststringtwo);
		$this->assertEquals('String with one variable at the end: uno', $renderedstringtwo);
		unset($tm);

		// Test setting multiple variables in order
		$tm = new TemplateManager();
		$tm->set('one', 'uno');
		$tm->set('two', 'dos');
		$tm->set('three', 'tres');
		$renderedstring = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: uno, dos, tres', $renderedstring);
		unset($tm);

		// Test setting multiple variables out of order
		$tm = new TemplateManager();
		$tm->set('three', 'tres');
		$tm->set('two', 'dos');
		$tm->set('one', 'uno');
		$renderedstring = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: uno, dos, tres', $renderedstring);
		unset($tm);

		// Test setting multiple variables via a keyed array
		$tm = new TemplateManager();
		$tm->set(array('three'=>'tres', 'two'=>'dos', 'one'=>'uno'));
		$renderedstring = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: uno, dos, tres', $renderedstring);
		unset($tm);

		// Test replacement of multiple variables via two keyed array
		$tm = new TemplateManager();
		$tm->set(array('three'=>'tres', 'two'=>'dos', 'one'=>'uno'));
		$tm->set(array('two'=>'zwei', 'one'=>'ein'));
		$renderedstring = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: ein, zwei, tres', $renderedstring);
		unset($tm);

		// Test that not supplying a second argument clears a variable
		$tm = new TemplateManager();
		$tm->set('testname', 'one');
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable: one, in the middle', $renderedstring);
		$tm->set('testname');
		$renderedstring = $tm->renderFromString($basicteststring);
		$this->assertEquals('String with one variable: , in the middle', $renderedstring);
		unset($tm);

		return $testdir;
	}

	/**
	 * Test basic clearing of variables.
	 * @depends testBasicVariableSetting
	 */
	public function testBasicVariableClearing($testdir) {
		$multivarstring = 'String with variables: <!--@one-->, <!--@two-->, <!--@three-->';

		// Test that clearing a single variable works
		$tm = new TemplateManager();
		$tm->set(array('three'=>'tres', 'two'=>'dos', 'one'=>'uno'));
		$tm->clearAssigned('two');
		$renderedstring = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: uno, , tres', $renderedstring);
		$tm->add('two', 'zwei');
		$renderedstringtwo = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: uno, zwei, tres', $renderedstringtwo);
		unset($tm);

		// Test that clearing a single variable works for arrays
		$tm = new TemplateManager();
		$tm->set(array('three'=>'tres', 'two'=>'dos', 'one'=>'uno'));
		$tm->add('two', '&zwei');
		$tm->clearAssigned('two');
		$renderedstring = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: uno, , tres', $renderedstring);
		unset($tm);

		// Test that clearing a single variable works after multiple calls
		$tm = new TemplateManager();
		$tm->set(array('three'=>'tres', 'two'=>'dos', 'one'=>'uno'));
		$renderedstring = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: uno, dos, tres', $renderedstring);
		$tm->clearAssigned('two');
		$renderedstringtwo = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: uno, , tres', $renderedstringtwo);
		unset($tm);

		// Test that clearing all variables works
		$tm = new TemplateManager();
		$tm->set(array('three'=>'tres', 'two'=>'dos', 'one'=>'uno'));
		$tm->clearAllAssigned();
		$renderedstring = $tm->renderFromString($multivarstring);
		$this->assertEquals('String with variables: , , ', $renderedstring);
		unset($tm);

		return $testdir;
	}

	/**
	 * Test that the template manager caches templates for re-use, even after a variable tweak
	 * @depends testTemplateLocation
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateCache($testdir) {

		// Instantiate a new templatemanager in a temporary directory, using that to ensure
		// templates are cached
		$tmplocation = sys_get_temp_dir().'/templatemanagertests/cachetest.html';
		if (!file_exists(dirname($tmplocation))) mkdir(dirname($tmplocation), 0777, true);
		if (file_exists($tmplocation)) unlink($tmplocation);
		copy($testdir.'/testtemplates/cachetest.html', $tmplocation);

		$tm = new TemplateManager(dirname($tmplocation));
		$tm->set('var', 'one');
		$renderedstring = $tm->render('cachetest');
		$this->assertEquals('This is a cache with a simple variable substitution: one', $renderedstring);

		unlink($tmplocation);
		$this->assertFalse(file_exists($tmplocation));
		$tm->set('var', 'two');
		$renderedstring = $tm->render('cachetest');
		$this->assertEquals('This is a cache with a simple variable substitution: two', $renderedstring);

		return $testdir;
	}

	/**
	 * Test that blocks function in basic form.
	 * @depends testTemplateCache
	 */
	public function testTemplateBlocks($testdir) {

		// Test that basic blocks with no modifiers have their block placeholders removed and don't error
		$tm = new TemplateManager($testdir.'/testtemplates/blocks');
		$renderedstring = $tm->render('basicsinglelineblock');
		$this->assertEquals('Template with single-line block: Block with no arguments , and content after the block', $renderedstring);
		unset($tm);
		$tm = new TemplateManager($testdir.'/testtemplates/blocks');
		$renderedstring = $tm->render('basicmultilineblock');
		$this->assertEquals("Template with multi-line block:\n\n\tBlock with no arguments\n\n...and content after the block", $renderedstring);
		unset($tm);

		// Check that unclosed blocks throw errors
		$tm = new TemplateManager($testdir.'/testtemplates/blocks');
		$e = false;
		try {
			$renderedstring = $tm->render('unclosedblock');
		} catch(Exception $e) {}
		$this->assertTrue(is_object($e));
		$this->assertStringStartsWith('BLOCK specified with no matching ENDBLOCK', $e->getMessage());
		unset($tm);

		// Test that multiple blocks, included nested, work in basic form
		$tm = new TemplateManager($testdir.'/testtemplates/blocks');
		$renderedstring = $tm->render('multiplesimpleblocks');
		$this->assertEquals("Template with multiple, simple blocks:\n\n\tBlock one\n\n\n\tTwo\n\t\n\t\tNested\n\t\n\nend...", $renderedstring);
		unset($tm);

		// Test that invalidly nested blocks error
		$tm = new TemplateManager($testdir.'/testtemplates/blocks');
		try {
			$renderedstring = $tm->render('invalidlynested');
		} catch(Exception $e) {}
		$this->assertTrue(is_object($e));
		$this->assertStringStartsWith('BLOCK specified with no matching ENDBLOCK', $e->getMessage());
		unset($tm);

		// Test that multiple blocks, included nested, work in basic form
		$tm = new TemplateManager($testdir.'/testtemplates/blocks');
		$tm->set('one', 'uno');
		$renderedstring = $tm->render('simplewithvariables');
		$this->assertEquals("Template with multiple, simple blocks and variables:\nuno\n\n\tBlock one uno\n\n\n\tTwo uno\n\t\n\t\tNested uno\n\t\n\nuno end...", $renderedstring);
		unset($tm);

		return $testdir;
	}

	/**
	 * Test the block "printifset" modifier.
	 * @depends testTemplateBlocks
	 */
	public function testTemplateBlockPrintIfSet($testdir) {
		$blocktemdir = $testdir.'/testtemplates/blocks';

		// Ensure that when nothing is set on the template manager, the ifset flag doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$renderedstring = $tm->render('modifierprintifset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifset-unset.html'), $renderedstring);

		// Ensure that when the variable is set to a string, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 'set');
		$renderedstring = $tm->render('modifierprintifset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifset-set.html'), $renderedstring);

		// Ensure that when a different variable is set to a string, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid2', 'set');
		$renderedstring = $tm->render('modifierprintifset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifset-unset.html'), $renderedstring);

		// Ensure that when the variable is set to 0, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 0);
		$renderedstring = $tm->render('modifierprintifset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifset-set.html'), $renderedstring);

		// Ensure that when the variable is set to an empty string, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', '');
		$renderedstring = $tm->render('modifierprintifset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifset-set.html'), $renderedstring);

		// Ensure that when the variable is set to an array, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->add('braid', 'item one');
		$tm->add('braid', 'item two');
		$renderedstring = $tm->render('modifierprintifset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifset-set.html'), $renderedstring);

		// Ensure that when a variable is cleared, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->add('braid', 'item one');
		$tm->clearAssigned('braid');
		$renderedstring = $tm->render('modifierprintifset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifset-unset.html'), $renderedstring);

		// Ensure that when a variable is set to nothing, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->add('braid', 'item one');
		$tm->set('braid');
		$renderedstring = $tm->render('modifierprintifset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifset-unset.html'), $renderedstring);

		return $testdir;
	}

	/**
	 * Test the block "printifnotset" modifier.
	 * @depends testTemplateBlocks
	 */
	public function testTemplateBlockPrintIfNotSet($testdir) {
		$blocktemdir = $testdir.'/testtemplates/blocks';

		// Ensure that when nothing is set on the template manager, the ifnotset flag does trigger
		$tm = new TemplateManager($blocktemdir);
		$renderedstring = $tm->render('modifierprintifnotset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotset-unset.html'), $renderedstring);

		// Ensure that when the variable is set to a string, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 'set');
		$renderedstring = $tm->render('modifierprintifnotset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotset-set.html'), $renderedstring);

		// Ensure that when a different variable is set to a string, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid2', 'set');
		$renderedstring = $tm->render('modifierprintifnotset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotset-unset.html'), $renderedstring);

		// Ensure that when the variable is set to 0, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 0);
		$renderedstring = $tm->render('modifierprintifnotset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotset-set.html'), $renderedstring);

		// Ensure that when the variable is set to an empty string, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', '');
		$renderedstring = $tm->render('modifierprintifnotset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotset-set.html'), $renderedstring);

		// Ensure that when the variable is set to an array, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->add('braid', 'item one');
		$tm->add('braid', 'item two');
		$renderedstring = $tm->render('modifierprintifnotset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotset-set.html'), $renderedstring);

		// Ensure that when a variable is cleared, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->add('braid', 'item one');
		$tm->clearAssigned('braid');
		$renderedstring = $tm->render('modifierprintifnotset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotset-unset.html'), $renderedstring);

		// Ensure that when a variable is set to nothing, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->add('braid', 'item one');
		$tm->set('braid');
		$renderedstring = $tm->render('modifierprintifnotset');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotset-unset.html'), $renderedstring);

		return $testdir;
	}

	/**
	 * Test the block "printiftrue" modifier.
	 * @depends testTemplateBlocks
	 */
	public function testTemplateBlockPrintIfTrue($testdir) {
		$blocktemdir = $testdir.'/testtemplates/blocks';

		// Ensure that when nothing is set on the template manager, the iftrue flag doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$renderedstring = $tm->render('modifierprintiftrue');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiftrue-false.html'), $renderedstring);

		// Ensure that when the variable is set to a string, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 'set');
		$renderedstring = $tm->render('modifierprintiftrue');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiftrue-true.html'), $renderedstring);

		// Ensure that when a different variable is set to a string, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid2', 'set');
		$renderedstring = $tm->render('modifierprintiftrue');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiftrue-false.html'), $renderedstring);

		// Ensure that when the variable is set to 0, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 0);
		$renderedstring = $tm->render('modifierprintiftrue');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiftrue-false.html'), $renderedstring);

		// Ensure that when the variable is set to an empty string, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', '');
		$renderedstring = $tm->render('modifierprintiftrue');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiftrue-false.html'), $renderedstring);

		// Ensure that when the variable is set to true, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', true);
		$renderedstring = $tm->render('modifierprintiftrue');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiftrue-true.html'), $renderedstring);

		// Ensure that when the variable is set to false, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', false);
		$renderedstring = $tm->render('modifierprintiftrue');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiftrue-false.html'), $renderedstring);

		// Ensure that when the variable is set to an array, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->add('braid', 'item one');
		$tm->add('braid', 'item two');
		$renderedstring = $tm->render('modifierprintiftrue');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiftrue-true.html'), $renderedstring);

		// Ensure that when a variable is cleared, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->add('braid', 'item one');
		$tm->clearAssigned('braid');
		$renderedstring = $tm->render('modifierprintiftrue');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiftrue-false.html'), $renderedstring);

		// Ensure that when a variable is set to nothing, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->add('braid', 'item one');
		$tm->set('braid');
		$renderedstring = $tm->render('modifierprintiftrue');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiftrue-false.html'), $renderedstring);

		return $testdir;
	}

	/**
	 * Test the block "printiffalse" modifier.
	 * @depends testTemplateBlocks
	 */
	public function testTemplateBlockPrintIfFalse($testdir) {
		$blocktemdir = $testdir.'/testtemplates/blocks';

		// Ensure that when nothing is set on the template manager, the iffalse flag does trigger
		$tm = new TemplateManager($blocktemdir);
		$renderedstring = $tm->render('modifierprintiffalse');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiffalse-false.html'), $renderedstring);

		// Ensure that when the variable is set to a string, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 'set');
		$renderedstring = $tm->render('modifierprintiffalse');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiffalse-true.html'), $renderedstring);

		// Ensure that when a different variable is set to a string, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid2', 'set');
		$renderedstring = $tm->render('modifierprintiffalse');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiffalse-false.html'), $renderedstring);

		// Ensure that when the variable is set to 0, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 0);
		$renderedstring = $tm->render('modifierprintiffalse');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiffalse-false.html'), $renderedstring);

		// Ensure that when the variable is set to an empty string, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', '');
		$renderedstring = $tm->render('modifierprintiffalse');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiffalse-false.html'), $renderedstring);

		// Ensure that when the variable is set to true, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', true);
		$renderedstring = $tm->render('modifierprintiffalse');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiffalse-true.html'), $renderedstring);

		// Ensure that when the variable is set to false, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', false);
		$renderedstring = $tm->render('modifierprintiffalse');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiffalse-false.html'), $renderedstring);

		// Ensure that when the variable is set to an array, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->add('braid', 'item one');
		$tm->add('braid', 'item two');
		$renderedstring = $tm->render('modifierprintiffalse');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiffalse-true.html'), $renderedstring);

		// Ensure that when a variable is cleared, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->add('braid', 'item one');
		$tm->clearAssigned('braid');
		$renderedstring = $tm->render('modifierprintiffalse');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiffalse-false.html'), $renderedstring);

		// Ensure that when a variable is set to nothing, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->add('braid', 'item one');
		$tm->set('braid');
		$renderedstring = $tm->render('modifierprintiffalse');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiffalse-false.html'), $renderedstring);

		return $testdir;
	}

	/**
	 * Test the block "printifequalto" modifier.
	 * @depends testTemplateBlocks
	 */
	public function testTemplateBlockPrintIfEqualTo($testdir) {
		$blocktemdir = $testdir.'/testtemplates/blocks';

		// Ensure that when nothing is set on the template manager, the isequalto flag doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$renderedstring = $tm->render('modifierprintifequaltonumeric');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifequaltonumeric-nomatch.html'), $renderedstring);

		// Ensure that when the correct variable is set to the correct value, the flag triggers
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 123);
		$renderedstring = $tm->render('modifierprintifequaltonumeric');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifequaltonumeric-match.html'), $renderedstring);

		// Ensure that when the variable is set to a different number, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 1234);
		$renderedstring = $tm->render('modifierprintifequaltonumeric');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifequaltonumeric-nomatch.html'), $renderedstring);

		// Ensure that when the variable is set to a string with the same value, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', '123');
		$renderedstring = $tm->render('modifierprintifequaltonumeric');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifequaltonumeric-match.html'), $renderedstring);

		// Ensure that when the variable is set to an unrelated string, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 'foo');
		$renderedstring = $tm->render('modifierprintifequaltonumeric');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifequaltonumeric-nomatch.html'), $renderedstring);

		// Ensure that when a string variable is set to the correct value, the flag triggers
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 'test');
		$renderedstring = $tm->render('modifierprintifequaltostring');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifequaltostring-match.html'), $renderedstring);

		// Ensure that when the variable is set to a different string, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 'testtwo');
		$renderedstring = $tm->render('modifierprintifequaltostring');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifequaltostring-nomatch.html'), $renderedstring);

		// Ensure that when the variable is set to a number, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 1234);
		$renderedstring = $tm->render('modifierprintifequaltostring');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifequaltostring-nomatch.html'), $renderedstring);

		return $testdir;
	}

	/**
	 * Test the block "printifnotequalto" modifier.
	 * @depends testTemplateBlocks
	 */
	public function testTemplateBlockPrintIfNotEqualTo($testdir) {
		$blocktemdir = $testdir.'/testtemplates/blocks';

		// Ensure that when nothing is set on the template manager, the isnotequalto flag does trigger
		$tm = new TemplateManager($blocktemdir);
		$renderedstring = $tm->render('modifierprintifnotequaltonumeric');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotequaltonumeric-nomatch.html'), $renderedstring);

		// Ensure that when the correct variable is set to the correct value, the flag does not trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 123);
		$renderedstring = $tm->render('modifierprintifnotequaltonumeric');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotequaltonumeric-match.html'), $renderedstring);

		// Ensure that when the variable is set to a different number, it triggers
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 1234);
		$renderedstring = $tm->render('modifierprintifnotequaltonumeric');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotequaltonumeric-nomatch.html'), $renderedstring);

		// Ensure that when the variable is set to a string with the same value, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', '123');
		$renderedstring = $tm->render('modifierprintifnotequaltonumeric');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotequaltonumeric-match.html'), $renderedstring);

		// Ensure that when the variable is set to an unrelated string, it triggers
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 'foo');
		$renderedstring = $tm->render('modifierprintifnotequaltonumeric');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotequaltonumeric-nomatch.html'), $renderedstring);

		// Ensure that when a string variable is set to the correct value, the flag doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 'test');
		$renderedstring = $tm->render('modifierprintifnotequaltostring');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotequaltostring-match.html'), $renderedstring);

		// Ensure that when the variable is set to a different string, it triggers
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 'testtwo');
		$renderedstring = $tm->render('modifierprintifnotequaltostring');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotequaltostring-nomatch.html'), $renderedstring);

		// Ensure that when the variable is set to a number, it triggers
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 1234);
		$renderedstring = $tm->render('modifierprintifnotequaltostring');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotequaltostring-nomatch.html'), $renderedstring);

		return $testdir;
	}

	/**
	 * Test the block "printifeven" modifier.  Note that behaviour of floats and strings wrt to even/odd is
	 * intended as "undefined" for the purpose of these tests.
	 * @depends testTemplateBlocks
	 */
	public function testTemplateBlockPrintIfEven($testdir) {
		$blocktemdir = $testdir.'/testtemplates/blocks';

		// Ensure that when nothing is set on the template manager, the ifeven flag doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-nomatch.html'), $renderedstring);

		// Ensure that when the variable is set to an even number, the flag triggers
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 0);
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-match.html'), $renderedstring);
		$tm->set('braid', 2);
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-match.html'), $renderedstring);
		$tm->set('braid', 1268);
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-match.html'), $renderedstring);
		$tm->set('braid', -2);
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-match.html'), $renderedstring);

		// Ensure that when the variable is set to an odd number, it doesn't trigger
		$tm->set('braid', 1);
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-nomatch.html'), $renderedstring);
		$tm->set('braid', 1267);
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-nomatch.html'), $renderedstring);
		$tm->set('braid', -1);
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-nomatch.html'), $renderedstring);

		// Ensure that when the variable is set to a string with an even value, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', '2');
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-match.html'), $renderedstring);
		$tm->set('braid', '-2');
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-match.html'), $renderedstring);
		$tm->set('braid', '1234');
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-match.html'), $renderedstring);
		$tm->set('braid', '0');
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-match.html'), $renderedstring);

		// Ensure that when the variable is set to a string with an odd value, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', '1');
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-nomatch.html'), $renderedstring);
		$tm->set('braid', '1233');
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-nomatch.html'), $renderedstring);
		$tm->set('braid', '-1');
		$renderedstring = $tm->render('modifierprintifeven');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifeven-nomatch.html'), $renderedstring);

		return $testdir;
	}

	/**
	 * Test the block "printifodd" modifier.  Note that behaviour of floats and strings wrt to even/odd is
	 * intended as "undefined" for the purpose of these tests.
	 * @depends testTemplateBlocks
	 */
	public function testTemplateBlockPrintIfOdd($testdir) {
		$blocktemdir = $testdir.'/testtemplates/blocks';

		// Ensure that when nothing is set on the template manager, the ifodd flag doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-nomatch.html'), $renderedstring);

		// Ensure that when the variable is set to an odd number, the flag triggers
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 1);
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-match.html'), $renderedstring);
		$tm->set('braid', 1235);
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-match.html'), $renderedstring);
		$tm->set('braid', -3);
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-match.html'), $renderedstring);

		// Ensure that when the variable is set to an even number, it doesn't trigger
		$tm->set('braid', 0);
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-nomatch.html'), $renderedstring);
		$tm->set('braid', 2);
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-nomatch.html'), $renderedstring);
		$tm->set('braid', 1232);
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-nomatch.html'), $renderedstring);
		$tm->set('braid', -2);
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-nomatch.html'), $renderedstring);

		// Ensure that when the variable is set to a string with an odd value, it does trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', '1');
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-match.html'), $renderedstring);
		$tm->set('braid', '-671');
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-match.html'), $renderedstring);
		$tm->set('braid', '1233');
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-match.html'), $renderedstring);

		// Ensure that when the variable is set to a string with an even value, it doesn't trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', '0');
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-nomatch.html'), $renderedstring);
		$tm->set('braid', '24');
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-nomatch.html'), $renderedstring);
		$tm->set('braid', '12345990');
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-nomatch.html'), $renderedstring);
		$tm->set('braid', '-45216');
		$renderedstring = $tm->render('modifierprintifodd');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifodd-nomatch.html'), $renderedstring);

		return $testdir;
	}

	/**
	 * Test the block "printifmore" modifier.
	 * @depends testTemplateBlocks
	 */
	public function testTemplateBlockPrintIfMore($testdir) {
		$blocktemdir = $testdir.'/testtemplates/blocks';

		// Ensure that when nothing is set on the template manager, the ismore flag does not trigger
		$tm = new TemplateManager($blocktemdir);
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-nomatch.html'), $renderedstring);

		// Ensure that when the variable is set to a bigger number, it triggers
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 124);
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-match.html'), $renderedstring);
		$tm->set('braid', 871234103);
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-match.html'), $renderedstring);
		$tm->set('braid', 123.04);
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-match.html'), $renderedstring);

		// Ensure that when the variable is set to the exact value, the flag does not trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 123);
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-nomatch.html'), $renderedstring);

		// Ensure that when the variable is set to a smaller value, the flag does not trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 122);
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-nomatch.html'), $renderedstring);
		$tm->set('braid', 0);
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-nomatch.html'), $renderedstring);
		$tm->set('braid', -42342342);
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-nomatch.html'), $renderedstring);

		// Ensure that when the variable is a string, it still behaves correctly
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', '124');
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-match.html'), $renderedstring);
		$tm->set('braid', '871234103');
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-match.html'), $renderedstring);
		$tm->set('braid', '123.04');
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-match.html'), $renderedstring);
		$tm->set('braid', '123');
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-nomatch.html'), $renderedstring);
		$tm->set('braid', '0');
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-nomatch.html'), $renderedstring);
		$tm->set('braid', '-42342342');
		$renderedstring = $tm->render('modifierprintifmore');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifmore-nomatch.html'), $renderedstring);

		return $testdir;
	}

	/**
	 * Test the block "printifless" modifier.
	 * @depends testTemplateBlocks
	 */
	public function testTemplateBlockPrintIfLess($testdir) {
		$blocktemdir = $testdir.'/testtemplates/blocks';

		// Ensure that when nothing is set on the template manager, the isless flag does not trigger
		$tm = new TemplateManager($blocktemdir);
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-nomatch.html'), $renderedstring);

		// Ensure that when the variable is set to a smaller number, it triggers
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 122);
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-match.html'), $renderedstring);
		$tm->set('braid', 122.99);
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-match.html'), $renderedstring);
		$tm->set('braid', 0);
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-match.html'), $renderedstring);
		$tm->set('braid', -3434232122);
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-match.html'), $renderedstring);

		// Ensure that when the variable is set to the exact value, the flag does not trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 123);
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-nomatch.html'), $renderedstring);

		// Ensure that when the variable is set to a smaller value, the flag does not trigger
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', 124);
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-nomatch.html'), $renderedstring);
		$tm->set('braid', 123.01);
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-nomatch.html'), $renderedstring);
		$tm->set('braid', 42342342);
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-nomatch.html'), $renderedstring);

		// Ensure that when the variable is a string, it still behaves correctly
		$tm = new TemplateManager($blocktemdir);
		$tm->set('braid', '124');
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-nomatch.html'), $renderedstring);
		$tm->set('braid', '871234103');
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-nomatch.html'), $renderedstring);
		$tm->set('braid', '123.04');
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-nomatch.html'), $renderedstring);
		$tm->set('braid', '123');
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-nomatch.html'), $renderedstring);
		$tm->set('braid', '0');
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-match.html'), $renderedstring);
		$tm->set('braid', '-42342342');
		$renderedstring = $tm->render('modifierprintifless');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifless-match.html'), $renderedstring);

		return $testdir;
	}


	/**
	 * Test the block "repeatfor" modifier.
	 * This also tests basic variable preservation, copying to within the block, local overriding,
	 * and handling of singles/lists/collections.  Note that nested repeating blocks are currently
	 * not supported and therefore untested.
	 * Slightly different test formatting here - due to complexity one test template covers a range
	 * of outcomes, with a single expected result output.  Granularity is decreased but the number of
	 * associated template files drops dramatically!
	 * @depends testTemplateBlocks
	 */
	public function testTemplateBlockRepeat($testdir) {
		$blocktemdir = $testdir.'/testtemplates/blocks';

		/**
		 * Perform basic tests on outputting of blocks:
		 *  - Ensure blocks aren't output if a variable isn't set
		 *  - Ensure blocks are repeated the correct number of times for singles, lists, collections
		 *  - Ensure nested repeating blocks are output correctly (also tests variable preservation from root...)
		 */
		$tm = new TemplateManager($blocktemdir);
		$tm->set('testvar2', 'single variable');
		$tm->set('testvar3', 'list item one');
		$tm->add('testvar3', 'list item two');
		$tm->add('testvar3', 'list item three');
		$tm->add('testvar3', 'list item four');
		$tm->add('testvar4', array("key one"=>"value one", "key two"=>"value two"));
		$tm->add('testvar4', array("key one"=>"value uno", "key two"=>"value dos"));
		$tm->add('testvar4', array("key one"=>"value ein", "key two"=>"value zwei"));
		$tm->set('testvar5', array('one', 'two'));
		$tm->add('testvar6', 'one');
		$tm->add('testvar6', 'two');
		$tm->add('testvar6', 'three');
		$renderedstring = $tm->render('modifierprintrepeatfor-basic');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintrepeatfor-basic-expectedresult.html'), $renderedstring);

		/**
		 * Perform variable tests on outputting of blocks:
		 *  - For singles and lists, check the variable is available within the loop
		 *  - For collections, check that the collection variables are available within the block
		 *  - Ensure outside-the-block variables are also available inside the block
		 *  - Ensure list or collection variables inside the block override those outside the block
		 */
		$tm = new TemplateManager($blocktemdir);
		$tm->set('testvar', 'single variable');
		$tm->set('testvar2', 'list item one');
		$tm->add('testvar2', 'list item two');
		$tm->add('testvar3', array("insidevarone"=>"value three", "key one"=>"value one", "key two"=>"value two"));
		$tm->add('testvar3', array("insidevarone"=>"value tres", "key one"=>"value uno", "key two"=>"value dos"));
		$tm->add('testvar3', array("insidevarone"=>"value drei", "key one"=>"value ein", "key two"=>"value zwei"));
		$tm->add('outsidevarone', 'this one');
		$tm->add('outsidevartwo', 'even another one');
		$tm->add('insidevarone', 'this should not be output');
		$tm->add('value', 'the base value');
		$renderedstring = $tm->render('modifierprintrepeatfor-variables');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintrepeatfor-variables-expectedresult.html'), $renderedstring);

		return $testdir;
	}

	/**
	 * Test the block output logic within loops - iffirst, iflast, and inverse rules.
	 * @depends testTemplateBlockRepeat
	 */
	public function testTemplateBlockLoopLogic($testdir) {
		$blocktemdir = $testdir.'/testtemplates/blocks';

		// Set up the templatemanager and variables to be used throughout
		$tm = new TemplateManager($blocktemdir);
		$tm->set('singleitem', 'single variable');
		$tm->set('listitems', array('uno', 'dos', 'tres', 'quatro'));

		// Test the "printiffirst" modifier
		$renderedstring = $tm->render('modifierprintiffirst');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiffirst-expectedresult.html'), $renderedstring);

		// Test the "printifnotfirst" modifier
		$renderedstring = $tm->render('modifierprintifnotfirst');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotfirst-expectedresult.html'), $renderedstring);

		// Test the "printiflast" modifier
		$renderedstring = $tm->render('modifierprintiflast');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintiflast-expectedresult.html'), $renderedstring);

		// Test the "printifnotlast" modifier
		$renderedstring = $tm->render('modifierprintifnotlast');
		$this->assertEquals(file_get_contents($blocktemdir.'/modifierprintifnotlast-expectedresult.html'), $renderedstring);

		return $testdir;
	}

	/**
	 * Test template FN arguments
	 * @depends testBasicVariableSetting
	 * @depends testTemplateBlockRepeat
	 */
	public function testTemplateFunctionArguments($testdir) {

		// Set up the templatemanager and a couple of arguments
		$tm = new TemplateManager($testdir.'/testtemplates/');
		$tm->set('varone', 'String variable');
		$tm->set('vartwo', 15);
		$tm->set('list', array('uno', 'dos'));

		// Test that undefined functions are gracefully skipped
		$renderedstring = $tm->renderFromString('This is undefined - "<!--@FN:thisShouldBeAnUndefinedFunction-->"');
		$this->assertEquals('This is undefined - ""', $renderedstring);

		// Test that user-defined functions are run
		$renderedstring = $tm->renderFromString('This is user-defined - "<!--@FN:templateManagerReturnTestString-->"');
		$this->assertEquals('This is user-defined - "this is a test string"', $renderedstring);

		// Test that single arguments are accepted
		$renderedstring = $tm->renderFromString('User-defined with one argument - "<!--@FN:templateManagerTestMultiplyArguments|args:2-->"');
		$this->assertEquals('User-defined with one argument - "20"', $renderedstring);

		// Test that multiple arguments are accepted
		$renderedstring = $tm->renderFromString('User-defined with two arguments - "<!--@FN:templateManagerTestMultiplyArguments|args:15;6-->"');
		$this->assertEquals('User-defined with two arguments - "90"', $renderedstring);

		// Test that pre-existing functions can be run with arguments
		$renderedstring = $tm->renderFromString('This is predefined - "<!--@FN:strtolower|args:"This Is A String"-->"');
		$this->assertEquals('This is predefined - "this is a string"', $renderedstring);

		// Test that template arguments can be passed in via dollar syntax
		$renderedstring = $tm->renderFromString('Dollar args - "<!--@FN:strtolower|args:$varone-->"');
		$this->assertEquals('Dollar args - "string variable"', $renderedstring);

		// Test within loops
		$renderedstring = $tm->render('command-fn');
		$this->assertEquals(file_get_contents($testdir.'/testtemplates/command-fn-expectedresult.html'), $renderedstring);

		return $testdir;
	}

	/**
	 * Test SERVER variables
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateServerArguments($testdir) {

		// Set up the templatemanager
		$tm = new TemplateManager();

		// Test that undefined server variables are gracefully skipped
		$renderedstring = $tm->renderFromString('Test of undefined - "<!--@SERVER:thisShouldBeUndefined-->"');
		$this->assertEquals('Test of undefined - ""', $renderedstring);

		// Stick a string in the server array and ensure it's available
		$_SERVER['tmtestvar'] = 'Server variable successful';
		$renderedstring = $tm->renderFromString('Test of variable - "<!--@SERVER:tmtestvar-->"');
		$this->assertEquals('Test of variable - "Server variable successful"', $renderedstring);

		return $testdir;
	}

	/**
	 * Test SPECIAL variables
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateSpecialArguments($testdir) {

		// Test that exectime works - this test will fail if execution is slow enough that a single
		// template manager construction takes longer than 100ms, but that shouldn't be the case!
		$tm = new TemplateManager();
		usleep(200000);
		$renderedstring = $tm->renderFromString('<!--@SPECIAL:exectime-->');
		$this->assertRegexp('/^0\.2.*/', $renderedstring);

		// Test that now works
		$renderedstring = $tm->renderFromString('<!--@SPECIAL:now-->');
		$this->assertRegexp('/^('.time().'|'.(time()-1).')$/', $renderedstring);

		// Test islive
		if (!empty($_SERVER['IS_LIVE'])) $_SERVER['IS_LIVE'] = false;
		$renderedstring = $tm->renderFromString('This is a <!--@SPECIAL:islive|"confirmed live "-->server');
		$this->assertEquals('This is a server', $renderedstring);
		$_SERVER['IS_LIVE'] = 1;
		$renderedstring = $tm->renderFromString('This is a <!--@SPECIAL:islive|"confirmed live "-->server');
		$this->assertEquals('This is a confirmed live server', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the gluewith modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateVariableGlueWith($testdir) {

		// Set up a templatemanager and set up a unicode list
		$tm = new TemplateManager();
		$tm->set('listitems', array('üno', '∂os', '†res', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\""));
		$tm->set('nonlistitem', 'foo');

		// Ensure the default is to output all together
		$renderedstring = $tm->renderFromString('<!--@listitems-->');
		$this->assertEquals("üno∂os†resTEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Ensure that a basic gluewith string works
		$renderedstring = $tm->renderFromString('<!--@listitems|gluewith:" "-->');
		$this->assertEquals("üno ∂os †res TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Ensure a multicharacter gluewith string works
		$renderedstring = $tm->renderFromString('<!--@listitems|gluewith:", and "-->');
		$this->assertEquals("üno, and ∂os, and †res, and TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Ensure a unicode gluewith string works
		$renderedstring = $tm->renderFromString('<!--@listitems|gluewith:" TEST DATA \u1F51\u043F &lt; & \'\"abcdef,[] ὑпііϚϙბĔ\',\""-->');
		$this->assertEquals("üno TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"∂os TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"†res TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Ensure single variables aren't affected
		$renderedstring = $tm->renderFromString('<!--@nonlistitem-->');
		$this->assertEquals("foo", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the capitalise modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierCapitalise($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Set a lowercase string and ensure it's switched to titlecase
		$tm->set('teststring', 'this is a test string');
		$renderedstring = $tm->renderFromString('<!--@teststring|capitalise-->');
		$this->assertEquals("This Is A Test String", $renderedstring);

		// Set an uppercase string and ensure it's switched to titlecase
		$tm->set('teststring', 'THIS IS A TEST STRING');
		$renderedstring = $tm->renderFromString('<!--@teststring|capitalise-->');
		$this->assertEquals("This Is A Test String", $renderedstring);

		// Set a titlecase string and ensure it's not touched
		$tm->set('teststring', 'This Is A Test String 123');
		$renderedstring = $tm->renderFromString('<!--@teststring|capitalise-->');
		$this->assertEquals("This Is A Test String 123", $renderedstring);

		// Set a mixed string and ensure correct behaviour
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|capitalise-->');
		$this->assertEquals("Test Data \u1f51\u043f &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the lowercase modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierLowercase($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Set a lowercase string and ensure it's not touched
		$tm->set('teststring', 'this is a test string');
		$renderedstring = $tm->renderFromString('<!--@teststring|lowercase-->');
		$this->assertEquals("this is a test string", $renderedstring);

		// Set an uppercase string and ensure it's switched to lowercase
		$tm->set('teststring', 'THIS IS A TEST STRING');
		$renderedstring = $tm->renderFromString('<!--@teststring|lowercase-->');
		$this->assertEquals("this is a test string", $renderedstring);

		// Set a mixed case string and ensure it's switched to lowercase
		$tm->set('teststring', 'This Is A Test Case! 123');
		$renderedstring = $tm->renderFromString('<!--@teststring|lowercase-->');
		$this->assertEquals("this is a test case! 123", $renderedstring);

		// Set a mixed string and ensure correct behaviour
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|lowercase-->');
		$this->assertEquals("test data \u1f51\u043f &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the uppercase modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierUppercase($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Set a uppercase string and ensure it's not touched
		$tm->set('teststring', 'THIS IS A TEST STRING');
		$renderedstring = $tm->renderFromString('<!--@teststring|uppercase-->');
		$this->assertEquals("THIS IS A TEST STRING", $renderedstring);

		// Set an uppercase string and ensure it's switched to lowercase
		$tm->set('teststring', 'this is a test string');
		$renderedstring = $tm->renderFromString('<!--@teststring|uppercase-->');
		$this->assertEquals("THIS IS A TEST STRING", $renderedstring);

		// Set a mixed case string and ensure it's switched to lowercase
		$tm->set('teststring', 'This Is A Test Case! 123');
		$renderedstring = $tm->renderFromString('<!--@teststring|uppercase-->');
		$this->assertEquals("THIS IS A TEST CASE! 123", $renderedstring);

		// Set a mixed string and ensure correct behaviour
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|uppercase-->');
		$this->assertEquals("TEST DATA \U1F51\U043F &LT; & '\"ABCDEF,[] ὑпііϚϙბĔ',\"", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the nl2br modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierNL2BR($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Set a unicode string containing no linebreaks and ensure it's not affected
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|nl2br-->');
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Set a string containing newlines and ensure they're replaced
		$tm->set('teststring', "this\nis\na\ntest\n\nstring - whitespace \n\t around breaks");
		$renderedstring = $tm->renderFromString('<!--@teststring|nl2br-->');
		$this->assertEquals("this<br />\nis<br />\na<br />\ntest<br />\n<br />\nstring - whitespace <br />\n\t around breaks", $renderedstring);

		// Set a string containing carriage returns and ensure they're replaced
		$tm->set('teststring', "this\ris\ra\rtest\r\rstring - whitespace \r\t around breaks");
		$renderedstring = $tm->renderFromString('<!--@teststring|nl2br-->');
		$this->assertEquals("this<br />\ris<br />\ra<br />\rtest<br />\r<br />\rstring - whitespace <br />\r\t around breaks", $renderedstring);

		// Set a string containing mixed linefeeds and carriage returns and ensure they're replaced
		$tm->set('teststring', "this\ris\na\r\ntest\r\n\nstring - whitespace \r\t around breaks");
		$renderedstring = $tm->renderFromString('<!--@teststring|nl2br-->');
		$this->assertEquals("this<br />\ris<br />\na<br />\r\ntest<br />\r\n<br />\nstring - whitespace <br />\r\t around breaks", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the collapse_whitespace modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierCollapseWhitespace($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Set a unicode string containing no long runs of whitespace and ensure it's not affected
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|collapse_whitespace-->');
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Set a string containing a run of spaces and ensure they're collapsed
		$tm->set('teststring', "this string  no longer has many     spaces");
		$renderedstring = $tm->renderFromString('<!--@teststring|collapse_whitespace-->');
		$this->assertEquals("this string no longer has many spaces", $renderedstring);

		// Set a string containing carriage returns and ensure they're collapsed
		$tm->set('teststring', "this\nstring\n\nno\nlonger\nhas\nany\n\n\nlinebreaks");
		$renderedstring = $tm->renderFromString('<!--@teststring|collapse_whitespace-->');
		$this->assertEquals("this string no longer has any linebreaks", $renderedstring);

		// Set a string containing tabs and ensure they're collapsed
		$tm->set('teststring', "this\tstring\t\tno\tlonger\thas\tany\t\t\ttabs");
		$renderedstring = $tm->renderFromString('<!--@teststring|collapse_whitespace-->');
		$this->assertEquals("this string no longer has any tabs", $renderedstring);

		// Set a string containing mixed whitespace and ensure they're collapsed
		$tm->set('teststring', "this\t\n\r string \t \n \r \r\nhas  been \t\tcollapsed");
		$renderedstring = $tm->renderFromString('<!--@teststring|collapse_whitespace-->');
		$this->assertEquals("this string has been collapsed", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the trim modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierTrim($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Set a unicode string containing no long runs of whitespace and ensure it's not affected
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|trim-->');
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Set a string padded with mixed whitespace and ensure it's trimmed
		$tm->set('teststring', " \t\r\n\n\r\t \0this is a (\t\n\r\0) string \t \n \r \0\t");
		$renderedstring = $tm->renderFromString('...<!--@teststring|trim-->...');
		$this->assertEquals("...this is a (\t\n\r\0) string...", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the rtrim modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierRightTrim($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Set a unicode string containing no long runs of whitespace and ensure it's not affected
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|rtrim-->');
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Set a string padded with mixed whitespace and ensure it's trimmed only on the right
		$tm->set('teststring', " \t\r\n\n\r\t \0this is a (\t\n\r\0) string \t \n \r \0\t");
		$renderedstring = $tm->renderFromString('...<!--@teststring|rtrim-->...');
		$this->assertEquals("... \t\r\n\n\r\t \0this is a (\t\n\r\0) string...", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the left trim modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierLeftTrim($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Set a unicode string containing no long runs of whitespace and ensure it's not affected
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|ltrim-->');
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Set a string padded with mixed whitespace and ensure it's trimmed only on the left
		$tm->set('teststring', " \t\r\n\n\r\t \0this is a (\t\n\r\0) string \t \n \r \0\t");
		$renderedstring = $tm->renderFromString('...<!--@teststring|ltrim-->...');
		$this->assertEquals("...this is a (\t\n\r\0) string \t \n \r \0\t...", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the strip_tags modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierStripTags($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Set a unicode string containing no long runs of whitespace and ensure it's not affected
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|strip_tags-->');
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Check that PHP tags are stripped from the string
		$tm->set('teststring', 'String <?php containing ?>PHP <?= tags ?>in both long and <?php shorttag\nformat ?>');
		$renderedstring = $tm->renderFromString('<!--@teststring|strip_tags-->');
		$this->assertEquals('String PHP in both long and ', $renderedstring);

		// Check that HTML comments are stripped from the string
		$tm->set('teststring', 'This string is <!-- padded with an HTML comment and so is definitely not --> short');
		$renderedstring = $tm->renderFromString('<!--@teststring|strip_tags-->');
		$this->assertEquals('This string is  short', $renderedstring);

		// Check that CDATA sections are stripped from the string
		$tm->set('teststring', 'This string has a <![CDATA[section]]>');
		$renderedstring = $tm->renderFromString('<!--@teststring|strip_tags-->');
		$this->assertEquals('This string has a ', $renderedstring);

		// Check that basic HTML tags are removed from the string
		$tm->set('teststring', 'This string <a href="http://www.assanka.net">has a link!</a>');
		$renderedstring = $tm->renderFromString('<!--@teststring|strip_tags-->');
		$this->assertEquals('This string has a link!', $renderedstring);

		// Check that basic < and > uses aren't removed from the string
		$tm->set('teststring', 'This string shows that 3 < 4 and 7 >= 7');
		$renderedstring = $tm->renderFromString('<!--@teststring|strip_tags-->');
		$this->assertEquals('This string shows that 3 < 4 and 7 >= 7', $renderedstring);

		// Check that non-printable characters don't break tag stripping
		$tm->set('teststring', "This string <\u07Aa href=\"http://www.assanka.net\">has a link!</a>");
		$renderedstring = $tm->renderFromString('<!--@teststring|strip_tags-->');
		$this->assertEquals('This string has a link!', $renderedstring);

		// Check that longer and more complex strings are output correctly
		$tm->set('teststring', "More<<a>a onclick='alert(document.cookie);'</a>/>string tests, <title>with more\n<b>nested <a href=\"\" target=\"_blank\">tags</a></b>.</title>\n\n<!-- comments -->\n\n<p>and <b>linebreaks <strong>with <em>old <strike>and</strike></em> new tags...</strong></b></p>");
		$renderedstring = $tm->renderFromString('<!--@teststring|strip_tags-->');
		$this->assertEquals("Morestring tests, with more\nnested tags.\n\n\n\nand linebreaks with old and new tags...", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the string replace modifier and arguments
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierReplace($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Set a unicode string not containing the specified string and ensure it's not affected
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|replace:"search":"replace"-->');
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Set a string and try a single search/replace
		$tm->set('teststring', 'this string is twine.');
		$renderedstring = $tm->renderFromString('<!--@teststring|replace:"twine":"yarn"-->');
		$this->assertEquals("this string is yarn.", $renderedstring);

		// Set a string and try multiple search/replaces within the same string
		$tm->set('teststring', "fud, fud,\nglorious fud");
		$renderedstring = $tm->renderFromString('<!--@teststring|replace:"fud":"food"-->');
		$this->assertEquals("food, food,\nglorious food", $renderedstring);

		// Ensure search/replace is case-sensitive
		$tm->set('teststring', 'this string is twine.');
		$renderedstring = $tm->renderFromString('<!--@teststring|replace:"Twine":"Yarn"-->');
		$this->assertEquals("this string is twine.", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the string regex replace modifier and arguments
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierRegexReplace($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Set a unicode string not containing the specified string and ensure it's not affected
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|regex_replace:"/search/":"replace"-->');
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Set a string and try a single, simple search/replace
		$tm->set('teststring', 'this string is twine.');
		$renderedstring = $tm->renderFromString('<!--@teststring|regex_replace:"/twine/":"yarn"-->');
		$this->assertEquals("this string is yarn.", $renderedstring);

		// Ensure modifiers can be used
		$tm->set('teststring', 'this string is twine.');
		$renderedstring = $tm->renderFromString('<!--@teststring|regex_replace:"/Twine/":"yarn"-->');
		$this->assertEquals("this string is twine.", $renderedstring);
		$renderedstring = $tm->renderFromString('<!--@teststring|regex_replace:"/Twine/i":"yarn"-->');
		$this->assertEquals("this string is yarn.", $renderedstring);

		// Check that regexes can be used
		$tm->set('teststring', 'tines, twines, tinas, thrones...');
		$renderedstring = $tm->renderFromString('<!--@teststring|regex_replace:"/t.{1,2}n[e|a
		][^\s,]+/":"yes"-->');
		$this->assertEquals("yes, yes, yes, thrones...", $renderedstring);

		return $testdir;
	}

	/**
	 * Test that sprintf/stringformat works, with only one argument as per the manual
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierStringFormat($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Set a unicode string not containing the specified sequence and ensure it's not affected
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|stringformat:"argument"-->');
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Set a string and try a single insertion
		$tm->set('teststring', 'this has %s not worked');
		$renderedstring = $tm->renderFromString('<!--@teststring|stringformat:"not"-->');
		$this->assertEquals("this has not not worked", $renderedstring);

		// Check that multiple arguments aren't supported
		$tm->set('teststring', 'one two %s %s');
		$e = false;
		try {
			$renderedstring = $tm->renderFromString('<!--@teststring|stringformat:"three":"four"-->');
		} catch (Exception $e) {}
		$this->assertTrue(is_object($e));
		$this->assertEquals("sprintf(): Too few arguments", $e->getMessage());

		// Additional sprintf-type basic tests
		$tm->set('teststring', 'Signed numbers (%+d) with escaped extras %%s');
		$renderedstring = $tm->renderFromString('<!--@teststring|stringformat:"123.1"-->');
		$this->assertEquals("Signed numbers (+123) with escaped extras %s", $renderedstring);
		$tm->set('teststring', 'Multiple uses of the same argument - both left (%1$-10s) and right aligned (%1$10s)');
		$renderedstring = $tm->renderFromString('<!--@teststring|stringformat:"whooo"-->');
		$this->assertEquals("Multiple uses of the same argument - both left (whooo     ) and right aligned (     whooo)", $renderedstring);
		$tm->set('teststring', 'Float formatting - eg %01.2f');
		$renderedstring = $tm->renderFromString('<!--@teststring|stringformat:"123.1"-->');
		$this->assertEquals("Float formatting - eg 123.10", $renderedstring);
		$tm->set('teststring', 'Truncation to a set length - [%10.10s]');
		$renderedstring = $tm->renderFromString('<!--@teststring|stringformat:"This is a long string which should be truncated"-->');
		$this->assertEquals("Truncation to a set length - [This is a ]", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the date formatting modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierDateFormat($testdir) {
		date_default_timezone_set('Europe/London');

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Set a known date/time as a timestamp and ensure the output is correct and responds to standard
		// date/time modifiers
		$tm->set('testtimestamp', 366129089);
		$renderedstring = $tm->renderFromString('<!--@testtimestamp|dateformat:"U"-->');
		$this->assertEquals("366129089", $renderedstring);
		$renderedstring = $tm->renderFromString('<!--@testtimestamp|dateformat:"r"-->');
		$this->assertEquals("Sat, 08 Aug 1981 15:31:29 +0100", $renderedstring);
		$renderedstring = $tm->renderFromString('<!--@testtimestamp|dateformat:"Y-m-d, jS M Y"-->');
		$this->assertEquals("1981-08-08, 8th Aug 1981", $renderedstring);

		// Check that dates are parsed automatically as needed
		$tm->set('testdate', '8th August 1981');
		$renderedstring = $tm->renderFromString('<!--@testdate|dateformat:"r"-->');
		$this->assertEquals("Sat, 08 Aug 1981 00:00:00 +0100", $renderedstring);

		// Check that dates before the unix epoch work correctly, as do modifiers
		$tm->set('testdate', '1st January 1965 -2 weeks');
		$renderedstring = $tm->renderFromString('<!--@testdate|dateformat:"r"-->');
		$this->assertEquals("Fri, 18 Dec 1964 00:00:00 +0000", $renderedstring);

		// Check that unparseable dates are output unmodified
		$tm->set('testdate', 'Many moons ago');
		$renderedstring = $tm->renderFromString('<!--@testdate|dateformat:"r"-->');
		$this->assertEquals("Many moons ago", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the "prepend" modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierPrepend($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure the prepend is not used
		$renderedstring = $tm->renderFromString('Nothing should be prepended to the variable<!--@variabletest|prepend:"But it was"-->');
		$this->assertEquals('Nothing should be prepended to the variable', $renderedstring);

		// Set a variable, and ensure the prepend is used
		$tm->set('variabletest', 'variablething');
		$renderedstring = $tm->renderFromString('Should be prepended to the variable<!--@variabletest|prepend:" output here: "-->');
		$this->assertEquals('Should be prepended to the variable output here: variablething', $renderedstring);

		// Set a variable to zero and ensure the prepend is used
		$tm->set('variabletest2', 0);
		$renderedstring = $tm->renderFromString('Value is <!--@variabletest2|prepend:"approx. "-->');
		$this->assertEquals('Value is approx. 0', $renderedstring);

		// Set a variable to an empty string and ensure the prepend is not used
		$tm->set('variabletest3', '');
		$renderedstring = $tm->renderFromString('This string is <!--@variabletest3|prepend:"not "-->cool');
		$this->assertEquals('This string is cool', $renderedstring);

		// Set a variable to more complex unicode string, added to another, and ensure everything comes out correctly.
		$tm->set('variabletest4', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"\n\r\n");
		$renderedstring = $tm->renderFromString("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"\n\r\n, with <!--@variabletest4|prepend:\"TEST DATA \u1F51\u043F &lt; & '\\\"abcdef,[] ὑпііϚϙბĔ',\\\"\n\r\n\"--> as well...");
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"\n\r\n, with TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"\n\r\nTEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"\n\r\n as well...", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the "apppend" modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierAppend($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure the append is not used
		$renderedstring = $tm->renderFromString('Nothing should be appended to the variable<!--@variabletest|append:" - but it was"-->');
		$this->assertEquals('Nothing should be appended to the variable', $renderedstring);

		// Set a variable, and ensure the append is used
		$tm->set('variabletest', 'variablething');
		$renderedstring = $tm->renderFromString('Should be appended to the variable <!--@variabletest|append:" - and it was!"-->');
		$this->assertEquals('Should be appended to the variable variablething - and it was!', $renderedstring);

		// Set a variable to zero and ensure the append is used
		$tm->set('variabletest2', 0);
		$renderedstring = $tm->renderFromString('Value is <!--@variabletest2|append:" (approx.)"-->');
		$this->assertEquals('Value is 0 (approx.)', $renderedstring);

		// Set a variable to an empty string and ensure the append is not used
		$tm->set('variabletest3', '');
		$renderedstring = $tm->renderFromString('This string is <!--@variabletest3|append:" (not!)"-->cool');
		$this->assertEquals('This string is cool', $renderedstring);

		// Set a variable to more complex unicode string, added to another, and ensure everything comes out correctly.
		$tm->set('variabletest4', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"\n\r\n");
		$renderedstring = $tm->renderFromString("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"\n\r\n, with <!--@variabletest4|append:\"TEST DATA \u1F51\u043F &lt; & '\\\"abcdef,[] ὑпііϚϙბĔ',\\\"\n\r\n\"--> as well...");
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"\n\r\n, with TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"\n\r\nTEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"\n\r\n as well...", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the "default" modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierDefault($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure the default is used
		$renderedstring = $tm->renderFromString('Defaults <!--@variabletest|default:"are "-->set');
		$this->assertEquals('Defaults are set', $renderedstring);

		// Set a variable to a blank string, and ensure the default is used
		$tm->set('variabletest2', '');
		$renderedstring = $tm->renderFromString('Defaults <!--@variabletest2|default:"are "-->still set');
		$this->assertEquals('Defaults are still set', $renderedstring);

		// Set a variable to a string, and ensure the default is not used
		$tm->set('variabletest3', 'output');
		$renderedstring = $tm->renderFromString('Now strings are <!--@variabletest3|default:"broken"-->');
		$this->assertEquals('Now strings are output', $renderedstring);

		// Set a variable to zero, and ensure the default is not used
		$tm->set('variabletest4', 0);
		$renderedstring = $tm->renderFromString('The number was <!--@variabletest4|default:"not set"-->');
		$this->assertEquals('The number was 0', $renderedstring);

		// Check that lists work
		$tm->set('variabletest5', array('uno', 'dos'));
		$renderedstring = $tm->renderFromString('Lists joined: <!--@variabletest5|default:"not set"-->');
		$this->assertEquals('Lists joined: unodos', $renderedstring);

		// Check that unicode strings work correctly
		$renderedstring = $tm->renderFromString("No value: <!--@variabletest6|default:\"TEST DATA \u1F51\u043F &lt; & '\\\"abcdef,[] ὑпііϚϙბĔ',\\\"\"-->");
		$this->assertEquals("No value: TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the "count characters" modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierCountCharacters($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that 0 is returned
		$renderedstring = $tm->renderFromString('String length: <!--@variabletest|count_characters-->');
		$this->assertEquals('String length: 0', $renderedstring);

		// Set a basic variable and check the length
		$tm->set('variabletest', 'How long is a piece of string');
		$renderedstring = $tm->renderFromString('<!--@variabletest-->? <!--@variabletest|count_characters--> chars.');
		$this->assertEquals('How long is a piece of string? 29 chars.', $renderedstring);

		// Test with a unicode string - which is currently measured incorrectly (measures single bytes),
		// but for consistency...
		$tm->set('variabletest', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@variabletest-->? <!--@variabletest|count_characters--> chars.');
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"? 63 chars.", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the "count words" modifier - basically.  This is currently set up very basically
	 * in the templatemanager, with no additional charlist, so splits may not be ideal; therefore
	 * not yet tested strenously.
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierCountWords($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that 0 is returned
		$renderedstring = $tm->renderFromString('No words: <!--@variabletest|count_words-->');
		$this->assertEquals('No words: 0', $renderedstring);

		// Set a basic variable and check the word count
		$tm->set('variabletest', 'How long is a piece of string');
		$renderedstring = $tm->renderFromString('<!--@variabletest-->? <!--@variabletest|count_words--> words long.');
		$this->assertEquals('How long is a piece of string? 7 words long.', $renderedstring);

		// Set a slightly more complex sentence
		$tm->set('variabletest', "Hy-phen-ated words currently count as singles; punc.tu.ation causes splits as do numb3rs. (Brackets work fine - as do singles ) - and 123.1 numbers 12 alone count as words.\nWords\nsplit with other\nwhitespace wo\0rks fi\tne as separate words");
		$renderedstring = $tm->renderFromString('That was <!--@variabletest|count_words--> words long.');
		$this->assertEquals('That was 41 words long.', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the number rounding modifier.
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierRound($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that 0 is returned
		$renderedstring = $tm->renderFromString('Nothing set: <!--@variabletest|round-->');
		$this->assertEquals('Nothing set: 0', $renderedstring);

		// Set a basic variable with no precision supplied and ensure integer rounding
		$tm->set('variabletest', 1.235);
		$renderedstring = $tm->renderFromString('<!--@variabletest|round-->');
		$this->assertEquals('1', $renderedstring);

		// Set a basic variable with a precision supplied
		$tm->set('variabletest', 1.235);
		$tm->set('variabletest2', 2);
		$renderedstring = $tm->renderFromString('<!--@variabletest|round:2-->, <!--@variabletest2|round:2-->');
		$this->assertEquals('1.24, 2', $renderedstring);

		// Check that round_half_up behaviour is being used by default
		$tm->set('variabletest', 1.5);
		$tm->set('variabletest2', 2.5);
		$tm->set('variabletest3', 3.5);
		$tm->set('variabletest4', 4.5);
		$renderedstring = $tm->renderFromString('<!--@variabletest|round:0-->, <!--@variabletest2|round:0-->, <!--@variabletest3|round:0-->, <!--@variabletest4|round:0-->');
		$this->assertEquals('2, 3, 4, 5', $renderedstring);

		// Check that numbers passed in as strings are handled correctly
		$tm->set('variabletest', "1.235");
		$tm->set('variabletest2', "-6.123");
		$renderedstring = $tm->renderFromString('<!--@variabletest|round:2--> and <!--@variabletest2|round:2-->');
		$this->assertEquals('1.24 and -6.12', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the number formatting modifier.
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierNumberFormat($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that an empty string
		$renderedstring = $tm->renderFromString('Nothing set:<!--@variabletest|numberformat-->');
		$this->assertEquals('Nothing set:', $renderedstring);

		// Set a basic variable with no precision and get the numbers back formatted and rounded
		$tm->set('variabletest', 1.23);
		$tm->set('variabletest2', 12345);
		$renderedstring = $tm->renderFromString('<!--@variabletest|numberformat--> and <!--@variabletest2|numberformat-->');
		$this->assertEquals('1 and 12,345', $renderedstring);

		// Set a basic variable with a precision supplied
		$tm->set('variabletest', 1.235);
		$tm->set('variabletest2', 2);
		$renderedstring = $tm->renderFromString('<!--@variabletest|numberformat:2-->, <!--@variabletest2|numberformat:2-->');
		$this->assertEquals('1.24, 2.00', $renderedstring);

		// Check that round_half_up behaviour is being used by default
		$tm->set('variabletest', 1.5);
		$tm->set('variabletest2', 2.5);
		$tm->set('variabletest3', 3.5);
		$tm->set('variabletest4', 4.5);
		$renderedstring = $tm->renderFromString('<!--@variabletest|numberformat:0-->, <!--@variabletest2|numberformat:0-->, <!--@variabletest3|numberformat:0-->, <!--@variabletest4|numberformat:0-->');
		$this->assertEquals('2, 3, 4, 5', $renderedstring);

		// Check that large numbers are formatted with thousand separators
		$tm->set('variabletest', 123456.789);
		$tm->set('variabletest2', 12345678);
		$renderedstring = $tm->renderFromString('<!--@variabletest|numberformat:2-->, <!--@variabletest2|numberformat:2-->');
		$this->assertEquals('123,456.79, 12,345,678.00', $renderedstring);

		// Check that numbers passed in as strings are handled correctly
		$tm->set('variabletest', "123456.789");
		$tm->set('variabletest2', "-12345678");
		$renderedstring = $tm->renderFromString('<!--@variabletest|numberformat:2--> and <!--@variabletest2|numberformat:2-->');
		$this->assertEquals('123,456.79 and -12,345,678.00', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the printable number formatting modifier.
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierNumberPrintable($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that an empty string is output
		$renderedstring = $tm->renderFromString('Nothing set:<!--@variabletest|numberprintable-->');
		$this->assertEquals('Nothing set:', $renderedstring);

		// Set a basic variable with no precision and get the numbers back formatted and rounded
		$tm->set('variabletest', 1.23);
		$tm->set('variabletest2', 12345);
		$renderedstring = $tm->renderFromString('<!--@variabletest|numberprintable--> and <!--@variabletest2|numberprintable-->');
		$this->assertEquals('1 and 12,345', $renderedstring);

		// Set a basic variable with a precision supplied, ensuring no additional precision is used
		$tm->set('variabletest', 1.235);
		$tm->set('variabletest2', 2);
		$renderedstring = $tm->renderFromString('<!--@variabletest|numberprintable:2-->, <!--@variabletest2|numberprintable:2-->');
		$this->assertEquals('1.24, 2', $renderedstring);

		// Check that round_half_up behaviour is being used by default
		$tm->set('variabletest', 1.5);
		$tm->set('variabletest2', 2.5);
		$tm->set('variabletest3', 3.5);
		$tm->set('variabletest4', 4.5);
		$renderedstring = $tm->renderFromString('<!--@variabletest|numberprintable:0-->, <!--@variabletest2|numberprintable:0-->, <!--@variabletest3|numberprintable:0-->, <!--@variabletest4|numberprintable:0-->');
		$this->assertEquals('2, 3, 4, 5', $renderedstring);

		// Check that large numbers are formatted with thousand separators
		$tm->set('variabletest', 123456.789);
		$tm->set('variabletest2', 12345678);
		$renderedstring = $tm->renderFromString('<!--@variabletest|numberprintable:2-->, <!--@variabletest2|numberprintable:2-->');
		$this->assertEquals('123,456.79, 12,345,678', $renderedstring);

		// Check that numbers passed in as strings are handled correctly
		$tm->set('variabletest', "123456.789");
		$tm->set('variabletest2', "-12345678");
		$renderedstring = $tm->renderFromString('<!--@variabletest|numberprintable:4--> and <!--@variabletest2|numberprintable:4-->');
		$this->assertEquals('123,456.789 and -12,345,678', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the financial number formatting modifier.
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierFinancial($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that an empty string is output
		$renderedstring = $tm->renderFromString('Nothing set:<!--@variabletest|financial-->');
		$this->assertEquals('Nothing set:', $renderedstring);

		// Ensure strings aren't modified
		$tm->set('variabletest', 'strrring.');
		$renderedstring = $tm->renderFromString('String set: <!--@variabletest|financial-->');
		$this->assertEquals('String set: strrring.', $renderedstring);

		// Set basic variables with no additional arguments and ensure the defaults
		// (prefix, pounds, 2 dec places) are working
		$tm->set('variabletest', 1.23);
		$tm->set('variabletest2', 12345);
		$tm->set('variabletest3', 0);
		$renderedstring = $tm->renderFromString('<!--@variabletest|financial-->, <!--@variabletest2|financial--> and <!--@variabletest3|financial-->');
		$this->assertEquals('&#163;1.23, &#163;12,345.00 and Nil', $renderedstring);

		// Set the symbol position manually
		$tm->set('variabletest', 123);
		$renderedstring = $tm->renderFromString('<!--@variabletest|financial:"prefix"--> vs <!--@variabletest|financial:"postfix"-->');
		$this->assertEquals('&#163;123.00 vs 123.00&#163;', $renderedstring);

		// Set the currency manually, including unicode
		$renderedstring = $tm->renderFromString("<!--@variabletest|financial:\"prefix\":\"€\"--> vs <!--@variabletest|financial:\"postfix\":\"TEST DATA \u1F51\u043F &lt; & '\\\"abcdef,[] ὑпііϚϙბĔ',\\\"\"-->");
		$this->assertEquals("€123.00 vs 123.00TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Set the precision level manually
		$tm->set('variabletest', 123.4567);
		$renderedstring = $tm->renderFromString('<!--@variabletest|financial:"prefix":"£":0--> vs <!--@variabletest|financial:"postfix":"€":3-->');
		$this->assertEquals('£123 vs 123.457€', $renderedstring);

		// Set the decimal separator manually
		$tm->set('variabletest', 123.4567);
		$renderedstring = $tm->renderFromString('<!--@variabletest|financial:"prefix":"£":1:"x"--> vs <!--@variabletest|financial:"postfix":"€":"3":","-->');
		$this->assertEquals('£123x5 vs 123,457€', $renderedstring);

		// Set the thousands separator manually
		$tm->set('variabletest', 1234567.89);
		$renderedstring = $tm->renderFromString('<!--@variabletest|financial:"prefix":"£":1:".":" "--> vs <!--@variabletest|financial:"postfix":"€":"3":",":"."-->');
		$this->assertEquals('£1 234 567.9 vs 1.234.567,890€', $renderedstring);

		// Set the Nil output manually
		$tm->set('variabletest', 0);
		$tm->set('variabletest2', 123456);
		$renderedstring = $tm->renderFromString('<!--@variabletest|financial:"prefix":"£":1:".":" ":"No value here"--> and <!--@variabletest2|financial:"prefix":"£":1:".":" ":"No value here"-->');
		$this->assertEquals('No value here and £123 456.0', $renderedstring);

		// Check that round_half_up behaviour is being used by default
		$tm->set('variabletest', 1.5);
		$tm->set('variabletest2', 2.5);
		$tm->set('variabletest3', 3.5);
		$tm->set('variabletest4', 4.5);
		$renderedstring = $tm->renderFromString('<!--@variabletest|financial:"prefix":"£":"0"-->, <!--@variabletest2|financial:"prefix":"£":0-->, <!--@variabletest3|financial:"prefix":"£":0-->, <!--@variabletest4|financial:"prefix":"£":0-->');
		$this->assertEquals('£2, £3, £4, £5', $renderedstring);

		// Check that negative numbers have a minus symbol in front of the currency separator
		$tm->set('variabletest', -1234567.89);
		$tm->set('variabletest2', -2);
		$renderedstring = $tm->renderFromString('<!--@variabletest|financial:"prefix":"£":1:".":" "--> vs <!--@variabletest2|financial:"postfix":"€":"3":",":"."-->');
		$this->assertEquals('&minus;&nbsp;£1 234 567.9 vs &minus;&nbsp;2,000€', $renderedstring);

		// Check that numbers passed in as strings are handled correctly
		$tm->set('variabletest', "-123456.789");
		$tm->set('variabletest2', "12345678");
		$renderedstring = $tm->renderFromString('<!--@variabletest|financial:"prefix":"£":4--> and <!--@variabletest2|financial:"prefix":"£":4-->');
		$this->assertEquals('&minus;&nbsp;£123,456.7890 and £12,345,678.0000', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the number percentage formatting modifier.
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierPercent($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that an empty string is output
		$renderedstring = $tm->renderFromString('Nothing set:<!--@variabletest|percent-->');
		$this->assertEquals('Nothing set:', $renderedstring);

		// Ensure strings aren't modified
		$tm->set('variabletest', 'strrring.');
		$renderedstring = $tm->renderFromString('String set: <!--@variabletest|percent-->');
		$this->assertEquals('String set: strrring.', $renderedstring);

		// Set basic variables with no additional arguments and ensure the defaults - precision 0, 0=0.
		$tm->set('variabletest', 0.0123);
		$tm->set('variabletest2', 123.45);
		$tm->set('variabletest3', 0);
		$renderedstring = $tm->renderFromString('<!--@variabletest|percent-->, <!--@variabletest2|percent--> and <!--@variabletest3|percent-->');
		$this->assertEquals('1%, 12,345% and 0', $renderedstring);

		// Set the precision level manually
		$tm->set('variabletest', 1.234567);
		$renderedstring = $tm->renderFromString('<!--@variabletest|percent:2--> vs <!--@variabletest|percent:3-->');
		$this->assertEquals('123.46% vs 123.457%', $renderedstring);

		// Set the zero output manually
		$tm->set('variabletest', 0);
		$tm->set('variabletest2', 1234.56);
		$renderedstring = $tm->renderFromString('<!--@variabletest|percent:2:"Nada"--> and <!--@variabletest2|percent:2:"Nada"-->');
		$this->assertEquals('Nada and 123,456.00%', $renderedstring);

		// Check that negative numbers have a minus symbol prepended
		$tm->set('variabletest', -12345.6789);
		$tm->set('variabletest2', -0.02);
		$renderedstring = $tm->renderFromString('<!--@variabletest|percent:1--> vs <!--@variabletest2|percent-->');
		$this->assertEquals('&minus;&nbsp;1,234,567.9% vs &minus;&nbsp;2%', $renderedstring);

		// Check that numbers passed in as strings are handled correctly
		$tm->set('variabletest', "-1234.56789");
		$tm->set('variabletest2', "123456.78");
		$renderedstring = $tm->renderFromString('<!--@variabletest|percent:4--> and <!--@variabletest2|percent-->');
		$this->assertEquals('&minus;&nbsp;123,456.7890% and 12,345,678%', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the byte formatting modifier.
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierBytes($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that an empty string is output
		$renderedstring = $tm->renderFromString('Nothing set:<!--@variabletest|bytes-->');
		$this->assertEquals('Nothing set:', $renderedstring);

		// Ensure strings aren't modified
		$tm->set('variabletest', 'strrring.');
		$renderedstring = $tm->renderFromString('String set: <!--@variabletest|bytes-->');
		$this->assertEquals('String set: strrring.', $renderedstring);

		// Test byte formatting - "B" should be appended, should be rounded to either 1 decimal place
		// (if less than 100 bytes) or 0 decimal places (if more than).
		$tm->set('variabletest', 0.12345);
		$tm->set('variabletest2', 1.2345);
		$tm->set('variabletest3', 12.345);
		$tm->set('variabletest4', 123.45);
		$renderedstring = $tm->renderFromString('<!--@variabletest|bytes-->, <!--@variabletest2|bytes-->, <!--@variabletest3|bytes--> and <!--@variabletest4|bytes-->');
		$this->assertEquals('0.1B, 1.2B, 12.3B and 123B', $renderedstring);

		// Test kilobyte formatting - "KB" should be appended, same rules otherwise
		$tm->set('variabletest', 1234.5);
		$tm->set('variabletest2', 12595);
		$tm->set('variabletest3', 123450);
		$renderedstring = $tm->renderFromString('<!--@variabletest|bytes-->, <!--@variabletest2|bytes--> and <!--@variabletest3|bytes-->');
		$this->assertEquals('1.2KB, 12.3KB and 121KB', $renderedstring);

		// Test megabyte formatting - "MB" should be appended, same rules otherwise
		$tm->set('variabletest', 1274501);
		$tm->set('variabletest2', 12345192);
		$tm->set('variabletest3', 123543169);
		$renderedstring = $tm->renderFromString('<!--@variabletest|bytes-->, <!--@variabletest2|bytes--> and <!--@variabletest3|bytes-->');
		$this->assertEquals('1.2MB, 11.8MB and 118MB', $renderedstring);

		// Test gigabyte formatting - "GB" should be appended, same rules otherwise
		$tm->set('variabletest', 1204512345);
		$tm->set('variabletest2', 19234587654);
		$tm->set('variabletest3', 1090000000000);
		$renderedstring = $tm->renderFromString('<!--@variabletest|bytes-->, <!--@variabletest2|bytes--> and <!--@variabletest3|bytes-->');
		$this->assertEquals('1.1GB, 17.9GB and 1015GB', $renderedstring);

		// Test terabyte formatting - "TB" should be appended, same rules otherwise
		$tm->set('variabletest', 1234512345123);
		$tm->set('variabletest2', 12342587654872);
		$tm->set('variabletest3', 122872654321123);
		$tm->set('variabletest4', 9871232791237122);
		$renderedstring = $tm->renderFromString('<!--@variabletest|bytes-->, <!--@variabletest2|bytes-->, <!--@variabletest3|bytes--> and <!--@variabletest4|bytes-->');
		$this->assertEquals('1.1TB, 11.2TB, 112TB and 8978TB', $renderedstring);

		// Check that numbers passed in as strings are handled correctly
		$tm->set('variabletest', "1234.56789");
		$tm->set('variabletest2', "123456.78");
		$renderedstring = $tm->renderFromString('<!--@variabletest|bytes--> and <!--@variabletest2|bytes-->');
		$this->assertEquals('1.2KB and 121KB', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the timestring formatting modifier.
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierTimeString($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that an empty string is output
		$renderedstring = $tm->renderFromString('Nothing set: "<!--@variabletest|timestring-->"');
		$this->assertEquals('Nothing set: ""', $renderedstring);

		// Ensure strings aren't modified
		$tm->set('variabletest', 'strrring');
		$tm->set('variabletest2', '1st February 2010');
		$renderedstring = $tm->renderFromString('String set: <!--@variabletest|timestring--> and <!--@variabletest2|timestring-->');
		$this->assertEquals('String set: strrring and 1st February 2010', $renderedstring);

		// Test passing in zero
		$tm->set('variabletest', 0);
		$renderedstring = $tm->renderFromString('Time difference: <!--@variabletest|timestring-->.');
		$this->assertEquals('Time difference: 0.', $renderedstring);

		// Test passing in one and a few seconds (numbers and strings)
		$tm->set('variabletest', 1);
		$tm->set('variabletest2', '12');
		$tm->set('variabletest3', 59);
		$renderedstring = $tm->renderFromString('Time difference: <!--@variabletest|timestring-->, <!--@variabletest2|timestring--> and <!--@variabletest3|timestring-->.');
		$this->assertEquals('Time difference: 1 second, 12 seconds and 59 seconds.', $renderedstring);

		// Test passing in 60 seconds, 110 seconds, and then a few minute values
		$tm->set('variabletest', 60);
		$tm->set('variabletest2', 85);
		$tm->set('variabletest3', 110);
		$tm->set('variabletest4', '1300');
		$tm->set('variabletest5', '3500');
		$renderedstring = $tm->renderFromString('Time difference: <!--@variabletest|timestring-->, <!--@variabletest2|timestring-->, <!--@variabletest3|timestring-->, <!--@variabletest4|timestring--> and <!--@variabletest5|timestring-->.');
		$this->assertEquals('Time difference: 1 minute, 1 minute, 2 minutes, 22 minutes and 58 minutes.', $renderedstring);

		// Test passing in 2 hours and higher values up to a day
		$tm->set('variabletest', '3600');
		$tm->set('variabletest2', 5300);
		$tm->set('variabletest3', 7000);
		$tm->set('variabletest4', 23000);
		$tm->set('variabletest5', 86000);
		$renderedstring = $tm->renderFromString('Time difference: <!--@variabletest|timestring-->, <!--@variabletest2|timestring-->, <!--@variabletest3|timestring-->, <!--@variabletest4|timestring--> and <!--@variabletest5|timestring-->.');
		$this->assertEquals('Time difference: 1 hour, 1 hour, 2 hours, 6 hours and 24 hours.', $renderedstring);

		// Test passing in several day counts up to a fortnight
		$tm->set('variabletest', 86400);
		$tm->set('variabletest2', 128000);
		$tm->set('variabletest3', 150000);
		$tm->set('variabletest4', 765000);
		$tm->set('variabletest5', 1180000);
		$renderedstring = $tm->renderFromString('Time difference: <!--@variabletest|timestring-->, <!--@variabletest2|timestring-->, <!--@variabletest3|timestring-->, <!--@variabletest4|timestring--> and <!--@variabletest5|timestring-->.');
		$this->assertEquals('Time difference: 1 day, 1 day, 2 days, 9 days and 14 days.', $renderedstring);

		// Test passing in several week counts
		$tm->set('variabletest', 14 * 86400);
		$tm->set('variabletest2', 18 * 86400);
		$tm->set('variabletest3', 25 * 86400);
		$tm->set('variabletest4', 55 * 86400);
		$renderedstring = $tm->renderFromString('Time difference: <!--@variabletest|timestring-->, <!--@variabletest2|timestring-->, <!--@variabletest3|timestring--> and <!--@variabletest4|timestring-->.');
		$this->assertEquals('Time difference: 2 weeks, 3 weeks, 4 weeks and 8 weeks.', $renderedstring);

		// Test passing in several month counts
		$tm->set('variabletest', 56 * 86400);
		$tm->set('variabletest2', 100 * 86400);
		$tm->set('variabletest3', (string)(200 * 86400));
		$tm->set('variabletest4', 340 * 86400);
		$renderedstring = $tm->renderFromString('Time difference: <!--@variabletest|timestring-->, <!--@variabletest2|timestring-->, <!--@variabletest3|timestring--> and <!--@variabletest4|timestring-->.');
		$this->assertEquals('Time difference: 2 months, 3 months, 7 months and 11 months.', $renderedstring);

		// Test years.
		$tm->set('variabletest', 365 * 86400);
		$tm->set('variabletest2', 500 * 86400);
		$tm->set('variabletest3', 550 * 86400);
		$tm->set('variabletest4', (string)(1200 * 86400));
		$tm->set('variabletest5', 14000 * 86400);
		$renderedstring = $tm->renderFromString('Time difference: <!--@variabletest|timestring-->, <!--@variabletest2|timestring-->, <!--@variabletest3|timestring-->, <!--@variabletest4|timestring--> and <!--@variabletest5|timestring-->.');
		$this->assertEquals('Time difference: 1 year, 1 year, 2 years, 3 years and 38 years.', $renderedstring);

		// Test a few negative values - should be exactly the same but with a minus prepended
		$tm->set('variabletest', -60);
		$tm->set('variabletest2', -23000);
		$tm->set('variabletest3', '-128000');
		$tm->set('variabletest4', -100 * 86400);
		$tm->set('variabletest5', (string)(-14000 * 86400));
		$renderedstring = $tm->renderFromString('Time difference: <!--@variabletest|timestring-->, <!--@variabletest2|timestring-->, <!--@variabletest3|timestring-->, <!--@variabletest4|timestring--> and <!--@variabletest5|timestring-->.');
		$this->assertEquals('Time difference: -1 minute, -6 hours, -1 day, -3 months and -38 years.', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the timepast formatting modifier.
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierTimePast($testdir) {
		$this->markTestSkipped('Test frequently fails due to race condition in TemplateManagerV4::modifier_timepast() - not worth fixing at this time');

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that an empty string is output
		$renderedstring = $tm->renderFromString('Nothing set: "<!--@variabletest|timepast-->"');
		$this->assertEquals('Nothing set: ""', $renderedstring);

		// Ensure strings aren't modified
		$tm->set('variabletest', 'strrring');
		$renderedstring = $tm->renderFromString('String set: <!--@variabletest|timepast-->');
		$this->assertEquals('String set: strrring', $renderedstring);

		// Ensure strings aren't modified even when arguments are supplied
		$tm->set('variabletest', 'strrring');
		$renderedstring = $tm->renderFromString('String set: <!--@variabletest|timepast:"customclass":"Y-m-d":"U":123-->');
		$this->assertEquals('String set: strrring', $renderedstring);

		// Test that times only a few seconds off are returned as "just now".
		$time = time();
		$tm->set('variabletest', $time);
		$tm->set('variabletest2', $time-8);
		$tm->set('variabletest3', $time+8);
		$renderedstring = $tm->renderFromString('Time differences: "<!--@variabletest|timepast-->", "<!--@variabletest2|timepast-->" and "<!--@variabletest3|timepast-->"');
		$this->assertEquals('Time differences: "just now", "just now" and "just now"', $renderedstring);


		/**
		 * Timepast should rely on timestring for formatting actual date strings.  The following is a
		 * long list of tests just to ensure that - not as exhaustive as timestring, but hopefully
		 * enough to detect deviation.
		 * Note also that strings should be returned as "... ago" or "in ...".
		 */
		$time = time();
		$tm->set('variabletest', $time-12);
		$tm->set('variabletest2', (string)$time-59);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast--> and <!--@variabletest2|timepast-->.');
		$this->assertEquals('When: 12 seconds ago and 59 seconds ago.', $renderedstring);
		$tm->set('variabletest', $time-60);
		$tm->set('variabletest2', $time-85);
		$tm->set('variabletest3', $time-110);
		$tm->set('variabletest4', $time-3500);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast-->, <!--@variabletest2|timepast-->, <!--@variabletest3|timepast--> and <!--@variabletest4|timepast-->.');
		$this->assertEquals('When: 1 minute ago, 1 minute ago, 2 minutes ago and 58 minutes ago.', $renderedstring);
		$tm->set('variabletest', $time-3600);
		$tm->set('variabletest2', $time-5300);
		$tm->set('variabletest3', $time-7000);
		$tm->set('variabletest4', $time-86000);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast-->, <!--@variabletest2|timepast-->, <!--@variabletest3|timepast--> and <!--@variabletest4|timepast-->.');
		$this->assertEquals('When: 1 hour ago, 1 hour ago, 2 hours ago and 24 hours ago.', $renderedstring);
		$tm->set('variabletest', $time-86400);
		$tm->set('variabletest2', $time-150000);
		$tm->set('variabletest3', $time-765000);
		$tm->set('variabletest4', $time-1180000);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast-->, <!--@variabletest2|timepast-->, <!--@variabletest3|timepast--> and <!--@variabletest4|timepast-->.');
		$this->assertEquals('When: 1 day ago, 2 days ago, 9 days ago and 14 days ago.', $renderedstring);
		$tm->set('variabletest', $time-(14 * 86400));
		$tm->set('variabletest2', $time-(18 * 86400));
		$tm->set('variabletest3', $time-(25 * 86400));
		$tm->set('variabletest4', $time-(55 * 86400));
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast-->, <!--@variabletest2|timepast-->, <!--@variabletest3|timepast--> and <!--@variabletest4|timepast-->.');
		$this->assertEquals('When: 2 weeks ago, 3 weeks ago, 4 weeks ago and 8 weeks ago.', $renderedstring);
		$tm->set('variabletest', $time-(56 * 86400));
		$tm->set('variabletest2', $time-(100 * 86400));
		$tm->set('variabletest3', (string)($time-(200 * 86400)));
		$tm->set('variabletest4', $time-(340 * 86400));
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast-->, <!--@variabletest2|timepast-->, <!--@variabletest3|timepast--> and <!--@variabletest4|timepast-->.');
		$this->assertEquals('When: 2 months ago, 3 months ago, 7 months ago and 11 months ago.', $renderedstring);
		$tm->set('variabletest', $time-(365 * 86400));
		$tm->set('variabletest2', $time-(500 * 86400));
		$tm->set('variabletest3', $time-(550 * 86400));
		$tm->set('variabletest4', (string)($time-(1200 * 86400)));
		$tm->set('variabletest5', $time-(14000 * 86400));
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast-->, <!--@variabletest2|timepast-->, <!--@variabletest3|timepast-->, <!--@variabletest4|timepast--> and <!--@variabletest5|timepast-->.');
		$this->assertEquals('When: 1 year ago, 1 year ago, 2 years ago, 3 years ago and 38 years ago.', $renderedstring);

		// Test a few times in the future - should be exactly the same but with "in" prepended
		$time = time();
		$tm->set('variabletest', $time+60);
		$tm->set('variabletest2', $time+23000);
		$tm->set('variabletest3', $time+128000);
		$tm->set('variabletest4', $time+(100 * 86400));
		$tm->set('variabletest5', (string)($time+(14000 * 86400)));
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast-->, <!--@variabletest2|timepast-->, <!--@variabletest3|timepast-->, <!--@variabletest4|timepast--> and <!--@variabletest5|timepast-->.');
		$this->assertEquals('When: in 1 minute, in 6 hours, in 1 day, in 3 months and in 38 years.', $renderedstring);


		// Test that the value passed into timepast can be a date-parseable string
		$time = time();
		$tm->set('variabletest', '-4 seconds');
		$tm->set('variabletest2', '+20 seconds');
		$tm->set('variabletest3', date('Y-m-d H:i:s', $time+4500));
		$tm->set('variabletest4', date('jS M Y, H:i:s', $time - 86400));
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast-->, <!--@variabletest2|timepast-->, <!--@variabletest3|timepast--> and <!--@variabletest4|timepast-->.');
		$this->assertEquals('When: just now, in 20 seconds, in 1 hour and 1 day ago.', $renderedstring);

		// Test that if a custom class is supplied, the output is returned in a span with that class
		$time = time();
		$tm->set('variabletest', $time+2);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast:"customclass"-->');
		$this->assertEquals('When: <span class="customclass">just now</span>', $renderedstring);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast:customclass-->');
		$this->assertEquals('When: <span class="customclass">just now</span>', $renderedstring);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast:"two classes, and:colon"-->');
		$this->assertEquals('When: <span class="two classes, and:colon">just now</span>', $renderedstring);

		// Test that if a title format is supplied, a title format is returned
		$time = time();
		$inputtime = $time+8;
		$tm->set('variabletest', $inputtime);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast:"customclass":"Y-m-d H:i:s"-->');
		$this->assertEquals('When: <span class="customclass" title="'.date('Y-m-d H:i:s', $inputtime).'">just now</span>', $renderedstring);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast:"":"Y-m-d H:i:s"-->');
		$this->assertEquals('When: just now', $renderedstring);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast:"customclass":jS-->');
		$this->assertEquals('When: <span class="customclass" title="'.date('jS', $inputtime).'">just now</span>', $renderedstring);

		// Test that if a raw format is supplied, a raw format is returned
		$inputtime = $time+8;
		$tm->set('variabletest', $inputtime);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast:"customclass":"Y-m-d H:i:s":"U"-->');
		$this->assertEquals('When: <span class="customclass" title="'.date('Y-m-d H:i:s', $inputtime).'" raw="'.$inputtime.'">just now</span>', $renderedstring);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast:"":"":"U"-->');
		$this->assertEquals('When: just now', $renderedstring);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast:"customclass":"":"Y-m-d H:i:s"-->');
		$this->assertEquals('When: <span class="customclass" raw="'.date('Y-m-d H:i:s', $inputtime).'">just now</span>', $renderedstring);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast:"customclass":jS:U-->');
		$this->assertEquals('When: <span class="customclass" title="'.date('jS', $inputtime).'" raw="'.$inputtime.'">just now</span>', $renderedstring);

		// Test that if a cutoff is supplied, it is respected - as long as a title format is supplied
		$inputtime = $time = time() - 5500;
		$tm->set('variabletest', $inputtime);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast::"jS M Y"::"5501"-->');
		$this->assertEquals('When: 2 hours ago', $renderedstring);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast::"jS M Y"::123412312-->');
		$this->assertEquals('When: 2 hours ago', $renderedstring);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast::"jS M Y"::5498-->');
		$this->assertEquals('When: '.date('jS M Y', $inputtime), $renderedstring);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast::"jS M Y"::"1"-->');
		$this->assertEquals('When: '.date('jS M Y', $inputtime), $renderedstring);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast::::5549-->');
		$this->assertEquals('When: 2 hours ago', $renderedstring);

		// Ensure that no span is output past cutoff even with full details for the span supplied
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast:"customclass":jS:U:5400-->');
		$this->assertEquals('When: '.date('jS', $inputtime), $renderedstring);

		// Test that if a cutoff works both directions in time
		$inputtime = $time = time() + 5500;
		$tm->set('variabletest', $inputtime);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast::"jS M Y"::"5501"-->');
		$this->assertEquals('When: in 2 hours', $renderedstring);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast::"jS M Y"::123412312-->');
		$this->assertEquals('When: in 2 hours', $renderedstring);
		$renderedstring = $tm->renderFromString('When: <!--@variabletest|timepast::"jS M Y"::5498-->');
		$this->assertEquals('When: '.date('jS M Y', $inputtime), $renderedstring);

		return $testdir;
	}

	/**
	 * Test the truncation modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierTruncate($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that an argument is required
		$e = false;
		try {
			$renderedstring = $tm->renderFromString('Nothing set: "<!--@variabletest|truncate-->"');
		} catch (Exception $e) {}
		$this->assertTrue(is_object($e));
		$this->assertRegexp('/^Missing argument .*/', $e->getMessage());

		// Don't set a variable, and ensure that an empty string is output
		$renderedstring = $tm->renderFromString('Nothing set: "<!--@variabletest|truncate:100-->"');
		$this->assertEquals('Nothing set: ""', $renderedstring);

		// Set a string shorter than the truncation limit and ensure it's not touched
		$tm->set('variabletest', 'shortstring');
		$renderedstring = $tm->renderFromString('Output: "<!--@variabletest|truncate:11-->"');
		$this->assertEquals('Output: "shortstring"', $renderedstring);
		$tm->set('variabletest', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('Output: "<!--@variabletest|truncate:200-->"');
		$this->assertEquals("Output: \"TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"\"", $renderedstring);

		// Set a short string that should be truncated and ensure the default is right-truncation
		$tm->set('variabletest', 'shortstring beyond limit');
		$renderedstring = $tm->renderFromString('Output: "<!--@variabletest|truncate:14-->"');
		$this->assertEquals('Output: "shortstring..."', $renderedstring);
		$tm->set('variabletest', 'This\nis a slightly\longer string, which should be clipped to two letters');
		$renderedstring = $tm->renderFromString('Output: "<!--@variabletest|truncate:5-->"');
		$this->assertEquals('Output: "Th..."', $renderedstring);
		$tm->set('variabletest', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('Output: "<!--@variabletest|truncate:12-->"');
		$this->assertEquals('Output: "TEST DATA..."', $renderedstring);

		// Test left truncation
		$tm->set('variabletest', 'shortstring beyond limit');
		$renderedstring = $tm->renderFromString('Output: "<!--@variabletest|truncate:"14":"start"-->"');
		$this->assertEquals('Output: "...eyond limit"', $renderedstring);

		// Test right truncation
		$tm->set('variabletest', 'shortstring beyond limit');
		$renderedstring = $tm->renderFromString('Output: "<!--@variabletest|truncate:"14":"end"-->"');
		$this->assertEquals('Output: "shortstring..."', $renderedstring);

		// Test middle truncation
		$tm->set('variabletest', 'string with an even amount of characters');
		$renderedstring = $tm->renderFromString('Output: "<!--@variabletest|truncate:"15":"middle"-->"');
		$this->assertEquals('Output: "string...acters"', $renderedstring);
		$renderedstring = $tm->renderFromString('Output: "<!--@variabletest|truncate:"16":"middle"-->"');
		$this->assertEquals('Output: "string...acters"', $renderedstring);
		$renderedstring = $tm->renderFromString('Output: "<!--@variabletest|truncate:"19":"middle"-->"');
		$this->assertEquals('Output: "string w...aracters"', $renderedstring);

		// Test customisation of the collapse string - and that the length of the collapse string is
		// taken into account when shortening the string
		$tm->set('variabletest', 'this is a short string');
		$renderedstring = $tm->renderFromString('Output: "<!--@variabletest|truncate:"10":"end":">>"-->"');
		$this->assertEquals('Output: "this is >>"', $renderedstring);
		$renderedstring = $tm->renderFromString('Output: "<!--@variabletest|truncate:"10":"end":" (more)"-->"');
		$this->assertEquals('Output: "thi (more)"', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the autolink modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierAutolink($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that an empty string is output
		$renderedstring = $tm->renderFromString('Nothing set: "<!--@variabletest|autolink-->"');
		$this->assertEquals('Nothing set: ""', $renderedstring);

		// Test that the problem with &quot being matched as part of the domain
		// described in http://redmine.assanka.com/issues/8188 does not happen
		$tm->set('variabletest', '<p>This string ends with a URL and then &quot; and some more HTML http://www.example.com.&quot;</p>');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: <p>This string ends with a URL and then &quot; and some more HTML <a href="http://www.example.com." target="_blank">http://www.example.com.</a>&quot;</p>', $renderedstring);

		// Set a unicode string and check it isn't affected
		$tm->set('variabletest', "TEST DATA \u1F51\u043F \n\r&lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('No email addresses here... <!--@variabletest|autolink-->');
		$this->assertEquals("No email addresses here... TEST DATA \u1F51\u043F \n\r&lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"", $renderedstring);

		// Set a basic link and ensure it's spotted (and linked to a new window)
		$tm->set('variabletest', 'This text contains the link http://www.assanka.net/ and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://www.assanka.net/" target="_blank">http://www.assanka.net/</a> and more...', $renderedstring);

		// Set a basic link without the scheme, or trailing links
		$tm->set('variabletest', 'This text contains the link www.assanka.net/ and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://www.assanka.net/" target="_blank">www.assanka.net/</a> and more...', $renderedstring);
		$tm->set('variabletest', 'This text contains the link www.assanka.net and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://www.assanka.net" target="_blank">www.assanka.net</a> and more...', $renderedstring);

		// Set a link with page details
		$tm->set('variabletest', 'This text contains the link http://assanka.net/and/page.h?q=45#oh and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://assanka.net/and/page.h?q=45#oh" target="_blank">http://assanka.net/and/page.h?q=45#oh</a> and more...', $renderedstring);

		// Confirm that [ character is matched in the query string
		$tm->set('variabletest', 'This text contains the link http://assanka.net/and/page.h?q=45[ and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://assanka.net/and/page.h?q=45[" target="_blank">http://assanka.net/and/page.h?q=45[</a> and more...', $renderedstring);

		// Confirm that ] character is matched in the query string
		$tm->set('variabletest', 'This text contains the link http://assanka.net/and/page.h?q=45] and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://assanka.net/and/page.h?q=45]" target="_blank">http://assanka.net/and/page.h?q=45]</a> and more...', $renderedstring);

		// Confirm that - character is matched in the path
		$tm->set('variabletest', 'This text contains the link http://assanka.net/and-then/page.h?q=45] and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://assanka.net/and-then/page.h?q=45]" target="_blank">http://assanka.net/and-then/page.h?q=45]</a> and more...', $renderedstring);

		// Confirm that ) character is matched in the path
		$tm->set('variabletest', 'This text contains the link http://assanka.net/and)then/page.h?q=45] and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://assanka.net/and)then/page.h?q=45]" target="_blank">http://assanka.net/and)then/page.h?q=45]</a> and more...', $renderedstring);

		// Confirm that ) character is matched in the query string
		$tm->set('variabletest', 'This text contains the link http://assanka.net/and/page.h?q=4)5] and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://assanka.net/and/page.h?q=4)5]" target="_blank">http://assanka.net/and/page.h?q=4)5]</a> and more...', $renderedstring);

		// Confirm that ( character is matched in the path
		$tm->set('variabletest', 'This text contains the link http://assanka.net/and(then/page.h?q=45] and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://assanka.net/and(then/page.h?q=45]" target="_blank">http://assanka.net/and(then/page.h?q=45]</a> and more...', $renderedstring);

		// Confirm that ( character is matched in the query string
		$tm->set('variabletest', 'This text contains the link http://assanka.net/and/page.h?q=4(5] and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://assanka.net/and/page.h?q=4(5]" target="_blank">http://assanka.net/and/page.h?q=4(5]</a> and more...', $renderedstring);

		// Set a very long URL and ensure it's truncated
		$tm->set('variabletest', 'This text contains the link https://this.is.a.very.long.url.and/bound/to/break/things and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="https://this.is.a.very.long.url.and/bound/to/break/things" target="_blank">https://this.is.a....nd/to/break/things</a> and more...', $renderedstring);

		// Ensure that short links work if prepended by {scheme} or www, but not on their own
		$tm->set('variabletest', 'This text contains the link http://asd.nu and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://asd.nu" target="_blank">http://asd.nu</a> and more...', $renderedstring);
		$tm->set('variabletest', 'This text contains the link ftp://asd.nu and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link ftp://asd.nu and more...', $renderedstring);
		$tm->set('variabletest', 'This text contains the link www.asd.nu and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://www.asd.nu" target="_blank">www.asd.nu</a> and more...', $renderedstring);
		$tm->set('variabletest', 'This text contains the link asd.nu and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link asd.nu and more...', $renderedstring);

		// Ensure that IPs prepended by {scheme} work, but not on their own
		$tm->set('variabletest', 'This text contains the link http://123.1.98.234 and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://123.1.98.234" target="_blank">http://123.1.98.234</a> and more...', $renderedstring);
		$tm->set('variabletest', 'This text contains the link gopher://123.1.98.234 and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link gopher://123.1.98.234 and more...', $renderedstring);
		$tm->set('variabletest', 'This text contains the link http://123.1.98.234/sdf/werwerwr/?123=123%34 and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://123.1.98.234/sdf/werwerwr/?123=123%34" target="_blank">http://123.1.98.23...rwerwr/?123=123%34</a> and more...', $renderedstring);
		$tm->set('variabletest', 'This text contains the link 123.1.98.234 and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link 123.1.98.234 and more...', $renderedstring);

		// Ensure that email addresses are detected
		$tm->set('variabletest', 'This text contains the address joe.bloggs@assanka.net and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the address <a href="mailto:joe.bloggs@assanka.net">joe.bloggs@assanka.net</a> and more...', $renderedstring);
		$tm->set('variabletest', 'This text contains the address I_am-slightly.uncommon+email=address@haha.ha and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the address <a href="mailto:I_am-slightly.uncommon+email=address@haha.ha">I_am-slightly.uncommon+email=address@haha.ha</a> and more...', $renderedstring);

		// Ensure that existing links and HTML aren't affected
		$tm->set('variabletest', 'This text contains the link <a href="http://www.assanka.net/">www.assanka.net</a> and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://www.assanka.net/">www.assanka.net</a> and more...', $renderedstring);
		$tm->set('variabletest', 'This text contains the link <strong>www.assanka.net</strong> and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <strong><a href="http://www.assanka.net" target="_blank">www.assanka.net</a></strong> and more...', $renderedstring);
		$tm->set('variabletest', 'This text contains the link <a name="foo">www.assanka.net</a> and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a name="foo">www.assanka.net</a> and more...', $renderedstring);
		$tm->set('variabletest', 'This text contains the link <a href="http://www.assanka.net/">\n\n test, www.assanka.net and <br />other\ntext</a> and more...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <a href="http://www.assanka.net/">\n\n test, www.assanka.net and <br />other\ntext</a> and more...', $renderedstring);
		$tm->set('variabletest', 'This text contains the link <span title="http://www.assanka.net/">to Assanka</span> inside an attribute, sneakily...');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: This text contains the link <span title="http://www.assanka.net/">to Assanka</span> inside an attribute, sneakily...', $renderedstring);

		// Test that multiple items within one string work
		$tm->set('variabletest', '<p>Trying http://asd.nu, www.assanka.net, http://google.com! Punctuation! Email addresses@domains.com; and of course still <a href="http://test.test">test links.com</a> and www.links.com after them.</p>');
		$renderedstring = $tm->renderFromString('Test: <!--@variabletest|autolink-->');
		$this->assertEquals('Test: <p>Trying <a href="http://asd.nu" target="_blank">http://asd.nu</a>, <a href="http://www.assanka.net" target="_blank">www.assanka.net</a>, <a href="http://google.com" target="_blank">http://google.com</a>! Punctuation! Email <a href="mailto:addresses@domains.com">addresses@domains.com</a>; and of course still <a href="http://test.test">test links.com</a> and <a href="http://www.links.com" target="_blank">www.links.com</a> after them.</p>', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the encode quotes modifier - which actually escapes quotes (adds slashes).
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierEncodeQuotes($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that an empty string is returned
		$renderedstring = $tm->renderFromString('Nothing set: "<!--@variabletest|encode_quotes-->"');
		$this->assertEquals('Nothing set: ""', $renderedstring);

		// Set a partial unicode string and ensure that it isn't affected
		$tm->set('variabletest', "TEST DATA &lt; & abcdef,[] ὑпііϚϙბĔ,");
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_quotes-->');
		$this->assertEquals("TEST DATA &lt; & abcdef,[] ὑпііϚϙბĔ,", $renderedstring);

		// Ensure single quotes are escaped
		$tm->set('variabletest', "This string contains a ' single quote, several times (''')");
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_quotes-->');
		$this->assertEquals("This string contains a \' single quote, several times (\'\'\')", $renderedstring);

		// Ensure double quotes are escaped
		$tm->set('variabletest', 'This string contains a " double quote, several times (""")');
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_quotes-->');
		$this->assertEquals('This string contains a \" double quote, several times (\"\"\")', $renderedstring);

		// Ensure slashes are escaped
		$tm->set('variabletest', 'This string contains \\ backslashes, several times (\\\\\\ /)');
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_quotes-->');
		$this->assertEquals('This string contains \\\\ backslashes, several times (\\\\\\\\\\\\ /)', $renderedstring);

		// Ensure nul bytes
		$tm->set('variabletest', 'This string contains \0 nul bytes - \0\0...');
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_quotes-->');
		$this->assertEquals('This string contains \\\0 nul bytes - \\\0\\\0...', $renderedstring);

		// Set a full unicode string and ensure that it is treated correctly
		$tm->set('variabletest', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_quotes-->');
		$this->assertEquals("TEST DATA \\\u1F51\\\u043F &lt; & \'\\\"abcdef,[] ὑпііϚϙბĔ\\',\\\"", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the encode HTML modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierEncodeHTML($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that an empty string is returned
		$renderedstring = $tm->renderFromString('Nothing set: "<!--@variabletest|encode_html-->"');
		$this->assertEquals('Nothing set: ""', $renderedstring);

		// Ensure that basic HTML is escaped
		$tm->set('variabletest', '<p>This string contains <strong>HTML</strong></p>');
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_html-->');
		$this->assertEquals('&lt;p&gt;This string contains &lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt;', $renderedstring);

		// Check that valid HTML is not required
		$tm->set('variabletest', '1 <<< 123,456');
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_html-->');
		$this->assertEquals('1 &lt;&lt;&lt; 123,456', $renderedstring);

		// Check for ent compat behaviour
		$tm->set('variabletest', 'This is a <"quoted"> string');
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_html-->');
		$this->assertEquals('This is a &lt;&quot;quoted&quot;&gt; string', $renderedstring);
		$tm->set('variabletest', "This is a <'quoted'> string");
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_html-->');
		$this->assertEquals("This is a &lt;'quoted'&gt; string", $renderedstring);

		// Check that by default double encoding is off, but can be switched on
		$tm->set('variabletest', 'This string contains <p> tags and encoded &lt;p&gt; tags for display');
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_html-->');
		$this->assertEquals('This string contains &lt;p&gt; tags and encoded &lt;p&gt; tags for display', $renderedstring);
		$tm->set('variabletest', 'This string contains <p> tags and encoded &lt;p&gt; tags for display');
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_html:true-->');
		$this->assertEquals('This string contains &lt;p&gt; tags and encoded &amp;lt;p&amp;gt; tags for display', $renderedstring);

		// Set a unicode string and ensure that it isn't affected
		$tm->set('variabletest', "TEST DATA \u1F51\u043F &lt; & '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_html-->');
		$this->assertEquals("TEST DATA \u1F51\u043F &lt; &amp; '&quot;abcdef,[] ὑпііϚϙბĔ',&quot;", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the URLencode modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierEncodeURL($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that an empty string is returned
		$renderedstring = $tm->renderFromString('Nothing set: "<!--@variabletest|encode_url-->"');
		$this->assertEquals('Nothing set: ""', $renderedstring);

		// Ensure that alphanumeric content isn't needlessly encoded, together with permitted characters
		$tm->set('variabletest', '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-._');
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_url-->');
		$this->assertEquals('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-._', $renderedstring);

		// Set a unicode string and check proper encoding
		$tm->set('variabletest', "TEST DATA - \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_url-->');
		$this->assertEquals('TEST%20DATA%20-%20%5Cu1F51%5Cu043F%20%26lt%3B%20%0A%0D%26%20%27%22abcdef%2C%5B%5D%20%E1%BD%91%D0%BF%D1%96%D1%96%CF%9A%CF%99%E1%83%91%C4%94%27%2C%22', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the javascript encoding modifier.  This escapes certain js-unsafe characters (eg linebreaks),
	 * and hex-encodes backslashes, quotes and angle brackets for safe js variable transport.
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierEncodeJavascriptVariable($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable, and ensure that an empty string is returned
		$renderedstring = $tm->renderFromString('Nothing set: "<!--@variabletest|encode_javascriptvariable-->"');
		$this->assertEquals('Nothing set: ""', $renderedstring);

		// Ensure that basic content isn't affected
		$tm->set('variabletest', '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-._=+ /!@£$%^*()[]{};:,.etc...');
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_javascriptvariable-->');
		$this->assertEquals('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-._=+ /!@£$%^*()[]{};:,.etc...', $renderedstring);

		// Ensure linebreaks of both types are escaped
		$tm->set('variabletest', "This contains \n, \r, and \r\n...");
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_javascriptvariable-->');
		$this->assertEquals("This contains \\n, \\r, and \\r\\n...", $renderedstring);

		// Ensure quotes, ampersands and angle brackets are hex encoded
		$tm->set('variabletest', "This contains ', \", &, < and >...");
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_javascriptvariable-->');
		$this->assertEquals('This contains \x27, \x22, \x26, \x3c and \x3e...', $renderedstring);

		// Set a unicode string and check proper encoding
		$tm->set('variabletest', "TEST DATA - \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@variabletest|encode_javascriptvariable-->');
		$this->assertEquals('TEST DATA - \u1F51\u043F \x26lt; \\n\\r\x26 \x27\\x22abcdef,[] ὑпііϚϙბĔ\x27,\\x22', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the bbcode modifier, ensuring correct conversion to HTML.
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierBBCode($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Ensure that unset strings return an empty string
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('', $renderedstring);

		// Ensure that basic strings aren't affected
		$tm->set('teststring', 'This string is already <strong>marked up</strong> with <acronym title="Hyper Text Markup Language">HTML</acronym>...');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This string is already <strong>marked up</strong> with <acronym title="Hyper Text Markup Language">HTML</acronym>...', $renderedstring);

		// Ensure that strings with square brackets in aren't affected
		$tm->set('teststring', 'Test data[1] showed significant[2] RESULTS [emphasis mine]');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('Test data[1] showed significant[2] RESULTS [emphasis mine]', $renderedstring);

		// Check that em support works
		$tm->set('teststring', 'This is a [em]basic[/em] string');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is a <em>basic</em> string', $renderedstring);

		// Check that strong support works
		$tm->set('teststring', 'This is a [strong]basic[/em][/strong] string');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is a <strong>basic[/em]</strong> string', $renderedstring);

		// Check that code support works
		$tm->set('teststring', 'This is a [code]basic[/em][/code] string');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is a <code>basic[/em]</code> string', $renderedstring);

		// Check that kbd support works
		$tm->set('teststring', 'This is a [kbd]basic[/em][/kbd] string');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is a <kbd>basic[/em]</kbd> string', $renderedstring);

		// Check that blockquote support works
		$tm->set('teststring', 'This is a [blockquote]basic[/em][/blockquote] string');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is a <blockquote>basic[/em]</blockquote> string', $renderedstring);

		// Check that pre support works
		$tm->set('teststring', 'This is a [pre]basic[/em][/pre][/em] string');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is a <pre>basic[/em]</pre>[/em] string', $renderedstring);

		// Check that multiple tags work correctly
		$tm->set('teststring', 'This is a [em]basic[/em] but [em]repeating[/em] string');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is a <em>basic</em> but <em>repeating</em> string', $renderedstring);

		// Check that attributes are ignored
		$tm->set('teststring', 'This is a [em title="ooh"]basic[/em] string');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is a <em>basic</em> string', $renderedstring);

		// Check that nesting tags works correctly
		$tm->set('teststring', 'This is a [em]basic[/em] string, but with [strong]multiple [em]and[/em] nested[/strong] strings');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is a <em>basic</em> string, but with <strong>multiple <em>and</em> nested</strong> strings', $renderedstring);

		// Check that unicode is preserved within those rules, including linebreaks
		$tm->set('teststring', "test: [strong][em][code][kbd][blockquote][pre]TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"[/pre][/blockquote][/kbd][/code][/em][/strong] done!");
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals("test: <strong><em><code><kbd><blockquote><pre>TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"</pre></blockquote></kbd></code></em></strong> done!", $renderedstring);

		// Check that extra linebreaks inside pre-s work after nl2br to avoid issues
		$tm->set('teststring', "This is a [pre]basic<br />\n <br />\r\n <br />\r test <br /> test \r\n[/pre] string");
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals("This is a <pre>basic\n \r\n \r test <br /> test \r\n</pre> string", $renderedstring);

		// Test [a="foo.com"]foo[/a] support, and similar for url, with unicode and others
		$tm->set('teststring', 'This is [a]not a link[/a], but [a="test"]this is[/a]; similarly [a=\'http://assanka.net\']single quotes[/a] should work.');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is [a]not a link[/a], but <a href="test">this is</a>; similarly <a href="http://assanka.net">single quotes</a> should work.', $renderedstring);
		$tm->set('teststring', "test: [a=\"abcdef,[] ὑпііϚϙბĔ\"]TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"[/a] done!");
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals("test: <a href=\"abcdef,[] ὑпііϚϙბĔ\">TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"</a> done!", $renderedstring);
		$tm->set('teststring', 'This is [url]not a link[/url], but [url="test"]this is[/url]; similarly [url=\'http://assanka.net\']single quotes[/url] should work.');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is [url]not a link[/url], but <a href="test">this is</a>; similarly <a href="http://assanka.net">single quotes</a> should work.', $renderedstring);
		$tm->set('teststring', "test: [url=\"abcdef,[] ὑпііϚϙბĔ\"]TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"[/url] done!");
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals("test: <a href=\"abcdef,[] ὑпііϚϙბĔ\">TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"</a> done!", $renderedstring);
		$tm->set('teststring', 'This is [a]not a link[/a], but [a href="test"]this is[/a]; similarly [a href=\'http://assanka.net\']single quotes[/a] should work.');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is [a]not a link[/a], but <a href="test">this is</a>; similarly <a href="http://assanka.net">single quotes</a> should work.', $renderedstring);
		$tm->set('teststring', "test: [a href=\"abcdef,[] ὑпііϚϙბĔ\"]TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"[/a] done!");
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals("test: <a href=\"abcdef,[] ὑпііϚϙბĔ\">TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"</a> done!", $renderedstring);

		// Test [email="bla@bla"]foo[/email] support, with unicode and others
		$tm->set('teststring', 'This is [email]not a link[/email], but [email="test"]this is[/email]; similarly [email=\'name@example.com\']single quotes[/email] should work.');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is [email]not a link[/email], but <a href="mailto:test">this is</a>; similarly <a href="mailto:name@example.com">single quotes</a> should work.', $renderedstring);
		$tm->set('teststring', "test: [email=\"abcdef,[] ὑпііϚϙბĔ\"]TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"[/email] done!");
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals("test: <a href=\"mailto:abcdef,[] ὑпііϚϙბĔ\">TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"</a> done!", $renderedstring);

		// Test [acronym="Expanded From"]EF[/acronym] support, with unicode and others
		$tm->set('teststring', 'This is [acronym]not an acronym[/acronym], but [acronym="This Is"]TI[/acronym]; similarly [acronym=\'Single Quotes Should Work\']SQSW[/acronym].');
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals('This is [acronym]not an acronym[/acronym], but <acronym title="This Is">TI</acronym>; similarly <acronym title="Single Quotes Should Work">SQSW</acronym>.', $renderedstring);
		$tm->set('teststring', "test: [acronym=\"abcdef,[] ὑпііϚϙბĔ\"]TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"[/acronym] done!");
		$renderedstring = $tm->renderFromString('<!--@teststring|render_bbcode-->');
		$this->assertEquals("test: <acronym title=\"abcdef,[] ὑпііϚϙბĔ\">TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"</acronym> done!", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the breakonsmyb modifier - should add breaks to a string when certain symbols are
	 * encountered (, . _ + - ; /)
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierBreakOnSymbol($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Ensure that unset strings return an empty string
		$renderedstring = $tm->renderFromString('<!--@teststring|breakonsymb-->');
		$this->assertEquals('', $renderedstring);

		// Ensure that basic strings aren't affected, including HTML
		$tm->set('teststring', 'This is a string <strong>with strongs</strong>');
		$renderedstring = $tm->renderFromString('<!--@teststring|breakonsymb-->');
		$this->assertEquals('This is a string <strong>with strongs</strong>', $renderedstring);

		// Ensure that all the expected symbols are replaced by <wbr /> by default
		$tm->set('teststring', 'This is a string ,._+-;/with special characters in the middle - other chars like=>are not affected');
		$renderedstring = $tm->renderFromString('<!--@teststring|breakonsymb-->');
		$this->assertEquals('This is a string ,<wbr />.<wbr />_<wbr />+<wbr />-<wbr />;<wbr />/<wbr />with special characters in the middle -<wbr /> other chars like=>are not affected', $renderedstring);

		// Ensure that HTML is protected
		$tm->set('teststring', 'This is a string <span title=",._+-;/">with special characters in HTML only</span> although others are outside, the span');
		$renderedstring = $tm->renderFromString('<!--@teststring|breakonsymb-->');
		$this->assertEquals('This is a string <span title=",._+-;/">with special characters in HTML only</span> although others are outside,<wbr /> the span', $renderedstring);

		// Check that a custom insertion string can be specified
		$tm->set('teststring', 'This is a string ,._+-;/with special characters in the middle - other chars like=>are not affected');
		$renderedstring = $tm->renderFromString('<!--@teststring|breakonsymb:€-->');
		$this->assertEquals('This is a string ,€.€_€+€-€;€/€with special characters in the middle -€ other chars like=>are not affected', $renderedstring);

		// Set a test unicode string and ensure it's treated correctly
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|breakonsymb-->');
		$this->assertEquals("TEST DATA \u1F51\u043F &lt;<wbr /> \n\r& '\"abcdef,<wbr />[] ὑпііϚϙბĔ',<wbr />\"", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the nowrap modifier - very basic tests as the modifier just appends/prepends a string
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierNoWrap($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Ensure that unset strings return an empty span
		$renderedstring = $tm->renderFromString('<!--@teststring|nowrap-->');
		$this->assertEquals('<span style="white-space:nowrap"></span>', $renderedstring);

		// Set a test unicode string and ensure it's wrapped correctly
		$tm->set('teststring', "TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@teststring|nowrap-->');
		$this->assertEquals("<span style=\"white-space:nowrap\">TEST DATA \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"</span>", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the wordwrap modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierWordWrap($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable and ensure nothing is output
		$renderedstring = $tm->renderFromString('No string: "<!--@testvar|wordwrap-->"');
		$this->assertEquals('No string: ""', $renderedstring);

		// Set a short string and ensure it's not affected
		$tm->set('testvar', 'This is a short string; don\'t hurt me!');
		$renderedstring = $tm->renderFromString('<!--@testvar|wordwrap-->');
		$this->assertEquals('This is a short string; don\'t hurt me!', $renderedstring);

		// Test that by default wraps occur at 72 chars using a linebreak
		$tm->set('testvar', str_repeat(' .', 156));
		$renderedstring = $tm->renderFromString('<!--@testvar|wordwrap-->');
		$this->assertEquals(" . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n. . . . . . . . . . . .", $renderedstring);

		// Test that by default breaks only occur around whitespace
		$tm->set('testvar', str_repeat("word,word,words ", 10));
		$renderedstring = $tm->renderFromString('<!--@testvar|wordwrap-->');
		$this->assertEquals("word,word,words word,word,words word,word,words word,word,words\nword,word,words word,word,words word,word,words word,word,words\nword,word,words word,word,words ", $renderedstring);

		// Test that linebreaks already in place are respected
		$tm->set('testvar', str_repeat(str_repeat("aaaa ", 10)."\n", 3));
		$renderedstring = $tm->renderFromString('<!--@testvar|wordwrap-->');
		$this->assertEquals("aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa \naaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa \naaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa \n", $renderedstring);

		// Test that changing the width works
		$tm->set('testvar', str_repeat("a ", 10));
		$renderedstring = $tm->renderFromString('<!--@testvar|wordwrap:5-->');
		$this->assertEquals("a a a\na a a\na a a\na ", $renderedstring);
		$renderedstring = $tm->renderFromString('<!--@testvar|wordwrap:"10"-->');
		$this->assertEquals("a a a a a\na a a a a ", $renderedstring);

		// Test that changing the linebreak string works
		$tm->set('testvar', str_repeat("a ", 10));
		$renderedstring = $tm->renderFromString('<!--@testvar|wordwrap:5:"\r"-->');
		$this->assertEquals("a a a\ra a a\ra a a\ra ", $renderedstring);
		$renderedstring = $tm->renderFromString('<!--@testvar|wordwrap:10:"<br />"-->');
		$this->assertEquals("a a a a a<br />a a a a a ", $renderedstring);

		// Check that linebreaks in place are only repected for the matching character
		$tm->set('testvar', str_repeat(str_repeat("aaaa ", 10)."\n", 3));
		$renderedstring = $tm->renderFromString('<!--@testvar|wordwrap:72:"\r"-->');
		$this->assertEquals("aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa \naaaa aaaa aaaa aaaa\raaaa aaaa aaaa aaaa aaaa aaaa \naaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa\raaaa aaaa \n", $renderedstring);

		// Check that by default, long words aren't cut
		$tm->set('testvar', str_repeat("abcde", 10));
		$renderedstring = $tm->renderFromString('<!--@testvar|wordwrap:10:"\n"-->');
		$this->assertEquals("abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde", $renderedstring);

		// Check that setting cut to true forces a cut
		$tm->set('testvar', str_repeat("abcde", 10));
		$renderedstring = $tm->renderFromString("<!--@testvar|wordwrap:10:\"\n\":true-->");
		$this->assertEquals("abcdeabcde\nabcdeabcde\nabcdeabcde\nabcdeabcde\nabcdeabcde", $renderedstring);

		return $testdir;
	}

	/**
	 * Test the ischecked modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierIsChecked($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable and ensure nothing extra is output
		$renderedstring = $tm->renderFromString('Unset vars mean <input type="checkbox" value="test"<!--@teststring|ischecked--> />');
		$this->assertEquals('Unset vars mean <input type="checkbox" value="test" />', $renderedstring);

		// Set a variable to 0 and false and ensure selected is not output
		$tm->set('testvar', 0);
		$tm->set('testvar2', '0');
		$tm->set('testvar3', false);
		$renderedstring = $tm->renderFromString('"<!--@testvar|ischecked-->", <input type="checkbox" value="test"<!--@testvar2|ischecked--> /> and <input type="checkbox"<!--@testvar3|ischecked--> />');
		$this->assertEquals('"", <input type="checkbox" value="test" /> and <input type="checkbox" />', $renderedstring);

		// Set a variable to 1 and true and ensure selected is output correctly
		$tm->set('testvar', 1);
		$tm->set('testvar2', true);
		$renderedstring = $tm->renderFromString('<input type="checkbox" value="test"<!--@testvar|ischecked--> /> and <input type="checkbox"<!--@testvar2|ischecked--> />');
		$this->assertEquals('<input type="checkbox" value="test" checked="checked" /> and <input type="checkbox" checked="checked" />', $renderedstring);

		// Set a variable to strings and check for selected
		$tm->set('testvar', 'this is a string');
		$tm->set('testvar2', "TEST DATA - \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<input type="checkbox" value="test"<!--@testvar|ischecked--> /> and <input type="checkbox"<!--@testvar2|ischecked--> />');
		$this->assertEquals('<input type="checkbox" value="test" checked="checked" /> and <input type="checkbox" checked="checked" />', $renderedstring);

		// Set the second argument to a value to compare against and ensure it's used correctly
		$tm->set('testvar', 'this is a string');
		$tm->set('testvar2', "TEST DATA - \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<input type="checkbox" value="test"<!--@testvar|ischecked:"this is a string"--> /> and <input type="checkbox"<!--@testvar2|ischecked:"this is a string"--> />');
		$this->assertEquals('<input type="checkbox" value="test" checked="checked" /> and <input type="checkbox" />', $renderedstring);
		$tm->set('testvar', 'this is a string');
		$tm->set('testvar2', "TEST DATA - \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString("<input type=\"checkbox\" value=\"test\"<!--@testvar|ischecked:\"TEST DATA - \u1F51\u043F &lt; \n\r& '\\\"abcdef,[] ὑпііϚϙბĔ',\\\"\"--> /> and <input type=\"checkbox\"<!--@testvar2|ischecked:\"TEST DATA - \u1F51\u043F &lt; \n\r& '\\\"abcdef,[] ὑпііϚϙბĔ',\\\"\"--> />");
		$this->assertEquals('<input type="checkbox" value="test" /> and <input type="checkbox" checked="checked" />', $renderedstring);
		$tm->set('testvar', 18);
		$tm->set('testvar2', 19);
		$tm->set('testvar3', 20);
		$renderedstring = $tm->renderFromString('<input type="checkbox" value="test"<!--@testvar|ischecked:19--> />, <input type="checkbox" value="test2"<!--@testvar2|ischecked:19--> /> and <input type="checkbox" value="test3"<!--@testvar3|ischecked:19--> />');
		$this->assertEquals('<input type="checkbox" value="test" />, <input type="checkbox" value="test2" checked="checked" /> and <input type="checkbox" value="test3" />', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the isselected modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierIsSelected($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable and ensure nothing extra is output
		$renderedstring = $tm->renderFromString('Unset vars mean <option value="test"<!--@teststring|isselected-->>Test</option>');
		$this->assertEquals('Unset vars mean <option value="test">Test</option>', $renderedstring);

		// Set a variable to 0 and false and ensure selected is not output
		$tm->set('testvar', 0);
		$tm->set('testvar2', '0');
		$tm->set('testvar3', false);
		$renderedstring = $tm->renderFromString('"<!--@testvar|isselected-->", <option value="test"<!--@testvar2|isselected-->>Test</option> and <option<!--@testvar3|isselected-->>Test 2</option>');
		$this->assertEquals('"", <option value="test">Test</option> and <option>Test 2</option>', $renderedstring);

		// Set a variable to 1 and true and ensure selected is output correctly
		$tm->set('testvar', 1);
		$tm->set('testvar2', true);
		$renderedstring = $tm->renderFromString('<option value="test"<!--@testvar|isselected-->>Test</option> and <option<!--@testvar2|isselected-->>Test 2</option>');
		$this->assertEquals('<option value="test" selected="selected">Test</option> and <option selected="selected">Test 2</option>', $renderedstring);

		// Set a variable to strings and check for selected
		$tm->set('testvar', 'this is a string');
		$tm->set('testvar2', "TEST DATA - \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<option value="test"<!--@testvar|isselected-->>Test</option> and <option<!--@testvar2|isselected-->>Test 2</option>');
		$this->assertEquals('<option value="test" selected="selected">Test</option> and <option selected="selected">Test 2</option>', $renderedstring);

		// Set the second argument to a value to compare against and ensure it's used correctly
		$tm->set('testvar', 'this is a string');
		$tm->set('testvar2', "TEST DATA - \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<option value="test"<!--@testvar|isselected:"this is a string"-->>Test</option> and <option<!--@testvar2|isselected:"this is a string"-->>Test 2</option>');
		$this->assertEquals('<option value="test" selected="selected">Test</option> and <option>Test 2</option>', $renderedstring);
		$tm->set('testvar', 'this is a string');
		$tm->set('testvar2', "TEST DATA - \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString("<option value=\"test\"<!--@testvar|isselected:\"TEST DATA - \u1F51\u043F &lt; \n\r& '\\\"abcdef,[] ὑпііϚϙბĔ',\\\"\"-->>Test</option> and <option<!--@testvar2|isselected:\"TEST DATA - \u1F51\u043F &lt; \n\r& '\\\"abcdef,[] ὑпііϚϙბĔ',\\\"\"-->>Test 2</option>");
		$this->assertEquals('<option value="test">Test</option> and <option selected="selected">Test 2</option>', $renderedstring);
		$tm->set('testvar', 18);
		$tm->set('testvar2', 19);
		$tm->set('testvar3', 20);
		$renderedstring = $tm->renderFromString('<option value="test"<!--@testvar|isselected:19-->>Test</option>, <option value="test2"<!--@testvar2|isselected:19-->>Test II</option> and <option value="test3"<!--@testvar3|isselected:19-->>Test III</option>');
		$this->assertEquals('<option value="test">Test</option>, <option value="test2" selected="selected">Test II</option> and <option value="test3">Test III</option>', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the truefalse modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierTrueFalse($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable and ensure no is output
		$renderedstring = $tm->renderFromString('Unset vars evaluate as: "<!--@teststring|truefalse-->"');
		$this->assertEquals('Unset vars evaluate as: "False"', $renderedstring);

		// Set a variable to 0 and false and ensure no is output
		$tm->set('testvar', 0);
		$tm->set('testvar2', '0');
		$tm->set('testvar3', false);
		$renderedstring = $tm->renderFromString('<!--@testvar|truefalse-->, <!--@testvar2|truefalse--> and <!--@testvar3|truefalse-->');
		$this->assertEquals('False, False and False', $renderedstring);

		// Set a variable to 1 and true and ensure yes is output
		$tm->set('testvar', 1);
		$tm->set('testvar2', true);
		$renderedstring = $tm->renderFromString('<!--@testvar|truefalse--> and <!--@testvar2|truefalse-->');
		$this->assertEquals('True and True', $renderedstring);

		// Set a variable to strings and check for Yes
		$tm->set('testvar', 'this is a string');
		$tm->set('testvar2', "TEST DATA - \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@testvar|truefalse--> and <!--@testvar2|truefalse-->');
		$this->assertEquals('True and True', $renderedstring);

		return $testdir;
	}

	/**
	 * Test the yesno modifier
	 * @depends testBasicVariableSetting
	 */
	public function testTemplateModifierYesNo($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable and ensure no is output
		$renderedstring = $tm->renderFromString('Unset vars evaluate as: "<!--@teststring|yesno-->"');
		$this->assertEquals('Unset vars evaluate as: "No"', $renderedstring);

		// Set a variable to 0 and false and ensure no is output
		$tm->set('testvar', 0);
		$tm->set('testvar2', '0');
		$tm->set('testvar3', false);
		$renderedstring = $tm->renderFromString('<!--@testvar|yesno-->, <!--@testvar2|yesno--> and <!--@testvar3|yesno-->');
		$this->assertEquals('No, No and No', $renderedstring);

		// Set a variable to 1 and true and ensure yes is output
		$tm->set('testvar', 1);
		$tm->set('testvar2', true);
		$renderedstring = $tm->renderFromString('<!--@testvar|yesno--> and <!--@testvar2|yesno-->');
		$this->assertEquals('Yes and Yes', $renderedstring);

		// Set a variable to strings and check for Yes
		$tm->set('testvar', 'this is a string');
		$tm->set('testvar2', "TEST DATA - \u1F51\u043F &lt; \n\r& '\"abcdef,[] ὑпііϚϙბĔ',\"");
		$renderedstring = $tm->renderFromString('<!--@testvar|yesno--> and <!--@testvar2|yesno-->');
		$this->assertEquals('Yes and Yes', $renderedstring);

		return $testdir;
	}

	/**
	 * Test that modifier combining works correctly
	 * @depends testTemplateModifierCapitalise
	 * @depends testTemplateModifierLowercase
	 * @depends testTemplateModifierReplace
	 * @depends testTemplateModifierTruncate
	 * @depends testTemplateModifierYesNo
	 */
	public function testTemplateModifierCombining($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable and ensure multiple modifiers pass this through correctly
		$renderedstring = $tm->renderFromString('Unset vars evaluate as: "<!--@teststring|capitalise,replace:"in":"out",truncate:20,yesno-->"');
		$this->assertEquals('Unset vars evaluate as: "No"', $renderedstring);

		// Pass in a string and check that a number of modifiers are applied
		$tm->set('teststring', 'this is a tset string which is reasonably longish');
		$renderedstring = $tm->renderFromString('<!--@teststring|capitalise,replace:"Tset":"Test",truncate:24-->');
		$this->assertEquals('This Is A Test String...', $renderedstring);

		// Ensure that the order in which modifiers are passed in is respected
		$tm->set('teststring', 'STRING TSET STRING');
		$renderedstring = $tm->renderFromString('<!--@teststring|lowercase,replace:"tset":"test",capitalise,truncate:14-->');
		$this->assertEquals('String Test...', $renderedstring);
		$renderedstring = $tm->renderFromString('<!--@teststring|replace:"tset":"test",capitalise,lowercase-->');
		$this->assertEquals('string tset string', $renderedstring);

		return $testdir;
	}

	/**
	 * Test that modifiers work with functions, server variables, etc
	 * @depends testTemplateFunctionArguments
	 * @depends testTemplateServerArguments
	 * @depends testTemplateSpecialArguments
	 * @depends testTemplateModifierCapitalise
	 * @depends testTemplateModifierUppercase
	 * @depends testTemplateModifierReplace
	 * @depends testTemplateModifierTruncate
	 * @depends testTemplateModifierYesNo
	 * @depends testTemplateModifierDateFormat
	 */
	public function testTemplateFunctionModifier($testdir) {

		// Set up a templatemanager
		$tm = new TemplateManager();

		// Don't set a variable and ensure an unknown function triggers this correctly
		$renderedstring = $tm->renderFromString('Unset vars evaluate as: "<!--@FN:thisShouldBeAnUndefinedFunction|yesno-->"');
		$this->assertEquals('Unset vars evaluate as: "No"', $renderedstring);

		// Use a function with arguments and ensure modifiers apply
		$tm->set('teststring', 'Test string');
		$renderedstring = $tm->renderFromString('<!--@teststring-->: <!--@FN:templateManagerReturnTestString|args:"it is indeed a string",replace:"it":"The string",capitalise-->');
		$this->assertEquals('Test string: The String Is Indeed A String', $renderedstring);

		// Check that SERVER variables can have modifiers applied
		$_SERVER['tmtestvar2'] = 'servervariable';
		$renderedstring = $tm->renderFromString('<!--@teststring-->: <!--@SERVER:tmtestvar2|replace:"r":"r ",capitalise-->');
		$this->assertEquals('Test string: Ser Ver Var Iable', $renderedstring);

		// Check that SPECIAL variables can have modifiers applied
		$renderedstring = $tm->renderFromString('<!--@SPECIAL:now|dateformat:"Y-m-d: M",uppercase-->');
		$this->assertEquals(strtoupper(date('Y-m-d: M')), $renderedstring);

		return $testdir;
	}
}

if (!function_exists('templateManagerReturnTestString')) {
	/**
	 * Define a public function for FN testing
	 */
	function templateManagerReturnTestString($string = "this is a test string") {
		return $string;
	}
}

if (!function_exists('templateManagerTestMultiplyArguments')) {
	/**
	 * Define a public function for FN testing
	 */
	function templateManagerTestMultiplyArguments($arg1, $arg2 = 10) {
		return $arg1 * $arg2;
	}
}
