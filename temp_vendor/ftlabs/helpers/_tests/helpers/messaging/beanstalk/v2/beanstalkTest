<?php
/**
 * Basic Tests for beanstalk classes (v2)
 *
 * More Complex Tests require running multiple processes - hard to reproduce using phpunit
 *
 * $Revision$
 * $Date$
 * $Author$
 *
 * @codingstandard Assanka
 * @author Luke Blaney <luke.blaney@assanka.net>
 * @copyright Assanka Limited [All rights reserved]
 */

require_once $_SERVER['CORE_PATH'].'/helpers/messaging/beanstalk/v2/beanstalk';

class beanstalkTest extends PHPUnit_Framework_TestCase {

	protected $tube;

	protected function setUp() {
		$this->tube = 'assanka-test-'.rand();
	}

	protected function tearDown() {
		$clear = new BeanstalkPool();
		$clear->watch($this->tube);
		while ($job = $clear->reserve(0)) {
			$job->delete();
		}
	}

	public function testSimpleSend() {

		$msgstr = "Mogę jeść szkło i mi nie szkodzi. ".rand();
		$out = new BeanstalkPool();
		$out->useTube($this->tube);
		$out->put($msgstr);

		for ($ii = 0; $ii < 10; $ii++) {
			$in = new BeanstalkPool();
			$in->watch($this->tube);
			$job = $in->reserve(0);
			if ($job) break;
		}
		$this->assertNotEmpty($job, "No Job returned after 10 attempts (There's < 0.01% probability of this failing through chance)");
		$this->assertEquals($msgstr, $job->getBody(), "Message not consistent");
		$job->delete();

	}

	public function testReserveBlocks() {
		$empty = new BeanstalkPool();
		$empty->watch($this->tube);
		foreach (array(0, 1, 5, 10) as $targettime) {
			$starttime = microtime(true);
			$job = $empty->reserve($targettime);
			$timetaken = microtime(true) - $starttime;
			$this->assertFalse($job, "Reserve returned a job from an empty tube");
			$this->assertGreaterThan($targettime, $timetaken, "reserve didn't wait long enough");
			$this->assertLessThan($targettime + 0.5, $timetaken, "reserve waited too long");
		}

	}
}
