<?php
/*
########################################################
Layout functions for the admin area

Accepted Inputs:
none

04/01/2006
Andrew Betts
Assanka Ltd
########################################################
*/
$startmicrotime=microtime();

require_once($_SERVER["DOCUMENT_ROOT"]."/lib/inc/global");
require_once($_SERVER["CORE_PATH"]."/web/admin/v3/auth");

if (!isset($_SERVER["ADMIN_AREA_PATH"])) trigger_error("Required constant ADMIN_AREA_PATH not set in environment", E_USER_ERROR);
if (!isset($_SERVER["CORE_PATH"])) trigger_error("Required constant CORE_PATH not set in environment", E_USER_ERROR);
if (!isset($_SERVER["CORE_WEB_ALIAS"])) trigger_error("Required constant CORE_WEB_ALIAS not set in environment", E_USER_ERROR);
if (!isset($_SERVER["SITENAME"])) trigger_error("Required constant SITENAME not set in environment", E_USER_ERROR);

ob_start();

// Abort execution if the user is logged in and attempting to prefetch
// a page; this prevents mozilla or google web accelerator prefetching
// and inadvertently causing actions to occur.
if (isset($_SERVER["HTTP_X_MOZ"]) && (($_SERVER["HTTP_X_MOZ"]) == "prefetch") && ($_SERVER["PHP_AUTH_USER"] || $_SERVER["PHP_AUTH_USER"])) {
	header('HTTP/1.1 412 Precondition Failed');
	exit("This page has been withheld as you appear to be trying to prefetch it.  This page should never be seen, and as you are obviously seeing it, please contact Assanka support on 0870 085 2038.");
}

define("JS_HIDE_ON_CLICK", "this.style.visibility = 'hidden';");

class Page {

	var $sections;
	var $sectionnames;
	var $title;
	var $leftnav;
	var $content;
	var $rightnav;
	var $actions;
	var $outlineenabled = false;
	var $extrastyles;
	var $extrascript;
	var $gatepasshost;
	var $gatepassssl = true;
	var $nosupport = false;
	var $welcome = true;

	function page() {
		$this->sections = array();
		$this->extrascript = array();
		$this->extrastyles = array();
		$this->sectionnames = array();

		// Disable caching
		header("Expires: Mon, 04 Oct 2004 09:00:00 GMT");
		header("Cache-Control: max-age=0, public");
		header("Cache-Control: no-store, no-cache, must-revalidate", false);
		header("Cache-Control: post-check=0, pre-check=0", false);
		header("Pragma: no-cache");
	}

	function showGatepass($show) {
		// Deprecated: just set gatepass host.
	}

	function setGatepassHost($host) {
		$this->gatepasshost = $host;
	}

	function setGatepassSSL($usessl) {
		$this->gatepassssl = $usessl;
	}

	function addSection($path, $filepath, $secname, $subnav) {
		$nextsection = sizeof($this->sections);
		$this->sections[$nextsection] = array();
		$this->sections[$nextsection]["path"] = $path;
		$this->sections[$nextsection]["filepath"] = $filepath;
		$this->sections[$nextsection]["secname"] = $secname;
		$this->sections[$nextsection]["subnav"] = $subnav;
		$this->sectionnames[] = $secname;
	}

	// Add the Outline cms tab
	function addOutline($edition) {
		require_once($_SERVER["CORE_PATH"]."/web/admin/v3/cms/cmslib");
		$this->outlineenabled = $edition;

		$nextsection = sizeof($this->sections);
		$this->sections[$nextsection] = array("path"=>$_SERVER["ADMIN_AREA_PATH"]."/cms/index", "filepath"=>$_SERVER["CORE_WEB_ALIAS"]."/admin/v3/cms/", "secname"=>"Content", "subnav"=>array("Pages" => $_SERVER["ADMIN_AREA_PATH"]."/cms/index"));
		if (cmsIsFunctionalityEnabled("assets")) $this->sections[$nextsection]["subnav"]["Assets"] = $_SERVER["ADMIN_AREA_PATH"]."/cms/assets";
		if (cmsIsFunctionalityEnabled("taskdashboard")) $this->sections[$nextsection]["subnav"]["My Tasks"] = $_SERVER["ADMIN_AREA_PATH"]."/cms/tasks";
		if (cmsIsFunctionalityEnabled("multipleusers") and ((checkIfAuth("content", "", false) == "administrator"))) $this->sections[$nextsection]["subnav"]["User Permissions"] = $_SERVER["ADMIN_AREA_PATH"]."/cms/useradmin/index";
	}

	// Add the Statistics tab
	function addStatistics() {
		$nextsection = sizeof($this->sections);
		$this->sections[$nextsection] = array("path"=>$_SERVER["ADMIN_AREA_PATH"]."/stats/", "filepath"=>$_SERVER["CORE_WEB_ALIAS"]."/admin/v3/stats/","secname"=>"Statistics", "subnav"=> array(
			"Hits by day"=>$_SERVER["ADMIN_AREA_PATH"]."/stats/hitsbyday",
			"Length of Visit"=>$_SERVER["ADMIN_AREA_PATH"]."/stats/lengthofvisit",
			"Popular Pages"=>$_SERVER["ADMIN_AREA_PATH"]."/stats/popularpages",
			"Visitors"=>$_SERVER["ADMIN_AREA_PATH"]."/stats/visitors",
			"File Types"=>$_SERVER["ADMIN_AREA_PATH"]."/stats/filetypes",
			"Operating Systems"=>$_SERVER["ADMIN_AREA_PATH"]."/stats/os",
			"Browsers"=>$_SERVER["ADMIN_AREA_PATH"]."/stats/browsers",
			"404 Errors"=>$_SERVER["ADMIN_AREA_PATH"]."/stats/404s",
			"Search Referrals"=>$_SERVER["ADMIN_AREA_PATH"]."/stats/searchreferrals",
			"Other Referrals"=>$_SERVER["ADMIN_AREA_PATH"]."/stats/referrals",
			"Search Keywords"=>$_SERVER["ADMIN_AREA_PATH"]."/stats/searchkeywords",
			"Traffic Flow Maps"=>$_SERVER["ADMIN_AREA_PATH"]."/stats/flowmap/")
		);
		if (checkIfAuth("statistics", "", false, array("server"))) $this->sections[$nextsection]["subnav"]["Overall"] = $_SERVER["ADMIN_AREA_PATH"]."/stats/overall";
	}

	function addContent($type, $html) {
		switch($type) {
			case "leftnav": $this->leftnav .= $html; break;
			case "content": $this->content .= $html; break;
			case "context": $this->rightnav .= $html; break;
		}
	}

	function suppressSupportTab() {
		$this->nosupport = true;
	}

	function suppressWelcomeText() {
		$this->welcome = false;
	}

	function addAction($name, $label, $href="", $onclick="", $hiddenparams=false, $invisible=false, $disabled=false,$hidden=false) {
		$op = "<li><a href=\"".(($href)?$href:"javascript:void(0)");
		if (is_array($hiddenparams)) {
			$qrystr = array();
			foreach($hiddenparams as $key=>$value) {
				$qrystr[] = $key."=".rawurlencode($value);
			}
			$op .= "?".join($qrystr, "&");
		}
		$op .= "\" name=\"action_".$name."\" id=\"action_".$name."\"";
		if ($disabled) $op .= " disabled=\"disabled\"";
		$style = array();
		if ($invisible) $style[] = "display: none;";
		if ($hidden) $style[] = "visibility: hidden;";
		if (sizeOf($style)) {
			$op .= "style=\"".join("",$style)."\"";
		}
		if ($onclick) {
			if (strpos($onclick, "return") === false) {
				if (substr($onclick, strlen($onclick) - 1, 1) != ";") $onclick .= ";";
				$onclick .= " return false;";
			}
			$op .= " onclick=\"".$onclick."\"";
		}
		$op .= ">".$label."</a></li>";
		$this->actions .= $op;
	}

	function addStyles($file, $media="screen") {
		$this->extrastyles[] = array($file, $media);
	}

	function addScript($file) {
		$this->extrascript[] = $file;
	}

	// Output the page to the browser
	function render() {
		global $db, $startmicrotime;

		// Load information about the current user (if using HTTP auth and a cfg_adminusers MySQL table)
		$authuser = (!empty($_SERVER["PHP_AUTH_USER"]))?$_SERVER["PHP_AUTH_USER"]:null;
		if (!$authuser and !empty($_SERVER["REMOTE_USER"])) $authuser = $_SERVER["REMOTE_USER"];
		if ($authuser and !empty($_SERVER["PASSWD_PATH"])) {
			$result = $db->query("SELECT * FROM cfg_adminusers WHERE htaccessuser='".$db->sqlenc($authuser)."'");
			if (!mysql_num_rows($result)) trigger_error("User '$authuser' logged in but not found in database", E_USER_ERROR);
			$user = $db->fetchrow($result);

			$_SESSION["userrealname"]=$user["name"];

			// Add a support tab to the section list, and provide subsections if the user is a
			// support user.  If they are not a support user, the support tab is displayed anyway
			// and the user receives a message when they select it with a list of available
			// support users.
			if (!$this->nosupport and !in_array("Support", $this->sectionnames)) {
				$nextsection = sizeof($this->sections);
				$this->sections[$nextsection] = array("id"=>"section-support", "path"=>"/core/admin/v3/support/", "filepath"=>"/core/admin/v3/support/", "secname"=>"Support", "subnav"=>array("Getting Started"=>"/core/admin/v3/support/info"));
				if ($user["supportuserid"]) {
					$this->sections[$nextsection]["subnav"]["Request Support"] = "/core/admin/v3/support/new";
					$this->sections[$nextsection]["subnav"]["View Support Requests"] = "/core/admin/v3/support/list";
					$this->sections[$nextsection]["subnav"]["Knowledge"] = "/core/admin/v3/support/knowledge/";
				}
			}

			// Finally add the config tab, but only if a passwd file has been specified
			$nextsection = sizeof($this->sections);
			$this->sections[$nextsection] = array("path"=>$_SERVER["ADMIN_AREA_PATH"]."/config/", "filepath"=>$_SERVER["CORE_WEB_ALIAS"]."/admin/v3/config", "secname"=>"Config", "subnav"=>array("User Management"=>$_SERVER["ADMIN_AREA_PATH"]."/config/users/"));
		}

		// Output
		$doctype = (isset($_SERVER["CORE_SKIN_DOCTYPE"]))?$_SERVER["CORE_SKIN_DOCTYPE"]:"-//W3C//DTD HTML 4.01 Transitional//EN";
		?>
		<!DOCTYPE HTML PUBLIC "<?=$doctype?>">
		<html>
		<head>
		<title><?=$this->title?><?=($this->title && $_SERVER["SITENAME"])?" - ":""?><?=$_SERVER["SITENAME"]?></title>
		<link REL="SHORTCUT ICON" HREF="/lib/img/icon.ico" />
		<link rel="stylesheet" type="text/css" href="<? echo (isset($_SERVER["CORE_SKIN_CSS_PATH"])?$_SERVER["CORE_SKIN_CSS_PATH"]:($_SERVER["CORE_WEB_ALIAS"]."/admin/v3/css")); ?>/standard" media="screen" />
		<link rel="stylesheet" type="text/css" href="<? echo (isset($_SERVER["CORE_SKIN_CSS_PATH"])?$_SERVER["CORE_SKIN_CSS_PATH"]:($_SERVER["CORE_WEB_ALIAS"]."/admin/v3/css")); ?>/print" media="print" />
		<?php
		foreach($this->extrastyles as $stl) {
			?>
			<link rel="stylesheet" type="text/css" href="<?=$stl[0]?>" media="<?=$stl[1]?>" />
			<?php
		}
		?>
		<meta name="ROBOTS" content="NOINDEX, NOFOLLOW" />
		<script type="text/javascript" src="<?=$_SERVER["CORE_WEB_ALIAS"]?>/admin/v3/js/alllayout"></script>
		<?php
		foreach($this->extrascript as $scr) {
			?>
			<script type="text/javascript" src="<?=$scr?>"></script>
			<?php
		}
		?>
		</head>
		<body>
		<?php
		if ($this->gatepasshost) {
			?>
			<script src="http<?php echo ($this->gatepassssl?"s":""); ?>://<?php echo $this->gatepasshost; ?>/extauth/extauthjs" type="text/javascript"></script>
			<div id="assankaauth" style="width:100%; height: 26px; margin:0; padding:0; background: #222"></div>
			<?php
		}
		?>
		<div id="sparediva"></div>
		<div id="sparedivb"></div>
		<div id="toggleadmincellswrapper">
		<a href="javascript:void(0);" onclick="toggleAdminCells();"><img src="<?=$_SERVER["CORE_WEB_ALIAS"]?>/imgs/layout/colcollapse.gif" style="position: absolute; right: 0; top: 80px;" id="admincollapsebutton"/></a>
		<a href="javascript:void(0);" onclick="toggleAdminCells();"><img src="<?=$_SERVER["CORE_WEB_ALIAS"]?>/imgs/layout/colexpand.gif" style="position: absolute; right: 0; top: 80px; display: none;" id="adminexpandbutton"/></a>
		</div>
		<div id="topwrapper">
			<div id="top">
				<div id="header">
					<div id="userinfo">
					<?php
					if ($this->welcome) echo "Welcome, <b>".$user["name"]."</b><br />";
					if ($this->outlineenabled) echo "<a href=\"http://".((isset($_SESSION["outlinehostname"]) && $_SESSION["outlinehostname"])?$_SESSION["outlinehostname"]:$_SERVER['SERVER_NAME'])."\">Switch to Public Site</a>";
					?>
					</div>
				</div>
				<div class="tabwrapper">
					<div class="tabrow" id="headtabrow"><ul style="padding-left: 10px"><?php
						foreach ($this->sections as $section) {

							// Check permissions.  Support is a special case; otherwise
							// the auth framework is used to see if access is permitted.
							if ($section["secname"] == "Support" or !function_exists('checkIfAuth') or checkIfAuth($section["secname"], $authuser, false)) {

								// Display the tab in either selected or not selected variations
								$comparewith = (strlen($section["filepath"]))?$section["filepath"]:$section["path"];
								if (strpos($_SERVER["REQUEST_URI"], $comparewith) === 0) {
									?><li class="current"><div><a href="<?=$section["path"]?>"><?=str_replace(" ", "&nbsp;", $section["secname"])?></a></div></li><?php
									$subsections = $section["subnav"];
								} else {
									?><li<?php if (isset($section['id'])) echo ' id="', $section['id'], '"'; ?>><div><a href="<?=$section["path"]?>"><?=str_replace(" ", "&nbsp;", $section["secname"])?></a></div></li><?php
								}
							}
						}
						?>
						</ul>
						<div id="aftertabs"></div>
						<div class="clearall"></div>
					</div>
				</div>
			</div>
		</div>
		<div id="norm">
		<table class="main" cellspacing="0" cellpadding="0" id="mainAdminTable">
			<tr>
			<td class="leftpanel">
			<h3>Sections</h3>
			<ul>
			<?php
			if (!empty($subsections) and is_array($subsections)) {
				$currentpath = (strpos($_SERVER["REQUEST_URI"], "?")!==false)?substr($_SERVER["REQUEST_URI"], 0, strpos($_SERVER["REQUEST_URI"], "?")):$_SERVER["REQUEST_URI"];
				foreach($subsections as $name=>$path) {
					if ($name == "-") {
						echo "</ul><br /><ul>";
					} else {
						echo "<li";
						$regex = "/".preg_quote(rtrim($path, "/"), "/")."(\/.*)?$/i";
						if (preg_match($regex, $currentpath)) {
							echo " class=\"sel\"";
						} else {
							$regex = substr($regex, strlen($_SERVER["ADMIN_AREA_PATH"])+4);
							if (strpos($regex, "/") === 0) $regex = "\\".$regex;
							$regex = "/".preg_quote($_SERVER["CORE_WEB_ALIAS"], "/")."\/admin\/v[0-9]+\/".$regex;
							if (preg_match($regex, $currentpath)) echo " class=\"sel\"";
						}
						echo "><a href=\"".$path."\">".$name."</a></li>";
					}
				}
			}
			?>
			</ul>
			<?=$this->leftnav?>
			</td>
			<td class="centrepanel">
			<?php
			$pn = $fl = "";
			if (isset($_SESSION["infomsgs"])) {
				$i=0;
				foreach($_SESSION["infomsgs"] as $msg) {
					if (!$msg["type"]) $msg["type"]="info";
					if ($msg["type"]=="info") {
						$pn .= "<div class=\"infobar_".$msg["type"]."\"><span>".$msg["msg"]."</span></div>";
					} else {
						$fl .= "<div class=\"infobar_".$msg["type"]."\"><a class=\"evtbutton\" href=\"javascript:void(0)\" onclick=\"ev.close(this.parentNode)\" onmouseover=\"ev.pause()\" onmouseout=\"ev.resume()\" title=\"Close this message\"><img src=\"".$_SERVER["CORE_WEB_ALIAS"]."/admin/v3/img/icons/close.png\" width=\"11\" height=\"10\" /></a><a class=\"evtbutton\" href=\"javascript:void(0)\" onclick=\"ev.pin(this.parentNode)\" onmouseover=\"ev.pause()\" onmouseout=\"ev.resume()\" title=\"Pin this message to the page\"><img src=\"".$_SERVER["CORE_WEB_ALIAS"]."/admin/v3/img/icons/pin.png\" width=\"14\" height=\"10\" /></a><span>".$msg["msg"]."</span></div>";
					}
				}
				unset($_SESSION["infomsgs"]);
			}
			?>
			<div id="pinnedevents"><?=$pn?></div>
			<div id="maincontent">
				<div id="floatingevents"><?=$fl?></div>
				<?=$this->content?>
			</div>
			<?php

			// Display right column only if content has been provided
			if ($this->rightnav or $this->actions) {
				?>
				</td>
				<td class="rightpanel" id="rightpanel">
				<?php
				if ($this->actions) {
					?>
					<h3>Actions</h3>
					<ul class="actions">
					<?=$this->actions?>
					</ul>
					<?php
				}
				?>
				<?=$this->rightnav?>
				<?php
			}
			?>
			</td>
			</tr>
		</table>
		</div>
		<div id="footerwrapper">
		<div id="footer">
		&copy 2003-<?=date('Y')?> Assanka Limited [All Rights Reserved]<br />
		<?php

		// Print execution summary
		$e=microtime();
		$took=floor($this->microtime_diff($e,$startmicrotime)*100000)/100;
		?>
		Server: <?=$_SERVER["SERVER_NAME"]?>, Execution time: <?=$took?> ms<?=($qrycount = $db->getQueryCount())?", Total queries: ".$qrycount:""?>, Load time: <?=date("r")?>.
		</div>
		</div>
		</body>
		</html>
		<?php
	}

	function waitmsg($msg) {

		// Print several kilobytes of rubbish to fill the output buffer
		echo "<!--".str_repeat("##### ", 1024)."-->";
		?>
		<style type="text/css">
		body {
			margin: 0;
			padding: 0;
			background-color: white;
		}
		</style>
		<div id="waitmsg" style="position: absolute; top: 41%; width: 100%; height: 114px; text-align: center">
			<div style="margin-left: auto; margin-right: auto; width: 387px; height:114px; background: url('<?=$_SERVER["CORE_WEB_ALIAS"]?>/admin/v3/waitmsg/bg.png') 50% 50% no-repeat; text-align: left; padding-top:35px">
				<img src="<?=$_SERVER["CORE_WEB_ALIAS"]?>/admin/v3/waitmsg/msg_<?=$msg?>.png" style="display: block; margin-left: 25px;" />
				<img src="<?=$_SERVER["CORE_WEB_ALIAS"]?>/admin/v3/waitmsg/loading.gif" width="78" height="7" style="display:block; margin-top: 12px; margin-left: 25px;" />
				<p>
					<span id="progressspan" style="color: #999; font-family: Arial; font-size: 11px; margin-left: 25px; text-decoration: none;"></span>
					<a href="javascript:history.go(-1)" style="color: #999; font-family: Arial; font-size: 11px; margin-left: 25px; text-decoration: none; font-weight: bold">Click to Cancel</a>
				</p>
			</div>
		</div>
		<?php
		flush();
		ob_flush();
		$usebuffer = false;
		while (@ob_end_flush()) $usebuffer = true;
		echo "<!--".str_repeat("##### ", 1024)."-->";
		usleep(50000);
		flush();
		usleep(50000);
		if ($usebuffer) ob_start();
	}

	function alert($msg, $type = "info") {
		$types = array("warning", "error", "wait", "done", "info");
		if (isset($_SESSION["infomsgs"])) {
			$newindex = sizeof($_SESSION["infomsgs"]);
		} else {
			$newindex = 0;
			$_SESSION["infomsgs"] = array();
		}
		$type = (in_array($type, $types)) ? $type : "info";
		$_SESSION["infomsgs"][$newindex] = array("msg"=>$msg, "type"=>$type);
	}

	function loadExternalContent($source, $additionaldata=false) {
		$str = file_get_contents($source);
		$data = $_SERVER;
		if (is_array($additionaldata)) $data = array_merge($data, $additionaldata);
		return preg_replace("/\<\!\-\-\@(.*)\-\-\>/iUe", "(isset(\$data[\"$1\"])) ? \$data[\"$1\"] : ''", $str);
	}


	function microtime_diff($a,$b) {
		list($a_micro, $a_int)=explode(' ',$a);
		list($b_micro, $b_int)=explode(' ',$b);
		if ($a_int>$b_int) {
			return ($a_int-$b_int)+($a_micro-$b_micro);
		} elseif ($a_int==$b_int) {
			if ($a_micro>$b_micro) {
				return ($a_int-$b_int)+($a_micro-$b_micro);
			} elseif ($a_micro<$b_micro) {
				return ($b_int-$a_int)+($b_micro-$a_micro);
			} else {
				return 0;
			}
		} else { // $a_int<$b_int
			return ($b_int-$a_int)+($b_micro-$a_micro);
		}
	}
}

class inputform {

	var $formname;
	var $method;
	var $href;
	var $onsubmit;
	var $accesskeys;
	var $fieldnames;
	var $groups;
	var $helptext;
	var $RGX_PCODE;
	var $RGX_EMAIL;
	var $RGX_URL;
	var $RGX_PHONE;
	var $RGX_DATE;
	var $OPTS_TITLES;

	function inputform($name, $method="POST", $href=false, $onsubmit=false) {
		$this->formname = $name;
		$this->method = $method;
		$this->href = $href;
		$this->onsubmit = $onsubmit;
		$this->accesskeys = array();
		$this->fieldnames = array();
		$this->groups = "";
		$this->helptext = array();
		$this->RGX_PCODE = "/^(((([A-PR-UWYZ][0-9][0-9A-HJKS-UW]?)|([A-PR-UWYZ][A-HK-Y][0-9][0-9ABEHMNPRV-Y]?))\s{0,2}[0-9]([ABD-HJLNP-UW-Z]{2}))|(GIR\s{0,2}0AA))$/i";
		$this->RGX_EMAIL = "/^[A-z0-9][\w\.\-\+]*@[A-z0-9][\w\-\.]+\.[A-z0-9]{2,6}$/i";
		$this->RGX_URL = "/^http\:\/\/(([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-z\-]+\.)+[a-z]{2,6})(\:[0-9]+)?/i";
		$this->RGX_PHONE = "/^[0-9 \+\(\)]{5,20}$/i";
		$this->RGX_DATE = "/^(0?[1-9]|[12][0-9]|3[01])[\/\-\.](0?[1-9]|1[012])[\/\-\.](\d{4})$/";
		$this->OPTS_TITLES = array("Mr"=>"Mr", "Mrs"=>"Mrs", "Miss"=>"Miss", "Ms"=>"Ms", "Dr"=>"Dr", "Prof"=>"Prof");
	}

	function addHelptext($field, $text) {
		if (in_array($field, $this->fieldnames)) {
			$this->helptext[$field] = $text;
		}
	}

	function registerfieldname($name) {
		if (!in_array($name, $this->fieldnames)) {
			array_push($this->fieldnames, $name);
			return true;
		} else {
			trigger_error("Field name '".$name."' already in use in form '".$this->formname."'", E_USER_ERROR);
		}
	}
	function registeraccesskey($accesskey) {
		if ($accesskey) {
			if (!in_array($accesskey, $this->accesskeys)) {
				array_push($this->accesskeys, $accesskey);
				return true;
			} else {
				trigger_error("Accesskey '".$accesskey."' already in use in form '".$this->formname."'", E_USER_ERROR);
			}
		}
	}
	function addGroup($html) {
		$this->groups .= $html;
	}

	function outputForm() {
		if ($this->method) {
			?><form method="<?=$this->method?>" action="<?=$this->href?>" name="frm<?=$this->formname?>" id="frm<?=$this->formname?>" enctype="multipart/form-data"<?=($this->onsubmit)?" onsubmit=\"".$this->onsubmit."\";":""?>><?php
		} else {
			?><form name="frm<?=$this->formname?>" id="frm<?=$this->formname?>" enctype="multipart/form-data"<?=($this->onsubmit)?" onsubmit=\"".$this->onsubmit."\"; ":""?>"><?php
		}

		// Output a sacrificial field for IE to sometimes mangle (search for
		// ISO-8859-1 on http://tinyurl.com/g3ffj )
		if ($this->method == "POST") {
			?><input type="hidden" name="AntiInternetExplorerHttpPostError" value="ignore"><?php
		}

		echo $this->groups;

		?></form><?php

		$ret = ob_get_contents();
		ob_clean();
		return $ret;
	}

	function outputContexthelp() {
		$op = "<span id=\"helppositionmarker\"></span><h3 id=\"helpheader\">Help</h3>";
		foreach ($this->helptext as $name=>$text) {
			$op .= "<div id=\"help".$name."\" class=\"help\">".$text."</div>";
		}
		$op .= "<div id=\"nohelpavail\" class=\"help\"><em>There is no help available for this item</em></div>";
		$op .= "<div id=\"nohelp\" class=\"help\" style=\"display: block\"><em>Choose a form field to view context-sensitive help</em></div>";
		return $op;
	}
}

class activetablefieldgroup {

	var $form;
	var $groupname;
	var $title;
	var $fields;
	var $data;
	var $columns;
	var $ajaxurl;
	var $colalignments;
	var $ALLOWALL;
	var $SINGLESELECT;
	var $USEFIELDSASCOLS;
	var $REQUIRED;
	var $OPTIONAL;

	function activetablefieldgroup(&$frmobj, $name, $title=false) {
		$this->form = &$frmobj;
		$this->title = $title;
		$this->fields = array();
		$this->columns = array();
		$this->data = array();
		$this->ALLOWALL = true;
		$this->SINGLESELECT = false;
		$this->USEFIELDSASCOLS = false;
		$this->REQUIRED = true;
		$this->OPTIONAL = false;
		$this->ajaxurl = false;
		$this->colalignments = false;

		// Replace characters (such as spaces) with underscores that could
		// cause errors when the _POST array is parsed following form submission
		$this->groupname = preg_replace("/[^a-z0-9\-]/i", "_", $name);
	}

	function addSelect($name, $label, $accesskey, $required=false, $includeall=false, $options) {
		$this->form->registerfieldname($name);
		$this->form->registeraccesskey($accesskey);
		$this->fields[$name]["type"] = "select";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["accesskey"] = $accesskey;
		$this->fields[$name]["required"] = $required;
		$this->fields[$name]["includeall"] = $includeall;
		$this->fields[$name]["options"] = $options;
	}
	function addText($name, $label, $accesskey, $required=false, $maxlength=false) {
		$this->form->registerfieldname($name);
		$this->form->registeraccesskey($accesskey);
		$this->fields[$name]["type"] = "text";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["accesskey"] = $accesskey;
		$this->fields[$name]["required"] = $required;
		$this->fields[$name]["maxlength"] = $maxlength;
	}
	function addAutocomplete($name, $label, $accesskey, $required=false, $maxlength=false, $url, $hidefields=false) {
		$this->form->registerfieldname($name);
		$this->form->registeraccesskey($accesskey);
		$this->fields[$name]["type"] = "autocomplete";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["accesskey"] = $accesskey;
		$this->fields[$name]["required"] = $required;
		$this->fields[$name]["url"] = $url;
		$this->fields[$name]["maxlength"] = $maxlength;
		$this->fields[$name]["hidefields"] = $hidefields;
	}
	function addFileupload($name, $label, $accesskey, $required=false) {
		$this->form->registerfieldname($name);
		$this->form->registeraccesskey($accesskey);
		$this->fields[$name]["type"] = "upload";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["accesskey"] = $accesskey;
		$this->fields[$name]["required"] = $required;
	}
	function addHidden($name, $value) {
		$this->form->registerfieldname($name);
		$this->fields[$name]["type"] = "hidden";
		$this->fields[$name]["value"] = $value;
	}

	function enableAjax($url, $colheadings=false) {
		$this->ajaxurl = $url;
		if ($colheadings) $this->columns = $colheadings;
	}

	function addData($rowkey, $value, $rowdata) {
		$nextitem = sizeof($this->data);
		$this->data[$nextitem]["key"] = $rowkey;
		$this->data[$nextitem]["value"] = $value;
		$this->data[$nextitem]["data"] = $rowdata;
	}

	function setInputWidth($fieldname, $width) {
		if (!is_numeric($width)) {
			trigger_error("Cannot set width to a non-numeric value", E_USER_NOTICE);
		} else {
			$this->fields[$fieldname]["width"] = $width;
		}
	}

	function setColAlignment($alignments) {
		if (!is_array($alignments)) {
			trigger_error("Cannot set alignment: array expected", E_USER_NOTICE);
			return false;
		} else {
			foreach($alignments as $alignment) {
				if ($alignment != "left" and $alignment != "right" and $alignment != "center") {
					trigger_error("Cannot set alignment: invalid value", E_USER_NOTICE);
					return false;
				}
			}
			$this->colalignments = $alignments;
		}
	}


	function retrievePostedValues() {
		$ret = array();
		foreach($_POST as $key=>$value) {
			if (preg_match("/^".$this->groupname."_value(.*)$/i", $key, $matches)) {
				$ret[$matches[1]] = $_POST[$this->groupname."_value".$matches[1]];
			}
		}
		return $ret;
	}


	function addToform() {

		// Output title if provided
		if ($this->title) {
			?><h4><?=$this->title?></h4><?php
		}
		?>
		<script type="text/javascript">activetables["<?=$this->groupname?>"] = new ActiveTable("<?=$this->groupname?>"); </script>
		<?php

		if ($this->colalignments) {
			// Mozilla and Safari colalignment support, as <col> support is lacking!
			echo "<style type=\"text/css\">\n";
			for ($i=0; $i<count($this->colalignments); $i++) {
				echo "#acttbl_".$this->groupname."_view td:first-child ";
				for ($j=0; $j<$i; $j++) {
					echo "+ td ";
				}
				echo "{ text-align: ".$this->colalignments[$i]."; }\n";
			}
			echo "</style>\n";
		}
		?>
		<table class="data" id="acttbl_<?=$this->groupname?>_view" name="acttbl_<?=$this->groupname?>_view">
		<?php
		if ($this->colalignments) {
			?>
			<colgroup>
			<?php
			foreach($this->colalignments as $al) {
				echo "<col style=\"text-align:".$al."\">";
			}
			?>
			</colgroup>
			<?php
		}
		?>
		<thead>
		<tr>
		<?php

		// If columns specified, use bespoke headings, otherwise use fields as columns
		if (sizeof($this->columns)) {
			foreach($this->columns as $colname) {
				?><th><?=$colname?></th><?php
			}
		} else {
			foreach($this->fields as $name=>$params) {
				?><th><?=$this->fields[$name]["label"]?></th><?php
			}
		}
		?>
		<th>&nbsp;</th>
		</tr>
		</thead>
		<tbody id="acttbl_<?=$this->groupname?>_tbody">
		<?php
		$rowextras = " onClick=\"activetables['".$this->groupname."'].toggleRowHighlight(this);\" ";

		if (sizeof($this->data)) {
			$cols = $this->columns;
			foreach($this->data as $row) {
				echo "<tr id=\"acttbl_".$this->groupname."_row".$row["key"]."\" $rowextras>";
				foreach ($row["data"] as $col) {
					echo "<td>".$col."</td>";
				}
				echo "<td><a href=\"javascript:activetables['".$this->groupname."'].deleterow('".$row["key"]."')\"><img src=\"".$_SERVER["CORE_WEB_ALIAS"]."/admin/v3/img/icons/delete.gif\" width=\"16\" height=\"16\" id=\"di_".$this->groupname."_".$row["key"]."\"></a>";
				echo "<input type=\"hidden\" name=\"".$this->groupname."_value".$row["key"]."\" id=\"".$this->groupname."_value".$row["key"]."\" value=\"".$row["value"]."\" />";
				echo "</td></tr>\n";
			}
		}
		?>
		</tbody>
		</table>
		<table class="activetableform" id="acttbl_<?=$this->groupname?>_form">
		<tr>
		<?php
		foreach($this->fields as $name=>$field) {
			if (!empty($field["label"])) {
				?><td><label for="frm<?=$this->form->formname?>_<?=$name?>"><?=preg_replace("/(".$field["accesskey"].")/i", "<u>$1</u>", $field["label"], 1)?>:</label></td><?php
			} else {
				?><td></td><?php
			}
		}
		?>
		</tr><tr>
		<?php
		$includesuploads = false;
		foreach($this->fields as $name=>$field) {
			switch($field["type"]) {
				case "hidden":
					?>
					<td class="forminput">
					<input type="hidden" class="acttbl_<?=$this->groupname?>_field" value="<?=$field["value"]?>" name="<?=$name?>" />
					</td>
					<?php
					break;
				case "text":
					?>
					<td class="forminput">
					<input type="text" class="<?=($field["required"])?"reqfield":"optfield"?> acttbl_<?=$this->groupname?>_field" id="frm<?=$this->form->formname?>_<?=$name?>"<?=(($field["accesskey"])?" accesskey=\"".$field["accesskey"]."\"":"")?> name="<?=$name?>"<?=($field["maxlength"])?" maxlength=\"".$field["maxlength"]."\"":""?> value="<?php if(!empty($field["value"]))echo($field["value"]);?>" onfocus="showhidehelp('<?=$name?>', this)"<?php if(!empty($field["width"]))echo(" style=\"width: ".$field["width"]."px\"")?> />
					</td>
					<?php
					break;
				case "autocomplete":
					$_SESSION["dbg"]["joinargs"] = $field["hidefields"];
					?>
					<td class="forminput">
					<input type="text" class="<?=($field["required"])?"reqfield":"optfield"?> acttbl_<?=$this->groupname?>_field" id="frm<?=$this->form->formname?>_<?=$name?>"<?=(($field["accesskey"])?" accesskey=\"".$field["accesskey"]."\"":"")?> name="<?=$name?>"<?=($field["maxlength"])?" maxlength=\"".$field["maxlength"]."\"":""?> value="<?=$field["value"]?>" onfocus="showhidehelp('<?=$name?>', this)"<?=($field["width"])?" style=\"width: ".$field["width"]."px\"":""?> />
					<script type="text/javascript">acfields["frm<?=$this->form->formname?>_<?=$name?>"] = new AutoCompleteField('frm<?=$this->form->formname?>_<?=$name?>', '<?=$field["url"]?>', Array(<?=(is_array($field["hidefields"]) and sizeof($field["hidefields"]))?"\"".join("\",\"", $field["hidefields"])."\"":""?>));</script>
					</td>
					<?php
					break;
				case "select":
					?>
					<td class="forminput">
					<select class="<?=($field["required"])?"reqfield":"optfield"?> acttbl_<?=$this->groupname?>_field" id="frm<?=$this->form->formname?>_<?=$name?>"<?=(($field["accesskey"])?" accesskey=\"".$field["accesskey"]."\"":"")?> name="<?=$name?>" onFocus="showhidehelp('<?=$name?>', this)"<?=empty($field["width"])?"":" style=\"width: ".$field["width"]."px\""?>>
					<?php
					if ($field["includeall"]) echo "<option value=\"#SELECTALL#\">All</option>";
					if (!is_array($field["options"])) trigger_error("No options were supplied for the field: $name",E_USER_ERROR);
					foreach($field["options"] as $key=>$option) {
						?><option value="<?=$key?>"><?=$option?></option><?php
					}
					?>
					</select>
					</td>
					<?php
					break;
				case "upload":
					?>
					<td class="forminput">
					<input type="text" class="<?=($field["required"])?"reqfield":"optfield"?> acttbl_<?=$this->groupname?>_field" id="frm<?=$this->form->formname?>_<?=$name?>" name="<?=$name?>" onFocus="showhidehelp('<?=$name?>', this)" disabled="disabled"<?=($field["width"])?" style=\"width: ".$field["width"]."px\"":""?> /> <input type="button" value="Choose" onclick="FileUploader.fileupload(this)" />
					</td>
					<?php
					$includesuploads = true;
					break;
			}
		}
		if ($this->ajaxurl) {
			?><td><input type="button" value="Add" id="acttbl_<?=$this->groupname?>_btn" onClick="activetables['<?=$this->groupname?>'].add_ajax('<?=$this->ajaxurl?>')" /></td><?php
		} else {
			?><td><input type="button" value="Add" id="acttbl_<?=$this->groupname?>_btn" onClick="activetables['<?=$this->groupname?>'].add_std()" /></td><?php
		}
		?></tr></table><?php
		$ret = ob_get_contents();
		ob_clean();
		$this->form->addGroup($ret);
	}
}

class simplefieldgroup {

	var $form;
	var $fields;
	var $title;
	var $ALLOWBLANKSELECT;
	var $NOBLANKSELECT;
	var $REQUIRED;
	var $OPTIONAL;
	var $contentcount;

	function simplefieldgroup(&$frmobj, $title=false) {
		$this->form = &$frmobj;
		$this->title = $title;
		$this->fields = array();
		$this->contentcount = 1;
		$this->ALLOWBLANKSELECT = true;
		$this->NOBLANKSELECT = false;
		$this->REQUIRED = true;
		$this->OPTIONAL = false;
	}

	function addText($name, $label, $accesskey, $required=false, $validpattern=false, $maxlength=false) {
		$this->form->registerfieldname($name);
		$this->form->registeraccesskey($accesskey);
		$this->fields[$name]["accesskey"] = $accesskey;
		$this->fields[$name]["type"] = "text";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["required"] = $required;
		$this->fields[$name]["validpattern"] = $validpattern;
		$this->fields[$name]["maxlength"] = $maxlength;
	}

	function addPassword($name, $label, $accesskey, $required=false, $validpattern=false, $maxlength=false) {
		$this->form->registerfieldname($name);
		$this->form->registeraccesskey($accesskey);
		$this->fields[$name]["accesskey"] = $accesskey;
		$this->fields[$name]["type"] = "password";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["required"] = $required;
		$this->fields[$name]["validpattern"] = $validpattern;
		$this->fields[$name]["maxlength"] = $maxlength;
	}

	function addSelect($name, $label, $accesskey, $required=false, $options, $allowblank=false) {
		$this->form->registerfieldname($name);
		$this->form->registeraccesskey($accesskey);
		$this->fields[$name]["accesskey"] = $accesskey;
		$this->fields[$name]["type"] = "select";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["required"] = $required;
		$this->fields[$name]["options"] = $options;
		$this->fields[$name]["allowblank"] = $allowblank;
	}

	function addCheckboxes($name, $label, $accesskey, $options) {
		$this->form->registerfieldname($name);
		if ($accesskey) {
			$this->form->registeraccesskey($accesskey);
			$this->fields[$name]["accesskey"] = $accesskey;
		}
		$this->fields[$name]["type"] = "check";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["options"] = $options;
	}

	function addTextarea($name, $label, $accesskey, $required=false, $validpattern=false, $height=100, $maxlength=false) {
		$this->form->registerfieldname($name);
		$this->form->registeraccesskey($accesskey);
		$this->fields[$name]["accesskey"] = $accesskey;
		$this->fields[$name]["type"] = "textarea";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["required"] = $required;
		$this->fields[$name]["validpattern"] = $validpattern;
		$this->fields[$name]["height"] = $height;
		$this->fields[$name]["maxlength"] = $maxlength;
	}

	function addRichtext($name, $label, $accesskey, $required=false, $height=200, $toolset='AssankaBasic', $csspath = false) {
		$this->form->registerfieldname($name);
		$this->form->registeraccesskey($accesskey);
		$this->fields[$name]["accesskey"] = $accesskey;
		$this->fields[$name]["type"] = "richtext";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["required"] = $required;
		$this->fields[$name]["height"] = $height;
		$this->fields[$name]["toolset"] = $toolset;
		$this->fields[$name]["csspath"] = $csspath;
	}

	function addImageupload($name, $label, $accesskey, $required=false, $destdir="/lib/tmp/uploadedfiles") {
		$this->form->registerfieldname($name);
		$this->form->registeraccesskey($accesskey);
		$this->fields[$name]["accesskey"] = $accesskey;
		$this->fields[$name]["type"] = "imageupload";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["required"] = $required;
		$this->fields[$name]["destdir"] = $destdir;
	}

	function addUpload($name, $label, $accesskey, $required=false, $destdir="/lib/tmp/uploadedfiles") {
		$this->form->registerfieldname($name);
		$this->form->registeraccesskey($accesskey);
		$this->fields[$name]["accesskey"] = $accesskey;
		$this->fields[$name]["type"] = "upload";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["required"] = $required;
		$this->fields[$name]["destdir"] = $destdir;
	}

	function addAutocomplete($name, $label, $accesskey, $required=false, $validpattern=false, $maxlength=false, $url, $hidefields=false) {
		$this->form->registerfieldname($name);
		$this->form->registeraccesskey($accesskey);
		$this->fields[$name]["accesskey"] = $accesskey;
		$this->fields[$name]["type"] = "autocomplete";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["required"] = $required;
		$this->fields[$name]["url"] = $url;
		$this->fields[$name]["validpattern"] = $validpattern;
		$this->fields[$name]["maxlength"] = $maxlength;
		$this->fields[$name]["hidefields"] = $hidefields;
	}

	function addColorPick($name, $label, $accesskey, $required=false) {
		$this->form->registerfieldname($name);
		$this->form->registeraccesskey($accesskey);
		$this->fields[$name]["accesskey"] = $accesskey;
		$this->fields[$name]["type"] = "colorpick";
		$this->fields[$name]["label"] = $label;
		$this->fields[$name]["required"] = $required;
	}

	function addHidden($name, $value=false) {
		if (substr($name, strlen($name)-2) == "[]") {
			$name = substr($name, 0, strlen($name)-2);
			if (!array_key_exists($name, $this->fields)) {
				$this->form->registerfieldname($name);
				$this->fields[$name]["value"] = array();
				$this->fields[$name]["type"] = "hidden";
			}
			if ($value) $this->fields[$name]["value"][] = $value;
		} else {
			$this->form->registerfieldname($name);
			$this->fields[$name]["type"] = "hidden";
			if ($value) $this->fields[$name]["value"] = $value;
		}
	}

	function addDummy($label, $value) {
		$this->fields[$label]["type"] = "dummy";
		$this->fields[$label]["label"] = $label;
		$this->fields[$label]["value"] = $value;
	}

	function addContent($str) {
		$this->fields[$this->contentcount++] = $str;
	}

	function addSpacer() {
		$this->fields[$this->contentcount++]["type"] = "spacer";
	}

	function addData($data) {
		foreach($this->fields as $name=>$field) {
			if (isset($data[$name])) {
				if (!is_array($data[$name]) and $field["type"] != "richtext") {
					$data[$name] = str_replace(array("'", "\"", "<", ">"), array("&#039;", "&quot;", "&lt;", "&gt;"),  $data[$name]);
				} elseif (!is_array($data[$name]) and $field["type"] == "richtext") {
					$data[$name] = str_replace(array("'", "\\","\n","\r"), array("&#039;", "\\\\","\\n","\\r"),  $data[$name]);
				}
				$this->fields[$name]["value"] = $data[$name];
			}
		}
	}

	function makeInputInvalid($fieldname, $explanation) {
		$this->fields[$fieldname]["invalidexplanation"] = $explanation;
	}

	function inputValid() {
		foreach($this->fields as $name=>$field) {
			if (is_array($field) and $field["type"] != "spacer") {
				if (!empty($field["invalidexplanation"])) {
					return false;
				} else if (!empty($field["required"]) and ($field["value"] == "") and empty($field["allowblank"])) {
					return false;
				} elseif ((!empty($field["value"])) && !empty($field["validpattern"])) {
					if (!preg_match($field["validpattern"], $field["value"])) {
						return false;
					}
				} elseif ($field["type"]=="select" and !in_array($field["value"], array_keys($field["options"])) and !($field["allowblank"] and !$field["value"])) {
					return false;
				}
			}
		}
		return true;
	}

	function retrievePostedValues() {
		$ret = array();
		foreach($_POST as $key=>$value) {
			if (isset($this->fields[$key]) and $this->fields[$key]["type"] != "dummy") {
				$ret[$key] = $value;
			}
		}
		return $ret;
	}

	function addToform($showinvalid=false) {

		// Output title if provided
		if ($this->title) {
			?><h4><?=$this->title?></h4><?php
		}

		// Output the hidden fields and count the visible ones
		$numvisible = 0;
		foreach($this->fields as $name=>$field) {
			if ($field["type"] == "hidden") {
				if (isset($field["value"]) and is_array($field["value"])) {
					$i=0;
					foreach ($field["value"] as $val) {
						?><input type="hidden" name="<?=$name?>[]" id="frm<?=$this->form->formname?>_<?=$name?>_<?=++$i?>" value="<?=$val?>" /><?php
					}
				} else {
					?><input type="hidden" name="<?=$name?>" id="frm<?=$this->form->formname?>_<?=$name?>" value="<?=(empty($field["value"])?"":$field["value"])?>" /><?php
				}
			} else {
				$numvisible++;
			}
		}

		// Table for holding visible fields
		if ($numvisible) {
			?><table class="form"><?php

			// Visible fields
			foreach($this->fields as $name=>$field) {
				if (is_array($field)) {
					$field["valid"] = true;
					if ($showinvalid) {
						if (!empty($field["invalidexplanation"])) {
							$field["valid"] = false;
						} else if (!empty($field["required"]) and ($field["value"] == "") and empty($field["allowblank"])) {
							$field["valid"] = false;
							$field["invalidexplanation"] = "You must enter a value for this field";
						} else if (isset($field["value"]) and ($field["value"] != "") and !empty($field["validpattern"]) and !preg_match($field["validpattern"], $field["value"])) {
							$field["valid"] = false;
							$field["invalidexplanation"] = "This field requires data to be entered in a certain format, which has not been matched.  Please review the help text available in the panel on the right for guidance.";
						} else if ($field["type"] == "select" and !in_array($field["value"], array_keys($field["options"])) and !($field["allowblank"] and !$field["value"])) {
							$field["valid"] = false;
							$field["invalidexplanation"] = "This field has been submitted with a value not found in the original dropdown, possibly because the value has been removed by an administrator.";
						}
					}
					switch($field["type"]) {
						case "dummy":
							?>
							<tr>
							<td class="formlabel" nowrap><?=($field["label"])?$field["label"].":":""?></td>
							<td class="forminput" style="padding-top: 5px">
							<?=$field["value"]?>
							</td>
							</tr>
							<?php
							break;
						case "text":
							?>
							<tr>
							<td class="formlabel" nowrap><label<?=(!$field["valid"])?" class=\"invalid\" title=\"".$field["invalidexplanation"]."\"":""?> for="frm<?=$this->form->formname?>_<?=$name?>"><?=($field["label"])?preg_replace("/(".$field["accesskey"].")/i", "<u>$1</u>", $field["label"], 1).":":""?></label></td>
							<td class="forminput">
							<input type="text" class="<?=($field["required"])?"reqfield":"optfield"?>" id="frm<?=$this->form->formname?>_<?=$name?>"<?=(($field["accesskey"])?" accesskey=\"".$field["accesskey"]."\"":"")?> name="<?=$name?>"<?=($field["maxlength"])?" maxlength=\"".$field["maxlength"]."\"":""?> value="<?php if(!empty($field["value"]))echo($field["value"])?>" onFocus="showhidehelp('<?=$name?>', this)" />
							</td>
							</tr>
							<?php
							break;
						case "password":
							?>
							<tr>
							<td class="formlabel" nowrap><label<?=(!$field["valid"])?" class=\"invalid\" title=\"".$field["invalidexplanation"]."\"":""?> for="frm<?=$this->form->formname?>_<?=$name?>"><?=($field["label"])?preg_replace("/(".$field["accesskey"].")/i", "<u>$1</u>", $field["label"], 1).":":""?></label></td>
							<td class="forminput">
							<input type="password" autocomplete="off" class="<?=($field["required"])?"reqfield":"optfield"?>" id="frm<?=$this->form->formname?>_<?=$name?>"<?=(($field["accesskey"])?" accesskey=\"".$field["accesskey"]."\"":"")?> name="<?=$name?>"<?=($field["maxlength"])?" maxlength=\"".$field["maxlength"]."\"":""?> value="<?=((isset($field["value"]))?$field["value"]:'')?>" onFocus="showhidehelp('<?=$name?>', this)" />
							</td>
							</tr>
							<?php
							break;
						case "textarea":
							?>
							<tr>
							<td class="formlabel" nowrap><label<?=(!$field["valid"])?" class=\"invalid\" title=\"".$field["invalidexplanation"]."\"":""?> for="frm<?=$this->form->formname?>_<?=$name?>"><?=($field["label"])?preg_replace("/(".$field["accesskey"].")/i", "<u>$1</u>", $field["label"], 1).":":""?></label></td>
							<td class="forminput">
							<textarea class="<?=($field["required"])?"reqfield":"optfield"?>" id="frm<?=$this->form->formname?>_<?=$name?>"<?=(($field["accesskey"])?" accesskey=\"".$field["accesskey"]."\"":"")?> name="<?=$name?>"<?=($field["maxlength"])?" maxlength=\"".$field["maxlength"]."\"":""?> onFocus="showhidehelp('<?=$name?>', this)" style="height: <?=$field["height"]?>px"><?=((isset($field["value"]))?$field["value"]:'')?></textarea>
							</td>
							</tr>
							<?php
							break;
						case "richtext":
							?>
							<tr>
							<td class="formlabel" nowrap><label<?=(!$field["valid"])?" class=\"invalid\" title=\"".$field["invalidexplanation"]."\"":""?> for="frm<?=$this->form->formname?>_<?=$name?>"><?=($field["label"])?preg_replace("/(".$field["accesskey"].")/i", "<u>$1</u>", $field["label"], 1).":":""?></label></td>
							<td class="forminput">
							<script type="text/javascript">
							var oFCKeditor = new FCKeditor('<?=$name?>');
							oFCKeditor.BasePath		= '<?=$_SERVER["CORE_WEB_ALIAS"]?>/fckeditor/v2.5/';
							oFCKeditor.Width		= "100%";
							oFCKeditor.Height		= <?=$field["height"]?>;
							oFCKeditor.ToolbarSet	= '<?=$field["toolset"]?>';
							oFCKeditor.Value		= '<?=(empty($field["value"])?"":$field["value"])?>';
							<?=($field["csspath"])?"oFCKeditor.Config.EditorAreaCSS = '".$field["csspath"]."';":""?>
							oFCKeditor.Create();
							</script>
							</td>
							</tr>
							<?php
							break;
						case "select":
							?>
							<tr>
							<td class="formlabel" nowrap><label<?=(!$field["valid"])?" class=\"invalid\" title=\"".$field["invalidexplanation"]."\"":""?> for="frm<?=$this->form->formname?>_<?=$name?>"><?=($field["label"])?preg_replace("/(".$field["accesskey"].")/i", "<u>$1</u>", $field["label"], 1).":":""?></label></td>
							<td class="forminput">
							<select class="<?=($field["required"])?"reqfield":"optfield"?>" id="frm<?=$this->form->formname?>_<?=$name?>"<?=(($field["accesskey"])?" accesskey=\"".$field["accesskey"]."\"":"")?> name="<?=$name?>" onFocus="showhidehelp('<?=$name?>', this)">
							<?php
							if ($field["allowblank"] && !array_key_exists("", $field["options"])) {
								?><option value=""></option><?php
							}
							foreach($field["options"] as $key=>$option) {
								?><option value="<?=$key?>"<?=(isset($field["value"]) and $field["value"]==$key)?" selected=\"selected\"":""?>><?=$option?></option><?php
							}
							?>
							</select>
							</td>
							</tr>
							<?php
							break;
						case "check":
							?>
							<tr>
							<td class="formlabel" nowrap><span<?=(!$field["valid"])?" class=\"invalid\" title=\"".$field["invalidexplanation"]."\"":""?>><?=($field["label"])?$field["label"].":":""?></span></td>
							<td>
							<?php
							$i=0;
							foreach($field["options"] as $key=>$option) {
								?><input type="checkbox" style="width: 20px" name="<?=$name?>[]" id="frm<?=$this->form->formname?>_<?=$name?>_<?=++$i?>" value="<?=$key?>"<?=(isset($field['value']) and is_array($field["value"]) and in_array($key, $field["value"]))?" checked=\"checked\"":""?>><label for="frm<?=$this->form->formname?>_<?=$name?>_<?=$i?>"><?=$option?></label><br /><?php
							}
							?>
							</td>
							</tr>
							<?php
							break;
						case "imageupload":
							?>
							<tr>
							<td class="formlabel" nowrap><span<?=(!$field["valid"])?" class=\"invalid\" title=\"".$field["invalidexplanation"]."\"":""?>><?=($field["label"])?$field["label"].":":""?></span></td>
							<td>
							<input class="imageupload" type="hidden" id="frm<?=$this->form->formname?>_<?=$name?>" name="<?=$name?>" value="<?php if(!empty($field["value"]))echo($field["value"]);?>" /><div class="imageupload <?=($field["required"])?"reqfield":"optfield"?>" style="width: 398px; border: 1px solid #888; height:18px; float: left; color: #555; cursor: default" onmouseover="if(this.previousSibling.value) ImagePreview.showtrail('<?=($field["destdir"])?$field["destdir"]:"/lib/tmp/uploadedfiles"?>/' + this.previousSibling.value);" onmouseout="ImagePreview.hidetrail()"><?php if(!empty($field["value"]))echo($field["value"]);?></div>&nbsp;<input type="button" value="Choose" onclick="FileUploader.fileupload(this, '<?=$field["destdir"]?>')" onFocus="showhidehelp('<?=$name?>', this)" style="width: 60px" />
							</td>
							</tr>
							<?php
							break;
						case "upload":
							?>
							<tr>
							<td class="formlabel" nowrap><span<?=(!$field["valid"])?" class=\"invalid\" title=\"".$field["invalidexplanation"]."\"":""?>><?=($field["label"])?$field["label"].":":""?></span></td>
							<td>
							<input class="fupload" type="hidden" id="frm<?=$this->form->formname?>_<?=$name?>" name="<?=$name?>" value="<?=(empty($field["value"])?"":$field["value"])?>" /><div class="fupload <?=($field["required"])?"reqfield":"optfield"?>" style="width: 398px; border: 1px solid #888; height:18px; float: left; color: #555; cursor: default"><?=empty($field["value"])?"":$field["value"]?></div>&nbsp;<input type="button" value="Choose" onclick="FileUploader.fileupload(this, '<?=$field["destdir"]?>')" onFocus="showhidehelp('<?=$name?>', this)" style="width: 60px" />
							</td>
							</tr>
							<?php
							break;
						case "autocomplete":
							?>
							<tr>
							<td class="formlabel" nowrap><label<?=(!$field["valid"])?" class=\"invalid\" title=\"".$field["invalidexplanation"]."\"":""?> for="frm<?=$this->form->formname?>_<?=$name?>"><?=($field["label"])?preg_replace("/(".$field["accesskey"].")/i", "<u>$1</u>", $field["label"], 1).":":""?></label></td>
							<td class="forminput">
							<input type="text" class="<?=($field["required"])?"reqfield":"optfield"?>" id="frm<?=$this->form->formname?>_<?=$name?>"<?=(($field["accesskey"])?" accesskey=\"".$field["accesskey"]."\"":"")?> name="<?=$name?>"<?=($field["maxlength"])?" maxlength=\"".$field["maxlength"]."\"":""?> value="<?=(!empty($field["value"])?$field["value"]:'')?>" onFocus="showhidehelp('<?=$name?>', this)" />
							<script type="text/javascript">acfields["frm<?=$this->form->formname?>_<?=$name?>"] = new AutoCompleteField('frm<?=$this->form->formname?>_<?=$name?>', '<?=$field["url"]?>', Array(<?=(is_array($field["hidefields"]) and sizeof($field["hidefields"]))?"\"".join("\",\"", $field["hidefields"])."\"":""?>));</script>
							</td>
							</tr>
							<?php
							break;
						case "colorpick":
							?>
							<tr>
							<td class="formlabel" nowrap><label<?=(!$field["valid"])?" class=\"invalid\" title=\"".$field["invalidexplanation"]."\"":""?> for="frm<?=$this->form->formname?>_<?=$name?>"><?=($field["label"])?preg_replace("/(".$field["accesskey"].")/i", "<u>$1</u>", $field["label"], 1).":":""?></label></td>
							<td class="forminput">
							<input type="text" class="<?=($field["required"])?"reqfield":"optfield"?>" id="frm<?=$this->form->formname?>_<?=$name?>"<?=(($field["accesskey"])?" accesskey=\"".$field["accesskey"]."\"":"")?> name="<?=$name?>" maxlength=7 value="<?=$field["value"]?>" onFocus="showhidehelp('<?=$name?>', this)" />
							<script>attachColorPicker(document.getElementById('frm<?=$this->form->formname?>_<?=$name?>'));</script>
							</td>
							</tr>
							<?php
							break;
						case "spacer":
							?>
							<tr>
							<td>&nbsp;</td>
							<td>&nbsp;</td>
							</tr>
							<?php
							break;
					}
				} else {
					?>
					<tr>
					<td colspan="2"><?=$field?></td>
					</tr>
					<?php
				}

			}

			// End table
			?></table><?php
		}
		$ret = ob_get_contents();
		ob_clean();
		$this->form->addGroup($ret);
	}
}

class tablelistfieldgroup {

	var $form;
	var $title;
	var $name;
	var $data;
	var $selections;
	var $columns;
	var $includebatchlinks;
	var $mode;

	function tablelistfieldgroup(&$frmobj, $name=false, $title=false, $columns=false, $mode='checkbox', $includebatchlinks=true) {
		$this->form = &$frmobj;
		$this->title = $title;
		$this->name = $name;
		$this->includebatchlinks = $includebatchlinks;
		$this->mode = $mode;
		$this->columns = $columns;
		$this->data = array();
		$this->selections = array();
	}

	function addData($key, $rowdata, $isselected=false) {
		$this->data[$key] = $rowdata;
		if ($isselected) $this->selections[] = $key;
	}

	function addToform() {

		// If no columns specified, use field labels
		if (!sizeof($this->columns)) {
			foreach(array_keys($this->data) as $label) $this->columns[] = $label;
		}

		// Output title if provided
		if ($this->title) {
			?><h4><?=$this->title?></h4><?php
		}
		?>
		<table class="data" id="tbllst_<?=$this->name?>" name="tbllst_<?=$this->name?>">
		<thead>
		<tr>
		<?php
		?><th style="width:30px">&nbsp;</th><?php
		foreach($this->columns as $colname) {
			?><th><?=$colname?></th><?php
		}
		?>
		</tr>
		</thead>
		<tbody>
		<?php
		if (sizeof($this->data)) {
			foreach($this->data as $key=>$row) {
				echo "<tr>";
				if ($this->mode=='checkbox') {
					echo "<td><input type=\"checkbox\" name=\"".$this->name."[]\" id=\"".$this->name."_".$key."\" value=\"".$key."\"";
				} else {
					echo "<td><input type=\"radio\" name=\"".$this->name."\" id=\"".$this->name."_".$key."\" value=\"".$key."\"";
				}
				if (in_array($key, $this->selections)) echo " checked=\"checked\"";
				echo " /></td>";
				foreach ($row as $col) {
					echo "<td>".$col."</td>";
				}
				echo "</tr>\n";
			}
		}
		?>
		</tbody>
		</table>
		<?php
		$ret = ob_get_contents();
		ob_clean();
		$this->form->addGroup($ret);
	}
}

class customfieldgroup {

	var $form;
	var $title;

	function customfieldgroup(&$frmobj, $title=false) {
		$this->form = &$frmobj;
		$this->title = $title;
	}

	function addToform($html) {

		// Output title if provided
		$ret = "";
		if ($this->title) {
			$ret .= "<h4>".$this->title."</h4>";
		}
		$ret .= $html;
		$this->form->addGroup($ret);
	}
}


class Columnlist {

	var $cols;
	var $emptytext;
	var $data;
	var $title;
	var $totallines;
	var $RGX_EMAIL;
	var $RGX_URL;

	function columnlist($title=false, $numcols, $emptytext) {
		$this->title = $title;
		$this->cols = $numcols;
		$this->emptytext = $emptytext;
		$this->data = array();
		$this->totallines = 0;
	}

	function addItem($label, $value) {
		$i = sizeof($this->data);
		$this->data[$i]["label"] = str_replace(" ", "&nbsp;", $label);
		$this->data[$i]["value"] = $value;
		$this->data[$i]["lines"] = (substr_count($value, "\n") + 1);
		$this->totallines += $this->data[$i]["lines"];
	}

	function output() {
		$op = "";
		if ($this->title) $op .= "<h4>".$this->title."</h4>";
		$linespercol = ceil($this->totallines / $this->cols);
		$linessofar = 0;
		$currentcol = 1;
		$op .= "<table cellspacing=\"0\" cellpadding=\"0\" width=\"100%\"><tr><td><table class=\"form\">";
		foreach($this->data as $item) {
			if ($item["label"] == "") {
			} elseif (!isset($item["value"]) or $item["value"] == "") {
				$item["value"] = "<em>".$this->emptytext."</em>";
			} else {
				$item["value"] = preg_replace("/([A-z0-9][\w\.\-\+]*@[A-z0-9][\w\-\.]+\.[A-z0-9]{2,6})/i", "<a href='mailto:$1'>$1</a>", $item["value"] );
				$item["value"] = $this->autolink($item["value"]);
				$item["value"] = nl2br($item["value"]);
			}

			if ($item["label"] == "") $op .= "<tr><td colspan=\"2\">".$item["value"]."</td></tr>";
			else $op .= "<tr><td>".$item["label"].":&nbsp;</td><td>".$item["value"]."</td></tr>";
			$linessofar += $item["lines"];
			if ($linessofar >= ($linespercol*$currentcol)) {
				$op .= "</table></td><td><table class=\"form\">";
				$currentcol++;
			}
		}
		$op .= "</table></td></tr></table>";
		return $op;
	}

	// Convert URLs to hyperlinks
	function autolink($text) {

		// Find and mask HTML tags.  Links first, masking the entire link, then all other HTML tags
		$protected = array();
		preg_match_all("/<a .*<\/a>/siU", $text, $m, PREG_PATTERN_ORDER);
		if (!empty($m)) {
			$m = array_unique($m[0]);
			foreach($m as $link) {
				$id = "{#!#".sizeof($protected)."#!#}";
				$protected[$id] = $link;
				$text = str_replace($link, $id, $text);
			}
		}
		preg_match_all("/<.*>/siU", $text, $m, PREG_PATTERN_ORDER);
		if (!empty($m)) {
			$m = array_unique($m[0]);
			foreach($m as $tag) {
				$id = "{#!#".sizeof($protected)."#!#}";
				$protected[$id] = $tag;
				$text = str_replace($tag, $id, $text);
			}
		}

		$scheme		= "(http:\/\/|https:\/\/)";
		$www		= "www\.";
		$ip			= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}";
		$name		= "[a-z0-9][-a-z0-9]+\.";
		$tld		= "[a-z]{2,}(\.[a-z]{2,2})?";
		$the_rest	= "(\/?[a-z0-9._\/\,\@~#&=;%+?-]+[a-z0-9\/#=?])?";
		$pattern	= "/".$scheme."?(?(1)(".$ip."|(".$name.")+".$tld.")|(".$www."(".$name.")+".$tld."))".$the_rest."/is";
		if (preg_match_all($pattern, $text, $m)) {
			$urls = array_flip($m[0]);
			foreach ($urls as $key=>$val) {
				$urls[$key] = "<a href=\"".((strpos($key, ":") === false)?"http://".$key:$key)."\" target=\"_blank\">$key</a>";
			}
			$text = strtr($text, $urls);
		}
		$pattern = "/[A-z0-9][\w\.\-\+]*@[A-z0-9][\w\-\.]+\.[A-z0-9]{2,6}/i";
		if (preg_match_all($pattern, $text, $m)) {
			$emails = array_flip($m[0]);
			foreach ($emails as $addr=>$val) {
				$emails[$addr] = "<a href=\"mailto:".$addr."\">".$addr."</a>";
			}
			$text = strtr($text, $emails);
		}
		$text = str_replace(array_keys($protected), $protected, $text);
		return $text;
	}
}

class messagelist {

	var $title;
	var $referencedate;
	var $msgs;

	function messagelist($title=false, $referencedate=false) {
		$this->title = $title;
		if (is_numeric($referencedate)) $this->referencedate = $referencedate;
		$this->msgs = array();
	}

	function addMsg($author, $postdate, $msg, $altdateline = false,$filename = false,$fileurl = false) {
		if ($filename and !$fileurl) trigger_error("You must supply a URL to go with the supplied filename",E_USER_ERROR);
		$nextmsg = sizeof($this->msgs);
		$this->msgs[$nextmsg]["author"] = $author;
		$this->msgs[$nextmsg]["date"] = $postdate;
		$this->msgs[$nextmsg]["msg"] = $msg;
		$this->msgs[$nextmsg]["altdateline"] = $altdateline;
		$this->msgs[$nextmsg]["filename"] = $filename;
		$this->msgs[$nextmsg]["fileurl"] = $fileurl;
	}

	function output() {
		$op = "";
		if ($this->title) $op .= "<h4>".$this->title."</h4>";
		foreach ($this->msgs as $msg) {
			$op .= "<div class=\"supportmsg\">";
			$op .= "<div class=\"metadata\">";
			$op .= "<b>".$msg["author"]."</b>, ";
			if ($msg["altdateline"]) {
				$op .= $msg["altdateline"];
			} else {
				$op .= date((($_SERVER["PHPDATE"])?$_SERVER["PHPDATE"]:"j F Y")." ".(($_SERVER["PHPTIME"])?$_SERVER["PHPTIME"]:"H:i"), $msg["date"])." &nbsp; (".Common::timepaststring($msg["date"]);
				if ($this->referencedate) $op .= ", T + ".Common::getTimeDifference($this->referencedate, $msg["date"]);
				$op .= ")";
			}
			if ($msg["filename"]) {
				$op .= "&nbsp;&nbsp;&nbsp;Attached file: <a href=\"".$msg["fileurl"]."\">".$msg["filename"]."</a>";
			}
			$op .= "</div>";
			$msg["msg"] = nl2br(htmlspecialchars($msg["msg"]));
			$op .= preg_replace("/\[(a|em|strong|code|kbd|blockquote|acronym)(.*)\](.*)\[\/(a|em|strong|code|kbd|blockquote|acronym)\]/iU", "<$1$2>$3</$4>", $msg["msg"]);
			$op .= "</div>";
		}
		return $op;
	}
}
?>
