<?php
/**
 * Test for validator::normalise
 *
 * $Revision$
 * $Date$
 * $Author$
 *
 * @codingstandard Assanka
 * @author Luke Blaney <luke.blaney@assanka.net>
 * @copyright Assanka Limited [All rights reserved]
 */


class normaliseTest extends PHPUnit_Framework_TestCase {
	public function testTextType() {
		$input = '⠊⠀⠉⠁⠝⠀⠑⠁⠞⠀⠛⠇⠁⠎⠎⠀⠁⠝⠙⠀⠊⠞⠀⠙⠕⠑⠎⠝⠞⠀⠓⠥⠗⠞⠀⠍⠑';
		$output = $input;
		$this->assertEquals($output, validator::normalise($input, array('type' => "text")), "Wrong normalised value returned");
		$badinput = new DateTime();
		$this->assertNull(validator::normalise($badinput, array('type' => "text")), "Normalise returned value instead of null");
	}
	public function testTextareaType() {
		$input = 'ვეპხის ტყაოსანი შოთა რუსთაველი
ღმერთსი შემვედრე, ნუთუ კვლა დამხსნას სოფლისა შრომასა, ცეცხლს, წყალსა და მიწასა, ჰაერთა თანა მრომასა; მომცნეს ფრთენი და აღვფრინდე, მივჰხვდე მას ჩემსა ნდომასა, დღისით და ღამით ვჰხედვიდე მზისა ელვათა კრთომაასა.';
		$output = $input;
		$this->assertEquals($output, validator::normalise($input, array('type' => "textarea")), "Wrong normalised value returned");
		$badinput = new DateTime();
		$this->assertNull(validator::normalise($badinput, array('type' => "textarea")), "Normalise returned value instead of null");
	}
	public function testCheckType() {
		$input = 1;
		$this->assertTrue(validator::normalise($input, array('type' => "check")), "Wrong normalised value returned");
		$input = 0;
		$this->assertFalse(validator::normalise($input, array('type' => "check")), "Wrong normalised value returned");
		$input = true;
		$this->assertTrue(validator::normalise($input, array('type' => "check")), "Wrong normalised value returned");
	}
	public function testChecklistType() {
		$input = array('hen', 'monkey', 'tennis ball');
		$output = array('hen', 'monkey');
		$this->assertEquals($output, validator::normalise($input, array('type' => "checklist", 'options' => array('hen' => "Chicken", 'giraffe' => "Giraffe", 'monkey' => "Primate"))), "Wrong normalised value returned");
		$badinput = 'tennis ball';
		$this->assertEquals(array(), validator::normalise($badinput, array('type' => "checklist", 'options' => array('hen' => "Chicken", 'giraffe' => "Giraffe", 'monkey' => "Primate"))), "Normalise returned value instead of empty array");
	}
	public function testIntegerType() {
		$input = '3.14';
		$output = 3;
		$this->assertEquals($output, validator::normalise($input, array('type' => "integer")), "Wrong normalised value returned");
		$badinput = 'apple';
		$this->assertEquals(0, validator::normalise($badinput, array('type' => "integer")), "Normalise returned value instead of null");
	}
	public function testDateType() {
		$input = 'today';
		$output = new DateTime($input);
		$this->assertEquals($output, validator::normalise($input, array('type' => "date")), "Wrong normalised value returned");
		$badinput = '5.5/Apple/26';
		$this->assertNull(validator::normalise($badinput, array('type' => "date")), "Normalise returned value instead of null");
	}
	public function testDatetimeType() {
		$input = 'today';
		$output = new DateTime($input);
		$this->assertEquals($output, validator::normalise($input, array('type' => "datetime")), "Wrong normalised value returned");
		$badinput = '5.5/Apple/26';
		$this->assertNull(validator::normalise($badinput, array('type' => "datetime")), "Normalise returned value instead of null");
	}
	public function testDatetimesecondsType() {
		$input = 'today';
		$output = new DateTime($input);
		$this->assertEquals($output, validator::normalise($input, array('type' => "datetimeseconds")), "Wrong normalised value returned");
		$badinput = '5.5/Apple/26';
		$this->assertNull(validator::normalise($badinput, array('type' => "datetimeseconds")), "Normalise returned value instead of null");
	}
	public function testTimeType() {
		$input = 124;
		$output = '00:02';
		$this->assertEquals($output, validator::normalise($input, array('type' => "time")), "Wrong normalised value returned");
		$badinput = '5.5/Apple/26';
		$this->assertNull(validator::normalise($badinput, array('type' => "time")), "Normalise returned value instead of null");
	}
	public function testTimesecondsType() {
		$input = 124;
		$output = '00:02:04';
		$this->assertEquals($output, validator::normalise($input, array('type' => "timeseconds")), "Wrong normalised value returned");
		$badinput = '5.5/Apple/26';
		$this->assertNull(validator::normalise($badinput, array('type' => "timeseconds")), "Normalise returned value instead of null");
	}
	public function testHiddenType() {
		$input = 'Можам да јадам стакло, а не ме штета.';
		$output = $input;
		$this->assertEquals($output, validator::normalise($input, array('type' => "hidden")), "Wrong normalised value returned");
		$badinput = array();
		$this->assertNull(validator::normalise($badinput, array('type' => "hidden")), "Normalise returned value instead of null");
	}
	public function testDummyType() {
		$input = 'Կրնամ ապակի ուտել և ինծի անհանգիստ չըներ։';
		$output = $input;
		$this->assertEquals($output, validator::normalise($input, array('type' => "dummy")), "Wrong normalised value returned");
		$badinput = new DateTime();
		$this->assertNull(validator::normalise($badinput, array('type' => "dummy")), "Normalise returned value instead of null");
	}
	public function testAutocompleteType() {
		$input = 'Мон ярсан суликадо, ды зыян эйстэнзэ а ули.';
		$output = $input;
		$this->assertEquals($output, validator::normalise($input, array('type' => "autocomplete")), "Wrong normalised value returned");
		$badinput = new DateTime();
		$this->assertNull(validator::normalise($badinput, array('type' => "autocomplete")), "Normalise returned value instead of null");
	}
	public function testSelectType() {
		$input = 'hen';
		$output = $input;
		$this->assertEquals($output, validator::normalise($input, array('type' => "select", 'options' => array('hen' => "Chicken", 'giraffe' => "Giraffe", 'monkey' => "Primate"))), "Wrong normalised value returned");
		$badinput = 'tennis ball';
		$this->assertNull(validator::normalise($badinput, array('type' => "select", 'options' => array('hen' => "Chicken", 'giraffe' => "Giraffe", 'monkey' => "Primate"))), "Normalise returned value instead of empty array");
	}
	public function testPasswordType() {
		$input = ' मैं काँच खा सकता हूँ और मुझे उससे कोई चोट नहीं पहुंचती.';
		$output = $input;
		$this->assertEquals($output, validator::normalise($input, array('type' => "password")), "Wrong normalised value returned");
		$badinput = new DateTime();
		$this->assertNull(validator::normalise($badinput, array('type' => "password")), "Normalise returned value instead of null");
	}
	public function testRichtextType() {
		$input = 'На берегу пустынных волн
Стоял он, дум великих полн,
И вдаль глядел. Пред ним широко
Река неслася; бедный чёлн
По ней стремился одиноко.
По мшистым, топким берегам
Чернели избы здесь и там,
Приют убогого чухонца;
И лес, неведомый лучам
В тумане спрятанного солнца,
Кругом шумел.';
		$output = $input;
		$this->assertEquals($output, validator::normalise($input, array('type' => "richtext")), "Wrong normalised value returned");
		$badinput = new DateTime();
		$this->assertNull(validator::normalise($badinput, array('type' => "richtext")), "Normalise returned value instead of null");
	}
	public function testImageuploadType() {
		$this->markTestIncomplete();
		$input = '';
		$output = $input;
		$this->assertEquals($output, validator::normalise($input, array('type' => "")), "Wrong normalised value returned");
		$badinput = new DateTime();
		$this->assertNull(validator::normalise($badinput, array('type' => "")), "Normalise returned value instead of null");
	}
	public function testUploadType() {
		$this->markTestIncomplete();
		$input = '';
		$output = $input;
		$this->assertEquals($output, validator::normalise($input, array('type' => "")), "Wrong normalised value returned");
		$badinput = new DateTime();
		$this->assertNull(validator::normalise($badinput, array('type' => "")), "Normalise returned value instead of null");
	}
	public function testSpacerType() {
		$input = null;
		$this->assertNull(validator::normalise($input, array('type' => "spacer")), "Wrong normalised value returned");
		$badinput = 'apples';
		$this->assertNull(validator::normalise($badinput, array('type' => "spacer")), "Normalise returned value instead of null");
	}
	public function testFloatType() {
		$input = '4';
		$output = 4.0;
		$this->assertEquals($output, validator::normalise($input, array('type' => "float")), "Wrong normalised value returned");
		$badinput = new DateTime();
		$this->assertEquals(0, validator::normalise($badinput, array('type' => "float")), "Normalise returned value instead of null");
	}
	public function testUnknownType() {
		$this->setExpectedException("PHPUnit_Framework_Error_Notice");
		validator::normalise($input, array('type' => "Vitrum edere possum; mihi non nocet."));
	}
}