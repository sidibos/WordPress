<?php
/**
 * Authenticate a user via session details, or require logon.
 *
 * This class handles the basics, but requires subclassing to function;
 * the implementation should handle functions for displaying login screens,
 * sending reminder emails, and so on.
 *
 * @codingstandard ftlabs-phpcs
 * @copyright The Financial Times Limited [All Rights Reserved]
 */

require_once($_SERVER['CORE_PATH'].'/helpers/authentication/v2/interfaces');
require_once($_SERVER['CORE_PATH'].'/helpers/authentication/v2/userdatastore/databaseuser');

class AuthDatabase implements AssankaAuthenticationInterface {
	protected static $_flags = 0;
	protected static $_templatelocations, $_contentrenderer;
	protected static $_page, $_pagetemplate, $_pagecontentplaceholder, $_pagetitleplaceholder;
	protected static $_sitename, $_membershipfromaddress;
	protected static $_loginusernameintro, $_loginusernamelabel, $_loginpasswordlabel;

	/**
	 * Authenticate the user
	 *
	 * Returns a database user.  As with all Assanka authentication classes, you can pass in constants to determine whether the user can remain
	 * anonymous, and whether to save the user ID in the session; these apply to AuthDatabase as follows:
	 *
	 * STATELESS: A session is always required - the STATELESS flag will therefore trigger an error.
	 * REQUIRE_AUTHENTICATED_USER: This flag is supported.
	 *
	 * @param integer $flags Bitwise options for the authentication operation.  See AssankaAuthenticationInterface for all available constants, and list above for how these apply to AuthDatabase.
	 *
	 * @return mixed A database user or false if the user is not logged in.
	 */
	public static function authenticate($flags = 0) {

		// Handle logout requests
		if (!empty($_REQUEST['authdatabase_logout'])) {
			self::logout();
			exit;
		}

		// Check the supplied flags
		self::$_flags = $flags;
		if (self::$_flags & self::STATELESS) trigger_error('STATELESS is not supported.', E_USER_ERROR);
		if (!session_id()) trigger_error('Cannot save session state - no active session.  Please session_start() first.', E_USER_ERROR);

		// Handle login requests
		if (!empty($_REQUEST['authdatabase_login'])) {
			if ($user = self::login()) return $user;
		}

		// Return the cached user id if appropriate
		if (!empty($_SESSION['AuthDatabase'])) {
			$user = new DatabaseUser($_SESSION['AuthDatabase']['userlogin']);
			return $user;
		}

		// If REQUIRE_AUTHENTICATED_USER isn't set, return false.
		if (!(self::$_flags & self::REQUIRE_AUTHENTICATED_USER)) return false;

		// Otherwise display the authentication-required screen
		self::displayAuthenticationRequired();
		exit;
	}

	/**
	 * Sets the page template details
	 *
	 * Sets the templatemanager to use when constructing the page for output, the page
	 * template to use, and the variable to set the content to.  If these are not supplied,
	 * any attempt to display login elements will error when using the default page construction
	 * methods.
	 *
	 * @param TemplateManager $tmanager     A reference to a templatemanager instance to output the page with
	 * @param string          $pagetemplate The name of the template to use for outputting the page
	 * @param string          $contentname  The name of the content placeholder to use when inserting the content.
	 * @param string          $titlename    (Optional) the name of a page title placeholder
	 *
	 * @return void
	 */
	public static function setPageOutputDetails($tmanager, $pagetemplate, $contentname, $titlename = false) {
		self::$_page = $tmanager;
		self::$_pagetemplate = $pagetemplate;
		self::$_pagecontentplaceholder = $contentname;
		self::$_pagetitleplaceholder = $titlename;
	}

	/**
	 * Sets login form introduction and prompt text.  If not supplied, defaults will be used.
	 *
	 * @param string $introtext     HTML to be displayed as an introduction when the authentication interface is first displayed.
	 * @param string $loginlabel    (Optional) The text to be displayed as the login label.
	 * @param string $passwordlabel (Optional) The text to be displayed as the password label
	 *
	 * @return void
	 */
	public static function setLoginDetails($introtext, $loginlabel = false, $passwordlabel = false) {
		self::$_loginusernameintro = $introtext;
		self::$_loginusernamelabel = $loginlabel;
		self::$_loginpasswordlabel = $passwordlabel;
	}

	/**
	 * Sets site details for use in email communications - eg forgotten password emails.
	 *
	 * @param string $sitename              The site name, for use in subject lines or from text.
	 * @param string $membershipfromaddress (Optional) An email address to send emails from.
	 *
	 * @return void
	 */
	public static function setSiteDetails($sitename, $membershipfromaddress = false) {
		self::$_sitename = $sitename;
		if ($membershipfromaddress) self::$_membershipfromaddress = $membershipfromaddress;
	}

	/**
	 * Add a new template path used to look up templates when presenting form-based interfaces for login/forgotten password/etc.  The path is added to the beginning of the lookup stack and so takes precedence over previous or default template locations.
	 *
	 * @param string $templatepath A new template patch to use for authentication templates
	 *
	 * @return void
	 */
	public static function addTemplatePath($templatepath) {
		self::_setupTemplateLocationsOnce();
		array_unshift(self::$_templatelocations, $templatepath);
	}

	/**
	 * Attempt to log the user in.  If REQUIRE_AUTHENTICATED_USER is set, this will display the authentication screen again on failure.
	 *
	 * @return mixed A DatabaseUser if the login succeeded; otherwise false.
	 */
	public static function login() {
		$_SESSION['AuthDatabase'] = false;
		$user = false;
		$submittedusername = !empty($_POST['authdatabase_username'])?trim($_POST['authdatabase_username']):'';

		// Remember the username if requested to
		if (!empty($_POST['authdatabase_rememberusername'])) {
			setcookie('authdatabase_rememberusername', $submittedusername, time() + (3600 * 24 * 400), '/');
			$_COOKIE['authdatabase_rememberusername'] = $submittedusername;
		} else {
			setcookie('authdatabase_rememberusername', '-', time() + (3600 * 24 * 400), '/');
			$_COOKIE['authdatabase_rememberusername'] = '-';
		}

		// Validate the user
		if (!empty($submittedusername) and !empty($_POST['authdatabase_password'])) {
			try {
				$_SESSION['AuthDatabase'] = false;
				$user = new DatabaseUser($submittedusername);
			} catch(Exception $e) {};

			if (!empty($user) and !$user->verifyPassword($_POST['authdatabase_password'])) {
				$user = false;
			}
		}

		// Add a small, random delay on login failure to hinder timing and dictionary attacks - add per-IP?
		if (!$user) usleep(rand(1000000, 2000000));

		// Display the barrier again if logins are required
		if (!$user and (self::$_flags & self::REQUIRE_AUTHENTICATED_USER)) {
			self::displayAuthenticationRequired('The username or password was incorrect; please check the details and try again.');
		}

		return $user;
	}

	/**
	 * Display the login screen, together with forgotten password links if database fields are available.
	 *
	 * @param string $errormessage (Optional) An error message to display.
	 *
	 * @return void
	 */
	public static function displayAuthenticationRequired($errormessage = false) {
		$renderer = self::_getInternalTemplateManager();
		$renderer->set('submittourl', $_SERVER['REQUEST_URI']);
		if ($postpreservation = self::_getPostPreservationInputs()) $renderer->set('extrainputs', $postpreservation);
		if ($errormessage) $renderer->set('errortext', $errormessage);

		if (!empty(self::$_loginusernameintro)) $renderer->set('authmessage', self::$_loginusernameintro);
		if (!empty(self::$_loginusernamelabel)) $renderer->set('usernamelabel', self::$_loginusernamelabel);
		if (!empty(self::$_loginpasswordlabel)) $renderer->set('passwordlabel', self::$_loginpasswordlabel);
		if (DatabaseUser::getPasswordResetFieldName()) $renderer->set('passwordresetenabled', true);

		// Update the login interface to match POST or stored details
		if (!empty($_COOKIE['authdatabase_rememberusername']) and $_COOKIE['authdatabase_rememberusername'] == '-') {
			$renderer->set('forgetusername', true);
		}
		if (!empty($_POST['authdatabase_username'])) {
			$renderer->set('authdatabase_username', $_POST['authdatabase_username']);
		} elseif (!empty($_COOKIE['authdatabase_rememberusername']) and $_COOKIE['authdatabase_rememberusername'] != '-') {
			$renderer->set('authdatabase_username', $_COOKIE['authdatabase_rememberusername']);
		}

		$content = $renderer->render('authdatabase_login');
		self::_outputContent($content, 'Log In');
		exit;
	}

	/**
	 * Display the forgotten password screen.
	 *
	 * @return void
	 */
	public static function displayForgottenPasswordPage() {
		if (!DatabaseUser::getPasswordResetFieldName()) trigger_error('Forgotten password page displayed without password reset field set up.', E_USER_ERROR);

		$renderer = self::_getInternalTemplateManager();
		$renderer->set('submittourl', $_SERVER['REQUEST_URI']);
		if ($postpreservation = self::_getPostPreservationInputs()) $renderer->set('extrainputs', $postpreservation);

		// Handle password reset submissions
		if (!empty($_REQUEST['authrc']) and empty($_REQUEST['authdatabase_forgottenpassword'])) {

			// Try and find the user
			try {
				$user = new DatabaseUser(trim($_REQUEST['authrc']), false);
			} catch(Exception $e) {};
			if (empty($user)) {
				usleep(rand(2000000, 3000000));
				$renderer->set('errortext', 'The reset link you were sent is no longer valid.  If you want to reset your password, please enter your login details again below and you will be sent a new link.');
			} else {

				// Check for a supplied new password
				if (!empty($_REQUEST['authdatabase_newpassword'])) {

					// Ensure the new password and confirmation match
					if (empty($_REQUEST['authdatabase_confirmpassword']) or $_REQUEST['authdatabase_newpassword'] != $_REQUEST['authdatabase_confirmpassword']) {
						$renderer->set('errortext', 'Your new password and the confirmation password did not match.  Please enter the new password again.');
					} else {
						$user->setData($user->getPasswordFieldName(), $_REQUEST['authdatabase_newpassword']);
						$user->setData($user->getPasswordResetFieldName(), null);

						// Log the user in again, enabling session cache
						$user = new DatabaseUser($user->getData($user->getUserLoginFieldName()));
						$_SESSION['AuthDatabase']['performloginchecks'] = true;

						$content = $renderer->render('authdatabase_forgottenpasswordcomplete');
						self::_outputContent($content, 'Password reset');
						exit;
					}
				}

				$content = $renderer->render('authdatabase_forgottenpasswordresetpassword');
				self::_outputContent($content, 'Enter a new password');
				exit;
			}

		// Handle forgotten password submissions
		} elseif (!empty($_POST['authdatabase_forgottenpassword'])) {
			if (empty($_POST['authdatabase_username'])) {
				$renderer->set('errortext', 'Please enter your login details.');
			} else {

				// Try and find the user
				try {
					$user = new DatabaseUser(trim($_POST['authdatabase_username']), false);
				} catch(Exception $e) {};
				if (empty($user)) {
					usleep(rand(2000000, 3000000));
					$renderer->set('errortext', 'We could not find your details with that login.  Please check the details and try again.');
				} else {

					// Try to extract the email address
					if (!$user->getData('email')) trigger_error('Unhandled: could not extract the email address when trying to reset a forgotten password', E_USER_ERROR);

					// Generate a temporary passcode for the user
					$passcode = substr(md5(time().SID), 0, 12);
					$user->setData(DatabaseUser::getPasswordResetFieldName(), $passcode);

					// Set up template details
					if ($user->getData('firstname') and $user->getData('surname')) {
						$name = $user->getData('firstname').' '.$user->getData('surname');
					} elseif ($user->getData('name')) {
						$name = $user->getData('name');
					} else {
						$name = trim($_POST['authdatabase_username']);
					}
					$renderer->set('name', $name);
					if (self::$_sitename) $renderer->set('sitename', self::$_sitename);

					// Render the content
					$renderer->set('resetlink', 'http'.(!empty($_SERVER['HTTPS'])?'s':'').'://'.$_SERVER['HTTP_HOST'].'/auth/forgottenpassword?authrc='.$passcode);
					$emailtext = $renderer->render('authdatabase_email_forgottenpassword');

					// Set up an email
					require_once($_SERVER['CORE_PATH'].'/helpers/mail/v1/mail');
					$mailer = new AssankaEMail();
					$mailer->setText($emailtext);
					$mailer->setSubject((empty(self::$_sitename)?'':self::$_sitename.' - ').'Password reset');
					if (!empty(self::$_membershipfromaddress)) {
						$mailer->setFrom(self::$_membershipfromaddress);
						$mailer->setBounceTo(self::$_membershipfromaddress);
					}
					$mailer->send($name.' <'.$user->getData('email').'>');

					// Display a confirmation page
					$content = $renderer->render('authdatabase_forgottenpasswordsent');
					self::_outputContent($content, 'Forgotten Password Sent');
					exit;
				}
			}
		}

		if (!empty(self::$_loginusernamelabel)) $renderer->set('usernamelabel', self::$_loginusernamelabel);

		if (!empty($_POST['authdatabase_username'])) {
			$renderer->set('authdatabase_username', $_POST['authdatabase_username']);
		} elseif (!empty($_COOKIE['authdatabase_rememberusername']) and $_COOKIE['authdatabase_rememberusername'] != '-') {
			$renderer->set('authdatabase_username', $_COOKIE['authdatabase_rememberusername']);
		}

		$content = $renderer->render('authdatabase_forgottenpassword');
		self::_outputContent($content, 'Forgotten Password');
		exit;
	}

	/**
	 * Log the user out
	 *
	 * Clears the session authentication details, ensuring the user is logged out.
	 *
	 * @return void
	 */
	public static function logout() {
		$_SESSION['AuthDatabase'] = false;
		header('Location: /');
		exit;
	}

	protected static function _setupTemplateLocationsOnce() {
		if (!empty(self::$_templatelocations)) return;
		self::$_templatelocations = array($_SERVER['CORE_PATH'].'/helpers/authentication/v2/authentication/templates');
	}

	protected static function _getInternalTemplateManager() {
		self::_setupTemplateLocationsOnce();
		if (empty(self::$_contentrenderer)) {
			self::$_contentrenderer = new TemplateManager(self::$_templatelocations);
		}
		return self::$_contentrenderer;
	}

	protected static function _getPostPreservationInputs() {
		if (empty($_POST)) return false;

		$postinputs = array();
		$escape = function($in) {
			return str_replace(array('\\', '"'), array('\\\\', '\\"'), $in);
		};
		foreach ($_POST as $k=>$v) {
			if (strpos($k, 'authdatabase_') === 0) continue;
			if (is_array($v)) {
				foreach ($v as $vk=>$vv) {
					$postinputs[] = '<input type="hidden" name="'.$escape($v).'['.$vk.']" value="'.$escape($vv).'" />';
				}
			} else {
				$postinputs[] = '<input type="hidden" name="'.$escape($k).'" value="'.$escape($v).'" />';
			}
		}

		if (!$postinputs) return false;
		return implode("\n", $postinputs);
	}

	/**
	 * Outputs a page containing the content provided.  Relies on master page details being set - see setPageOutputDetails - but can easily be overridden to handle custom output.
	 *
	 * @param string $content The content to output
	 * @param string $title   (Optional) A title to add to the page title, if _pagetitleplaceholder is set
	 *
	 * @return void
	 */
	protected static function _outputContent($content, $title = false) {
		if (empty(self::$_page) or empty(self::$_pagetemplate) or empty(self::$_pagecontentplaceholder)) trigger_error('Attempting to output authentication content without supplied page details - supply page output details or override output content function', E_USER_ERROR);

		self::$_page->add(self::$_pagecontentplaceholder, $content);
		if ($title and !empty(self::$_pagetitleplaceholder)) self::$_page->add(self::$_pagetitleplaceholder, $title);
		echo self::$_page->render(self::$_pagetemplate);
	}
}