#!/usr/bin/php
<?php

// Static configuration
define('MIN_TIME_BETWEEN_FLUSHES', 5);
define('REMOVE_ERRORS_AFTER', 86400);

// Command line configuration
$port = (!empty($_SERVER['argv'][1])) ? $_SERVER['argv'][1] : 9755;
$exportfile = (!empty($_SERVER['argv'][2])) ? $_SERVER['argv'][2] : '/tmp/udp_error_occurence_data.csv';

// Variables to store data
$counts = array();
$lastflush = 0;
$totalcount = 0;

// Open socket and listen
$socket = stream_socket_server("udp://0.0.0.0:".$port, $errno, $errstr, STREAM_SERVER_BIND);
if (!$socket) die("$errstr ($errno)");

do {

	// Wait for and receive an error (max 2048 bytes - likely to be more than the max UDP packet size)
	$pkt = stream_socket_recvfrom($socket, 2048, 0, $peer);
	if ($err = json_decode($pkt, true)) {
		
		// Record this occurence in the memory array
		if (empty($counts[$err['hash']])) $counts[$err['hash']] = array();
		if (empty($counts[$err['hash']][$err['server']])) {
			$counts[$err['hash']][$err['server']] = array(1, time());
		} else {
			++$counts[$err['hash']][$err['server']][0];
			$counts[$err['hash']][$err['server']][1] = time();
		}
		++$totalcount;

		// Update CSV string for this error
		$total = 0; 
		$mostrecent = 0; 
		$op = "";
		foreach ($counts[$err['hash']] as $hostname => $svr) {
			if ($hostname != "op" and $hostname != "mostrecent") {
				$op .= $err['hash'].",".$hostname.",".$svr[0].",".$svr[1]."\n";
				$total += $svr[0];
				$mostrecent = max($svr[1], $mostrecent);
			}
		}
		$op .= $err['hash'].",all,".$total.",".$mostrecent."\n";
		$counts[$err['hash']]['op'] = $op;
		$counts[$err['hash']]['mostrecent'] = $mostrecent;

		// Write out to disk
		if ($lastflush < (time()-MIN_TIME_BETWEEN_FLUSHES)) {
			$tempfile = tempnam("/tmp", "udp_error_occurence_data");
			$fp = fopen($tempfile, "w");
			$newcounts = array();
			foreach ($counts as $hash=>$data) {
				if ($data['mostrecent'] > (time() - REMOVE_ERRORS_AFTER)) {
					fwrite($fp, $data['op']);
					$newcounts[$hash] = $counts[$hash];
				}
			}
			fwrite($fp, "all,all,".$totalcount."\n");
			fclose($fp);
			chmod($tempfile, 0644);
			rename($tempfile, $exportfile);
			$lastflush=time();
			$counts = $newcounts;
			unset($newcounts);
		}
	}
} while ($pkt !== false);

?>
