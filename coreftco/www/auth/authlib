<?php

/*
Session authentication handler can operate in two modes, chosen using the GET parameter 'mode':

1 (default): FT_Remember redirect, Insist on FT_U, Read cache cookie, Load from server, Set cache cookie
2: FT_Remember redirect, Insist on FT_U, Read cache cookie
*/
if (empty($_GET['mode']) or $_GET['mode'] == 1) {
	$doNotOverride = $ftRememberRedirect = $mustHaveFtU = $readAssankaCookie = $loadFromServer = $setAssankaCookie = true;
} elseif ($_GET['mode'] == 2) {
	$doNotOverride = $ftRememberRedirect = $mustHaveFtU = $readAssankaCookie = true;
	$loadFromServer = $setAssankaCookie = false;
} else {
	exit;
}

// Cache for 1 day
require_once($_SERVER['COREFTCO'].'/helpers/cacheability/cacheability');
Cacheability::expiresAfter(86400);

?>

var Assanka = Assanka || {};

Assanka.auth = Assanka.$.extend(Assanka.auth, {

	host: 'http://<?php echo $_SERVER['HTTP_HOST'] ?>',

	// Called when the DOM is ready by an on-DOM-ready call
	initAuth: function() {
		var ftu_eid = null;
		
		<?php
		if ($doNotOverride) {
			?>

			// If user object is already defined, finish immediately (covers possibility that backend code is authenticating the user and returning a non-cachable page)
			if (typeof Assanka.auth.user != 'undefined') return false;
			<?php
		}

		if ($ftRememberRedirect) {
			?>

			// If user has FT_Remember but no FT_U, redirect them to FT barrier page
			if (Assanka.$.cookie("FT_Remember") && !Assanka.$.cookie("FT_U")) {
				window.location.replace("http://registration.ft.com/registration/barrier?location="+encodeURIComponent(window.location.href));
				return;
			}
			<?php
		}

		if ($mustHaveFtU) {
			?>

			// Extract the current user's erights-id from the FT_U cookie if it is available
			// If no FT_U cookie, user is anonymous
			if (!Assanka.$.cookie("FT_U")) return Assanka.auth.logout();
			var ftu_eid = Assanka.$.cookie("FT_U").match(/_EID=([^_]+)_/)[1];
			<?php
		}

		if ($readAssankaCookie) {
			?>

			// If there is a user data cache cookie, load it
			if (Assanka.$.cookie('asskftuser')) {
				Assanka.auth.user = Assanka.$.parseJSON(decodeURIComponent(Assanka.$.cookie('asskftuser')), true);

				// If the erights ID in the cache cookie is different to the FT_U cookie clear the cache cookie and ignore it, but continue on, using the FTU EID.
				if (!Assanka.auth.user || (ftu_eid && ftu_eid != Assanka.auth.user.eid)) {
					Assanka.auth.logout();
				} else {
					return Assanka.auth.login();
				}
			}
			<?php
		}

		if ($loadFromServer) {
			?>

			// Validate the user's session on the server
			var ajxurl = Assanka.auth.host+"/auth/sessionauth?";
			ajxurl += 'jsonp=Assanka.auth.response&cb='+Math.round(new Date().getTime() / 1000);
			if (Assanka.auth.user) ajxurl += '.'+Assanka.auth.user.eid;
			Assanka.$('<script type="text/javascript" src="'+ajxurl+'"></script>').appendTo(document.head);
			<?php
		} else {
			?>

			// User is probably logged in, but for this application, it's not necessary to know who they are, only that they are not in the FT_Remember state.
			return Assanka.auth.logout();
			<?php
		}
		?>

	},

	response: function(response) {
		if (typeof(response.user) != "undefined") {
			Assanka.auth.user = response.user;
 			Assanka.auth.login();
		} else {
			Assanka.auth.logout();
		}
	},

	logout: function() {
		Assanka.$.cookie('asskftuser', null, {path:'/'});
		Assanka.auth.user = null;
	},

	login: function() {

		<?php
		if ($setAssankaCookie) {
			?>
			// Set a 40-minute cookie, containing a token which is valid for four hours.  Don't renew if it hasn't changed, as the Inferno token might reach its expiry time.
			var cookieval = encodeURIComponent(Assanka.$.toJSON(Assanka.auth.user));
			if (cookieval != Assanka.$.cookie('asskftuser')) {
				var now = new Date();
				var expiredate = new Date(now.getTime()+2400000);
				Assanka.$.cookie('asskftuser', cookieval, {expires:expiredate,path:'/'});
			}
			<?php
		}
		?>
	}
});

// Call the authentication function immediately - pre page load
Assanka.auth.initAuth();