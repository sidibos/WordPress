<?php
/**
 * A single index page view, which may comprise a number of components and a primary list of content
 *
 * @codingstandard ftlabs-phpcs
 * @copyright The Financial Times Limited [All Rights Reserved]
 */

require_once dirname(__FILE__).'/FTAPIConnection';
require_once dirname(__FILE__).'/FTItemList';

class FTPageV1 {

	private $conn = null, $data = array(), $links = array(), $lastfetch, $lastchange;

	/**
	 * Creates an FTPageV1
	 *
	 * Private constructor.  Use factory method FTPageV1::get().
	 *
	 * @param FTAPIConnectionV1 $conn An FT API connection object
	 * @param FTAPIResponseV1   $resp An API response
	 * @return FTPageV1
	 */
	private function __construct($conn, $resp) {
		$this->conn = $conn;
		$this->resp = $resp;

		foreach ($resp['page'] as $k=>$v) {
			if ($k == 'links') {
				foreach ($v as $linkdata) {
					$this->links[$linkdata['rel']] = $linkdata['href'];
				}
			} else {
				$this->data[$k] = $v;
			}
		}
	}

	/**
	 * Returns a list of items in the main content of the page
	 *
	 * @return FTItemListV1
	 */
	public function getMainContent() {
		$list = new FTItemListV1($this->conn, "Page:".$this->data['id']);
		if (!$this->links['main-content']) {
			$this->conn->logWrite(array('action' => "page->getMainContent", 'status' => "fail", 'errtext' => "main-content link missing", 'id' => $this->data['id']));
			return $list;
		}
		$data = $this->conn->get($this->links['main-content']);
		if (empty($data['pageItems'])) {
			$this->conn->logWrite(array('action' => "page->getMainContent", 'status' => "empty", 'errtext' => "no pageItems", 'id' => $this->data['id']));
			return $list;
		}
		foreach ($data['pageItems'] as $item) {
			foreach ($item['links'] as $lnk) {
				if ($lnk['rel'] == 'content-item') {
					$list->addItem($lnk['href'], $item);
					break;
				}
			}
		}
		return $list;
	}

	/**
	 * Gets the date on which the page was last fetched from the API
	 *
	 * @return DateTime The date/time
	 */
	public function getLastFetchDate() {
		return $this->getAPIResponse()->getLastFetchDate();
	}

	/**
	 * Gets the date on which the item content last changed
	 *
	 * This does not include changes to the referenced content, only changes to the page itself.  Changing the order of stories on the page or changing which stories are on the page - not changing words in the stories.
	 *
	 * @return DateTime The date/time
	 */
	public function getLastChangeDate() {
		return $this->getAPIResponse()->getLastChangeDate();
	}

	/**
	 * Gets the API response from which the page was constructed
	 *
	 * @return FTAPIResponseV1
	 */
	public function getAPIResponse() {
		return $this->resp;
	}

	/**
	 * Returns one of the page's data aspects as an array
	 *
	 * @param string $key Aspect name (magic getter, so this parameter is passed by reading it as an object property)
	 * @return array The aspect data
	 */
	public function __get($key) {
		return isset($this->data[$key]) ? $this->data[$key] : null;
	}


	/**
	 * Creates an FTPage from an identifier, using the provided FTAPIConnection
	 *
	 * @param FTAPIConnectionV1 $conn An API connection object
	 * @param string            $ref  A string containing a UUID (either on it's own, or part of a larger string, normally a URL)
	 * @return FTPageV1
	 */
	public static function get($conn, $ref) {
		$uuid = self::uuid($ref);
		if (!$uuid) return null;
		$resp = $conn->get('site/v1/pages/'.$uuid);
		if (empty($resp['page'])) {
			$conn->logWrite(array('action' => "page::get", 'status' => "fail", 'errtext' => "empty response", 'id' => $uuid));
			return null;
		}
		$page = new FTPageV1($conn, $resp);
		return $page;
	}

	/**
	 * Extracts a UUID from a longer string (normally a URL)
	 *
	 * @param string $str A string containing a UUID
	 * @return string A UUID
	 */
	public static function uuid($str) {
		return (preg_match("/[0-9a-f\-]{36}/i", $str, $m)) ? $m[0] : null;
	}
}
