<?php
if (empty($jsdirectaccess)) {
	header("Cache-Control: must-revalidate");
	header("Content-type: text/javascript");
	$offset = 60 * 60 * 24 * 3;
	header("Expires: " . gmdate("D, d M Y H:i:s", time() + $offset) . " GMT");
}
?>

// this function is needed to work around 
// a bug in IE related to element attributes
function hasClass(obj) {
	var result = false;
	if (obj.getAttributeNode("class") != null) {
		result = obj.getAttributeNode("class").value;
	}
	return result;
}   
function URLEncode(plaintext) {
	var SAFECHARS = "0123456789" +					// Numeric
					"ABCDEFGHIJKLMNOPQRSTUVWXYZ" +	// Alphabetic
					"abcdefghijklmnopqrstuvwxyz" +
					"-_.!~*'()";					// RFC2396 Mark characters
	var HEX = "0123456789ABCDEF";

	var encoded = "";
	for (var i = 0; i < plaintext.length; i++ ) {
		var ch = plaintext.charAt(i);
	    if (ch == " ") {
		    encoded += "+";				// x-www-urlencoded, rather than %20
		} else if (SAFECHARS.indexOf(ch) != -1) {
		    encoded += ch;
		} else {
		    var charCode = ch.charCodeAt(0);
			if (charCode > 255) {
			    alert( "Unicode Character '" 
                        + ch 
                        + "' cannot be encoded using standard URL encoding.\n" +
				          "(URL encoding only supports 8-bit characters.)\n" +
						  "A space (+) will be substituted." );
				encoded += "+";
			} else {
				encoded += "%";
				encoded += HEX.charAt((charCode >> 4) & 0xF);
				encoded += HEX.charAt(charCode & 0xF);
			}
		}
	}
	return encoded;
}
function getSel(ele) {
	var str = new String();
	if (document.selection) {
		var oRange = document.selection.createRange();
		str = oRange.text;
		return str;
	} else if (ele.selectionStart) {
		if (ele.selectionEnd-ele.selectionStart > 0) {
			var str = ele.value.substring(ele.selectionStart, (ele.selectionEnd-ele.selectionStart));
			return str;
		} else {
			return false;
		}
	} else return false;
}

function stripe() {

	// the flag we'll use to keep track of 
	// whether the current row is odd or even
	var even = true;

	// obtain a reference to the data tables
	// if no such table exists, abort
	var tables = getElementsByClassname("data", "table");
	if (! tables) { return; }

	// Iterate through the available data tables...
	for (var g = 0; g < tables.length; g++) {

		// by definition, tables can have more than one tbody
		// element, so we'll have to get the list of child
		// &lt;tbody&gt;s 
		var tbodies = tables[g].getElementsByTagName("tbody");

		// and iterate through them...
		for (var h = 0; h < tbodies.length; h++) {

			// find all the &lt;tr&gt; elements... 
			var trs = tbodies[h].getElementsByTagName("tr");

			// ... and iterate through them (provided that the table has less than 500 rows)
			for (var i = 0; i < trs.length && trs.length < 500; i++) {

				// avoid rows that have a class attribute unless the class is 'stripeeven' or 'stripeodd'
				var c = hasClass(trs[i]);
				if (!c || c == "stripeeven" || c == "stripeodd") {

					// set a class on the row so the cells inherit a color
					trs[i].className = even ? "stripeeven" : "stripeodd";

					// flip from odd to even, or vice-versa
					even = !even;
				}
			}
		}
	}
}

function getElementsByClassname (needle, tag) {
	if (!tag) var tag = "*";
	var my_array = document.getElementsByTagName(tag);
	var retvalue = new Array();
	var i;
	var j;

	for (i = 0, j = 0; i < my_array.length; i++) {
		var c = " " + my_array[i].className + " ";
		if (c.indexOf(" " + needle + " ") != -1) retvalue[j++] = my_array[i];
	}
	return retvalue;
}

// Used to expand and collapse child rows in a standard table with child rows
function toggleChildRows(imgelement) {
	var currentelement = imgelement;
	var expanding = true;
	var rowtocheck = false;

	if (imgelement.src.indexOf("minus.png") != -1) expanding = false;
	if (expanding) {
		elementdisplay = (document.all)?"block":"table-row";	
		imgelement.src = "<?=$_SERVER["CORE_WEB_ALIAS"]?>/imgs/tree/minus.png";
	} else {
		elementdisplay = "none";	
		imgelement.src = "<?=$_SERVER["CORE_WEB_ALIAS"]?>/imgs/tree/plus.png";
	} 
	while (currentelement.parentNode && !rowtocheck) {
		currentelement = currentelement.parentNode;
		if (currentelement.tagName == "TR") rowtocheck = currentelement;
	}
	if (rowtocheck) {
		matchclass = rowtocheck.className;
		if (expanding) {
			rowtocheck.className = (rowtocheck.className)?rowtocheck.className+" emphasis":"emphasis";
		} else {
			rowtocheck.className = rowtocheck.className.replace(" emphasis","");
			if (rowtocheck.className == "emphasis") rowtocheck.className = "";
		}
		while (rowtocheck.nextSibling) {
			rowtocheck = rowtocheck.nextSibling;
			if (window.Node && rowtocheck.nodeType != window.Node.ELEMENT_NODE) continue;
			else if (rowtocheck.nodeType != 1) continue;
			if (rowtocheck.className && (rowtocheck.className.indexOf("childrow") != -1)) {
				rowtocheck.style.display = elementdisplay;
				rowtocheck.className = "childrow "+matchclass;
				
				// If expanding, set indent
				if (expanding) {
					var tds = rowtocheck.getElementsByTagName("td");
					var celltoshift = 1;
					while (celltoshift) {
						if (!tds[celltoshift]) {
							celltoshift = false;
						} else if (tds[celltoshift].innerHTML) {
							tds[celltoshift].style.paddingLeft = "20px";
							celltoshift = false;
						} else {
							celltoshift++;
						}
					}
				}
			} else {
				break;
			}
		}
	}
}

// Used to expand and restore the central area of a standard admin layout
var adminCollapsed = false;
var adminPanelHeight = false;
var adminCollapseScanned = false;
var adminCentrePanel = adminLeftPanel = adminRightPanel = false;

function toggleAdminCells() {
	if (!adminCollapseScanned) {
		var allTDs = document.getElementById('mainAdminTable').getElementsByTagName('td');
		for (i = 0; i < allTDs.length; i++) {
			if (allTDs[i].className.indexOf('leftpanel') >= 0) adminLeftPanel = allTDs[i]; 
			if (allTDs[i].className.indexOf('centrepanel') >= 0) adminCentrePanel = allTDs[i]; 
			if (allTDs[i].className.indexOf('rightpanel') >= 0) adminRightPanel = allTDs[i]; 
		}
		adminPanelHeight = document.getElementById('mainAdminTable').offsetHeight;
		adminCollapseScanned = true;
	}
	if (adminCollapsed && adminCentrePanel) {
		adminPanelHeight = document.getElementById('mainAdminTable').offsetHeight;
		document.getElementById('adminexpandbutton').style.display = "none";
		document.getElementById('admincollapsebutton').style.display = "inline";
		if (adminLeftPanel) adminCentrePanel.parentNode.insertBefore(adminLeftPanelCopy, adminCentrePanel);
		if (adminRightPanel) adminCentrePanel.parentNode.appendChild(adminRightPanelCopy);
	} else if (adminCentrePanel) {
		document.getElementById('admincollapsebutton').style.display = "none";
		document.getElementById('adminexpandbutton').style.display = "inline";
		document.getElementById('mainAdminTable').style.height = adminPanelHeight+'px';
		if (adminLeftPanel) {
			adminLeftPanelCopy = adminLeftPanel;
			adminLeftPanel.parentNode.removeChild(adminLeftPanel);
		}
		if (adminRightPanel) {
			adminRightPanelCopy = adminRightPanel;
			adminRightPanel.parentNode.removeChild(adminRightPanel);
		}
	} 
	adminCollapsed = !adminCollapsed;
}

function showhidehelp(id) {
	var callingField = false;
	var theElement = false;
	var helpHeader = document.getElementById("helpheader");
	if (!helpHeader) return;
	if (arguments[1]) callingField = arguments[1];
	if (document.getElementById("helplink"+id)) document.getElementById("helplink"+id).blur();
	var helps = getElementsByClassname("help", "div");
	for (var i=0; i<helps.length; i++ ) {
		helps[i].style.display = "none";
	}
	helpHeader.style.marginTop = "0px";
	if (document.getElementById("help"+id)) {
		theElement = document.getElementById("help"+id);
		if (theElement.style.display == "block") {
			theElement.style.display = "none";
		} else {
			theElement.style.display = "block";
		}
	} else {
		if (document.getElementById("nohelpavail")) {
			theElement = document.getElementById("nohelpavail");
			theElement.style.display = "block";
		}
	}
	var rightColumn = document.getElementById("rightpanel");
	if (rightColumn && theElement && callingField) {
		var originalPosition = findPosY(document.getElementById("helppositionmarker"));
		helpTop = findPosY(callingField) - originalPosition - helpHeader.offsetHeight + 5;
		var overflow = (originalPosition + helpTop + helpHeader.offsetHeight + theElement.offsetHeight - 10) - (findPosY(document.getElementById("mainAdminTable")) + document.getElementById("mainAdminTable").offsetHeight);
		if (overflow > 0) {
			helpTop = helpTop - overflow;
		} 
		if (helpTop < 0) helpTop = 0;
		helpHeader.style.marginTop = helpTop + "px";
	}
}

function findPosY(object) {
	var currenttop = 0;
	if (object.offsetParent) {
		while (object.offsetParent) {
			currenttop += object.offsetTop;
			object = object.offsetParent;
		}
	} else if (object.y) {
		currenttop = object.y;
	}
	return currenttop;
}

// Cross platform function for creating XML HTTP controller objects
function newXmlHttp() {
	var xmlhttp;
	/*@cc_on @*/
	/*@if (@_jscript_version >= 5)
		try {
			xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");
		} catch (e) {
			try {
				xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
			} catch (E) {
				xmlhttp = false;
			}
		}
	@end @*/
	if (!xmlhttp && typeof XMLHttpRequest!='undefined') {
		xmlhttp = new XMLHttpRequest();
	}
	return xmlhttp;
}

// Shortcut function to return an object by its ID
function obj(objid) {
	return document.getElementById(objid);
}

function enableAllFields() {
	var ipts = document.getElementsByTagName("input");
	for (var i=0; i<ipts.length; i++) {
		ipts[i].disabled=false;
	}
}

function enforceMaxLength() {
	var maxlength = parseInt(this.getAttribute('maxlength'));
	if (this.value.length > maxlength) this.value = this.value.substring(0, maxlength);
}

var activetables = new Array();
var acfields = new Array();
var ev;


function addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

function init() {
	stripe();
	ev = new EventView();
	ev.init();
	ImagePreview.init();
	if (document.getElementById("waitmsg")) {
		document.getElementById("waitmsg").style.display="none";
	}
	var objs = document.getElementsByTagName("textarea");
	for (var textareanum = 0; textareanum < objs.length; textareanum++) {
		if (objs[textareanum].getAttribute("maxlength")) {
			objs[textareanum].onkeyup = enforceMaxLength;
		}
	}
}
window.onload=init;