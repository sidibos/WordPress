<?php

/**
 * Message list
 *
 * Create an HTML representation of a sequence of
 * messages, designed to fit in the content well
 * of an admin interface created with AdminInterface
 *
 * @copyright The Financial Times Limited [All Rights Reserved]
 */
class MessagelistV2 extends TemplateManager {
	
	var $msgs;

	/**
	 * Creates a columnlist object
	 * 
	 * @return  MessageList
	 */
	function __construct() {
		parent::__construct($_SERVER["CORE_PATH"]."/helpers/adminwidgets/messagelist/v2/templates");
		$this->msgs = array();
	}

	/**
	 * Sets the title of the list
	 *
	 * If no title is set, the list will not be prefixed with a title (better if the list is the first/only item on a Core admin page)
	 * 
	 * @param   string  $str   Title for the messagelist
	 * @return  void
	 */
	function setTitle($title) {
		$this->set("title", $title);
	}

	/**
	 * Adds a message to the message list
	 *
	 * Returns a message object that can be manipulated further using Messagelist_Message methods.
	 * 
	 * @param   string  $author    Name of message author
	 * @param   string  $postdate  Date of the message in any parsable date format
	 * @param   string  $msg       String, message text. HTML is converted to entities, and line breaks are formatted with  <br>. The following HTML tags are recognised when inserted using square brackets rather than the usual angle brackets: a, em, strong, code, kbd, blockquote, acronym.
	 * @return  void
	 */
	function addMsg($author, $postdate, $msg) {
		$msg = new Messagelist_message($author, $postdate, $msg);
		$this->msgs[] = &$msg;
		return $msg;
	}

	/**
	 * Returns an XHTML representation of the messagelist
	 *
	 * @return  string   HTML data
	 */
	function output() {
		if (sizeof($this->msgs)) {
			foreach ($this->msgs as $id=>$msg) {
				$msgdata = $msg->toArray();
				$msgdata["i"] = $id;
				if ($f = $msg->getFiles()) {
					$this->set("files", null);
					foreach($f as $file) $this->add("files", $file);
					$msgdata["attachments"] = $this->render("attachments");
				}
				if ($a = $msg->getActions()) {
					$this->clearAssigned("actions");
					foreach($a as $action) $this->add("actions", $action);
					$msgdata["actions"] = $this->render("actions");
				}
				$this->add("msgs", $msgdata);
			}
			return $this->render("messages");
		} else {
			return "";
		}
	}
}


/**
 * Message list message
 * 
 * A single message from a Messagelist
 *
 * @author Andrew Betts
 * @copyright Assanka Limited [All Rights Reserved]
 */
class Messagelist_message {
	
	private $author, $date, $msg, $elapsed, $dateline, $files, $actions, $classname;

	/**
	 * Creates a message.
	 * 
	 * Done by the messagelist, so no need to do this yourself
	 *
	 * @return  Messagelist_message
	 */
	function Messagelist_message($author, $postdate, $msg) {
		if (!($this->date = Common::convertHumanTime($postdate))) trigger_error("Invalid date", E_USER_ERROR);
		$this->author = $author;
		$this->msg = $msg;
		$this->files = array();
	}

	/**
	 * Make a link to a file from a message.
	 *
	 * The file will be represented by an icon based on the file extension in the URL.
	 *
	 * @param   string   $filename    Name of file to display on screen
	 * @param   string   $fileurl     URL of file to link to
	 * @return  void
	 */
	function attachFile($filename, $fileurl) {
		if ($filename and !$fileurl) trigger_error("You must supply a URL to go with the supplied filename", E_USER_ERROR);
		$nextfile = sizeof($this->files);
		$this->files[$nextfile]["name"] = $filename;
		$this->files[$nextfile]["url"] = $fileurl;
		$ext = (preg_match("/\.([a-z0-9]{1,5})$/i", $filename, $m)) ? $m[1] : "unknown";
		$ext = strtolower($ext);
		if (!is_file($_SERVER["CORE_PATH"]."/static/imgs/fileicons/32/".$ext.".png")) $ext = "unknown";
		$this->files[$nextfile]["type"] = $ext;
	}

	/**
	 * Add an action link to a message, providing an action relating to the message.
	 *
	 * @param   string   $href     Link to action handler script
	 * @param   string   $label    Text to display for the link
	 * @param   string   $onclick  Optional javascript to execute before the link is followed 
	 * @return  void
	 */
	function addAction($href, $label, $onclick = "") {
		if (!$href) trigger_error("You must supply an href attribute for your action button", E_USER_ERROR);
		if (!$label) trigger_error("You must supply a label for your action button", E_USER_ERROR);
		$nextaction = sizeof($this->actions);
		$this->actions[$nextaction]["href"] = $href;
		$this->actions[$nextaction]["label"] = $label;
		$this->actions[$nextaction]["onclick"] = $onclick;
	}

	/**
	 * Replace automatic date line with a specified one
	 *
	 * Set an alternative date line to replace the default one. By default Messagelist will include a date line displaying a relative date, eg "3 days ago", and if set, an elaped time eg. "T + 3 minutes"
	 *
	 * @param   string   $line     Text to replace date line
	 * @return  void
	 */
	function altDateline($str) {
		$this->dateline = $str;
	}

	/**
	 * Allows message times to be calculated relative to a specified time
	 *
	 * Specifies a date relative to which the elapsed time offset should be calculated. Acts as a kind of 'time zero' marker, to indicate how long after that moment the message was written. Adds an extra element to the date line if the message is rendered with the standard date line.
	 *
	 * @param   mixed   $elapsed   Date of an event in response to which the messages have arisen, eg the time of a support request or creation time of a topic in a forum. If provided, must be a Unix timestamp or other parsable date format. Will be used to provide a relative date eg "T + 3 hours" in addition to an absolute one.  
	 * @return  void
	 */
	function useElapsedTime($elapsed) {
		$this->elapsed = Common::convertHumanTime($elapsed);
	}

	/**
	 * Set a class on the HTML DIV element that encloses the message
	 *
	 * Intended to be used to mark messages with a special status, such as messages written by the current logged in user.
	 *
	 * @param   string   $str   Class name
	 * @return  void
	 */
	function setClass($str) {
		$this->classname = $str;
	}

	/**
	 * Converts the message properties to an array
	 *
	 * Used by Messagelist.
	 *
	 * @return  array
	 */
	function toArray() {
		$ret = array("author"=>$this->author, "date"=>$this->date, "msg"=>$this->msg);
		if ($this->elapsed) $ret["elapsed"]=$this->date-$this->elapsed;
		if ($this->dateline) $ret["dateline"]=$this->dateline;
		if ($this->classname) $ret["classname"]=$this->classname;
		return $ret;
	}

	/**
	 * Returns a list of all files attached to the message
	 *
	 * Used by Messagelist.
	 *
	 * @return  array
	 */
	function getFiles() {
		return $this->files;
	}

	/**
	 * Returns a list of all actions attached to the message
	 *
	 * Used by Messagelist.
	 *
	 * @return  array
	 */
	function getActions() {
		return $this->actions;
	}
}
	
if (!class_exists('Messagelist')) class_alias('MessagelistV2', 'Messagelist');
